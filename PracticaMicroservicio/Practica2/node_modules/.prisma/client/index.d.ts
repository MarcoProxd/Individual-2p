
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Evento
 * 
 */
export type Evento = $Result.DefaultSelection<Prisma.$EventoPayload>
/**
 * Model Asistente
 * 
 */
export type Asistente = $Result.DefaultSelection<Prisma.$AsistentePayload>
/**
 * Model Pago
 * 
 */
export type Pago = $Result.DefaultSelection<Prisma.$PagoPayload>
/**
 * Model Servicio
 * 
 */
export type Servicio = $Result.DefaultSelection<Prisma.$ServicioPayload>
/**
 * Model Proveedor
 * 
 */
export type Proveedor = $Result.DefaultSelection<Prisma.$ProveedorPayload>
/**
 * Model TipoEvento
 * 
 */
export type TipoEvento = $Result.DefaultSelection<Prisma.$TipoEventoPayload>
/**
 * Model Persona
 * 
 */
export type Persona = $Result.DefaultSelection<Prisma.$PersonaPayload>
/**
 * Model MetodoPago
 * 
 */
export type MetodoPago = $Result.DefaultSelection<Prisma.$MetodoPagoPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Reserva
 * 
 */
export type Reserva = $Result.DefaultSelection<Prisma.$ReservaPayload>
/**
 * Model TipoServicio
 * 
 */
export type TipoServicio = $Result.DefaultSelection<Prisma.$TipoServicioPayload>
/**
 * Model Contrato
 * 
 */
export type Contrato = $Result.DefaultSelection<Prisma.$ContratoPayload>
/**
 * Model Calificacion
 * 
 */
export type Calificacion = $Result.DefaultSelection<Prisma.$CalificacionPayload>
/**
 * Model CalificacionProveedor
 * 
 */
export type CalificacionProveedor = $Result.DefaultSelection<Prisma.$CalificacionProveedorPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Eventos
 * const eventos = await prisma.evento.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Eventos
   * const eventos = await prisma.evento.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.evento`: Exposes CRUD operations for the **Evento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eventos
    * const eventos = await prisma.evento.findMany()
    * ```
    */
  get evento(): Prisma.EventoDelegate<ExtArgs>;

  /**
   * `prisma.asistente`: Exposes CRUD operations for the **Asistente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Asistentes
    * const asistentes = await prisma.asistente.findMany()
    * ```
    */
  get asistente(): Prisma.AsistenteDelegate<ExtArgs>;

  /**
   * `prisma.pago`: Exposes CRUD operations for the **Pago** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagos
    * const pagos = await prisma.pago.findMany()
    * ```
    */
  get pago(): Prisma.PagoDelegate<ExtArgs>;

  /**
   * `prisma.servicio`: Exposes CRUD operations for the **Servicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicios
    * const servicios = await prisma.servicio.findMany()
    * ```
    */
  get servicio(): Prisma.ServicioDelegate<ExtArgs>;

  /**
   * `prisma.proveedor`: Exposes CRUD operations for the **Proveedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proveedors
    * const proveedors = await prisma.proveedor.findMany()
    * ```
    */
  get proveedor(): Prisma.ProveedorDelegate<ExtArgs>;

  /**
   * `prisma.tipoEvento`: Exposes CRUD operations for the **TipoEvento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoEventos
    * const tipoEventos = await prisma.tipoEvento.findMany()
    * ```
    */
  get tipoEvento(): Prisma.TipoEventoDelegate<ExtArgs>;

  /**
   * `prisma.persona`: Exposes CRUD operations for the **Persona** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personas
    * const personas = await prisma.persona.findMany()
    * ```
    */
  get persona(): Prisma.PersonaDelegate<ExtArgs>;

  /**
   * `prisma.metodoPago`: Exposes CRUD operations for the **MetodoPago** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetodoPagos
    * const metodoPagos = await prisma.metodoPago.findMany()
    * ```
    */
  get metodoPago(): Prisma.MetodoPagoDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.reserva`: Exposes CRUD operations for the **Reserva** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservas
    * const reservas = await prisma.reserva.findMany()
    * ```
    */
  get reserva(): Prisma.ReservaDelegate<ExtArgs>;

  /**
   * `prisma.tipoServicio`: Exposes CRUD operations for the **TipoServicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoServicios
    * const tipoServicios = await prisma.tipoServicio.findMany()
    * ```
    */
  get tipoServicio(): Prisma.TipoServicioDelegate<ExtArgs>;

  /**
   * `prisma.contrato`: Exposes CRUD operations for the **Contrato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contratoes
    * const contratoes = await prisma.contrato.findMany()
    * ```
    */
  get contrato(): Prisma.ContratoDelegate<ExtArgs>;

  /**
   * `prisma.calificacion`: Exposes CRUD operations for the **Calificacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Calificacions
    * const calificacions = await prisma.calificacion.findMany()
    * ```
    */
  get calificacion(): Prisma.CalificacionDelegate<ExtArgs>;

  /**
   * `prisma.calificacionProveedor`: Exposes CRUD operations for the **CalificacionProveedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalificacionProveedors
    * const calificacionProveedors = await prisma.calificacionProveedor.findMany()
    * ```
    */
  get calificacionProveedor(): Prisma.CalificacionProveedorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Evento: 'Evento',
    Asistente: 'Asistente',
    Pago: 'Pago',
    Servicio: 'Servicio',
    Proveedor: 'Proveedor',
    TipoEvento: 'TipoEvento',
    Persona: 'Persona',
    MetodoPago: 'MetodoPago',
    Cliente: 'Cliente',
    Reserva: 'Reserva',
    TipoServicio: 'TipoServicio',
    Contrato: 'Contrato',
    Calificacion: 'Calificacion',
    CalificacionProveedor: 'CalificacionProveedor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'evento' | 'asistente' | 'pago' | 'servicio' | 'proveedor' | 'tipoEvento' | 'persona' | 'metodoPago' | 'cliente' | 'reserva' | 'tipoServicio' | 'contrato' | 'calificacion' | 'calificacionProveedor'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Evento: {
        payload: Prisma.$EventoPayload<ExtArgs>
        fields: Prisma.EventoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findFirst: {
            args: Prisma.EventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findMany: {
            args: Prisma.EventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>[]
          }
          create: {
            args: Prisma.EventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          createMany: {
            args: Prisma.EventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          update: {
            args: Prisma.EventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          deleteMany: {
            args: Prisma.EventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          aggregate: {
            args: Prisma.EventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvento>
          }
          groupBy: {
            args: Prisma.EventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventoCountArgs<ExtArgs>,
            result: $Utils.Optional<EventoCountAggregateOutputType> | number
          }
        }
      }
      Asistente: {
        payload: Prisma.$AsistentePayload<ExtArgs>
        fields: Prisma.AsistenteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AsistenteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AsistenteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>
          }
          findFirst: {
            args: Prisma.AsistenteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AsistenteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>
          }
          findMany: {
            args: Prisma.AsistenteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>[]
          }
          create: {
            args: Prisma.AsistenteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>
          }
          createMany: {
            args: Prisma.AsistenteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AsistenteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>
          }
          update: {
            args: Prisma.AsistenteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>
          }
          deleteMany: {
            args: Prisma.AsistenteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AsistenteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AsistenteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AsistentePayload>
          }
          aggregate: {
            args: Prisma.AsistenteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAsistente>
          }
          groupBy: {
            args: Prisma.AsistenteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AsistenteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AsistenteCountArgs<ExtArgs>,
            result: $Utils.Optional<AsistenteCountAggregateOutputType> | number
          }
        }
      }
      Pago: {
        payload: Prisma.$PagoPayload<ExtArgs>
        fields: Prisma.PagoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PagoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>
          }
          findFirst: {
            args: Prisma.PagoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>
          }
          findMany: {
            args: Prisma.PagoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>[]
          }
          create: {
            args: Prisma.PagoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>
          }
          createMany: {
            args: Prisma.PagoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PagoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>
          }
          update: {
            args: Prisma.PagoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>
          }
          deleteMany: {
            args: Prisma.PagoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PagoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PagoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PagoPayload>
          }
          aggregate: {
            args: Prisma.PagoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePago>
          }
          groupBy: {
            args: Prisma.PagoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PagoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagoCountArgs<ExtArgs>,
            result: $Utils.Optional<PagoCountAggregateOutputType> | number
          }
        }
      }
      Servicio: {
        payload: Prisma.$ServicioPayload<ExtArgs>
        fields: Prisma.ServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findFirst: {
            args: Prisma.ServicioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findMany: {
            args: Prisma.ServicioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          create: {
            args: Prisma.ServicioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          createMany: {
            args: Prisma.ServicioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServicioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          update: {
            args: Prisma.ServicioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          deleteMany: {
            args: Prisma.ServicioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServicioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServicioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          aggregate: {
            args: Prisma.ServicioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServicio>
          }
          groupBy: {
            args: Prisma.ServicioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicioCountArgs<ExtArgs>,
            result: $Utils.Optional<ServicioCountAggregateOutputType> | number
          }
        }
      }
      Proveedor: {
        payload: Prisma.$ProveedorPayload<ExtArgs>
        fields: Prisma.ProveedorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProveedorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProveedorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          findFirst: {
            args: Prisma.ProveedorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProveedorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          findMany: {
            args: Prisma.ProveedorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>[]
          }
          create: {
            args: Prisma.ProveedorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          createMany: {
            args: Prisma.ProveedorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProveedorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          update: {
            args: Prisma.ProveedorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          deleteMany: {
            args: Prisma.ProveedorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProveedorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProveedorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          aggregate: {
            args: Prisma.ProveedorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProveedor>
          }
          groupBy: {
            args: Prisma.ProveedorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProveedorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProveedorCountArgs<ExtArgs>,
            result: $Utils.Optional<ProveedorCountAggregateOutputType> | number
          }
        }
      }
      TipoEvento: {
        payload: Prisma.$TipoEventoPayload<ExtArgs>
        fields: Prisma.TipoEventoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoEventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoEventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>
          }
          findFirst: {
            args: Prisma.TipoEventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoEventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>
          }
          findMany: {
            args: Prisma.TipoEventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>[]
          }
          create: {
            args: Prisma.TipoEventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>
          }
          createMany: {
            args: Prisma.TipoEventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TipoEventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>
          }
          update: {
            args: Prisma.TipoEventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>
          }
          deleteMany: {
            args: Prisma.TipoEventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TipoEventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TipoEventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoEventoPayload>
          }
          aggregate: {
            args: Prisma.TipoEventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipoEvento>
          }
          groupBy: {
            args: Prisma.TipoEventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TipoEventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoEventoCountArgs<ExtArgs>,
            result: $Utils.Optional<TipoEventoCountAggregateOutputType> | number
          }
        }
      }
      Persona: {
        payload: Prisma.$PersonaPayload<ExtArgs>
        fields: Prisma.PersonaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          findFirst: {
            args: Prisma.PersonaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          findMany: {
            args: Prisma.PersonaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>[]
          }
          create: {
            args: Prisma.PersonaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          createMany: {
            args: Prisma.PersonaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PersonaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          update: {
            args: Prisma.PersonaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          deleteMany: {
            args: Prisma.PersonaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PersonaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PersonaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonaPayload>
          }
          aggregate: {
            args: Prisma.PersonaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePersona>
          }
          groupBy: {
            args: Prisma.PersonaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonaCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonaCountAggregateOutputType> | number
          }
        }
      }
      MetodoPago: {
        payload: Prisma.$MetodoPagoPayload<ExtArgs>
        fields: Prisma.MetodoPagoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetodoPagoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetodoPagoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
          }
          findFirst: {
            args: Prisma.MetodoPagoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetodoPagoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
          }
          findMany: {
            args: Prisma.MetodoPagoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>[]
          }
          create: {
            args: Prisma.MetodoPagoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
          }
          createMany: {
            args: Prisma.MetodoPagoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MetodoPagoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
          }
          update: {
            args: Prisma.MetodoPagoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
          }
          deleteMany: {
            args: Prisma.MetodoPagoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MetodoPagoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MetodoPagoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
          }
          aggregate: {
            args: Prisma.MetodoPagoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMetodoPago>
          }
          groupBy: {
            args: Prisma.MetodoPagoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MetodoPagoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetodoPagoCountArgs<ExtArgs>,
            result: $Utils.Optional<MetodoPagoCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Reserva: {
        payload: Prisma.$ReservaPayload<ExtArgs>
        fields: Prisma.ReservaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          findFirst: {
            args: Prisma.ReservaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          findMany: {
            args: Prisma.ReservaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>[]
          }
          create: {
            args: Prisma.ReservaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          createMany: {
            args: Prisma.ReservaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReservaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          update: {
            args: Prisma.ReservaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          deleteMany: {
            args: Prisma.ReservaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          aggregate: {
            args: Prisma.ReservaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReserva>
          }
          groupBy: {
            args: Prisma.ReservaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservaCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservaCountAggregateOutputType> | number
          }
        }
      }
      TipoServicio: {
        payload: Prisma.$TipoServicioPayload<ExtArgs>
        fields: Prisma.TipoServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoServicioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoServicioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          findFirst: {
            args: Prisma.TipoServicioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoServicioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          findMany: {
            args: Prisma.TipoServicioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>[]
          }
          create: {
            args: Prisma.TipoServicioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          createMany: {
            args: Prisma.TipoServicioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TipoServicioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          update: {
            args: Prisma.TipoServicioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          deleteMany: {
            args: Prisma.TipoServicioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TipoServicioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TipoServicioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          aggregate: {
            args: Prisma.TipoServicioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipoServicio>
          }
          groupBy: {
            args: Prisma.TipoServicioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TipoServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoServicioCountArgs<ExtArgs>,
            result: $Utils.Optional<TipoServicioCountAggregateOutputType> | number
          }
        }
      }
      Contrato: {
        payload: Prisma.$ContratoPayload<ExtArgs>
        fields: Prisma.ContratoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContratoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContratoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>
          }
          findFirst: {
            args: Prisma.ContratoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContratoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>
          }
          findMany: {
            args: Prisma.ContratoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>[]
          }
          create: {
            args: Prisma.ContratoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>
          }
          createMany: {
            args: Prisma.ContratoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContratoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>
          }
          update: {
            args: Prisma.ContratoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>
          }
          deleteMany: {
            args: Prisma.ContratoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContratoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContratoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratoPayload>
          }
          aggregate: {
            args: Prisma.ContratoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContrato>
          }
          groupBy: {
            args: Prisma.ContratoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContratoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContratoCountArgs<ExtArgs>,
            result: $Utils.Optional<ContratoCountAggregateOutputType> | number
          }
        }
      }
      Calificacion: {
        payload: Prisma.$CalificacionPayload<ExtArgs>
        fields: Prisma.CalificacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalificacionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalificacionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>
          }
          findFirst: {
            args: Prisma.CalificacionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalificacionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>
          }
          findMany: {
            args: Prisma.CalificacionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>[]
          }
          create: {
            args: Prisma.CalificacionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>
          }
          createMany: {
            args: Prisma.CalificacionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CalificacionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>
          }
          update: {
            args: Prisma.CalificacionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>
          }
          deleteMany: {
            args: Prisma.CalificacionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CalificacionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CalificacionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionPayload>
          }
          aggregate: {
            args: Prisma.CalificacionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCalificacion>
          }
          groupBy: {
            args: Prisma.CalificacionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CalificacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalificacionCountArgs<ExtArgs>,
            result: $Utils.Optional<CalificacionCountAggregateOutputType> | number
          }
        }
      }
      CalificacionProveedor: {
        payload: Prisma.$CalificacionProveedorPayload<ExtArgs>
        fields: Prisma.CalificacionProveedorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalificacionProveedorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalificacionProveedorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>
          }
          findFirst: {
            args: Prisma.CalificacionProveedorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalificacionProveedorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>
          }
          findMany: {
            args: Prisma.CalificacionProveedorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>[]
          }
          create: {
            args: Prisma.CalificacionProveedorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>
          }
          createMany: {
            args: Prisma.CalificacionProveedorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CalificacionProveedorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>
          }
          update: {
            args: Prisma.CalificacionProveedorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>
          }
          deleteMany: {
            args: Prisma.CalificacionProveedorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CalificacionProveedorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CalificacionProveedorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CalificacionProveedorPayload>
          }
          aggregate: {
            args: Prisma.CalificacionProveedorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCalificacionProveedor>
          }
          groupBy: {
            args: Prisma.CalificacionProveedorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CalificacionProveedorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalificacionProveedorCountArgs<ExtArgs>,
            result: $Utils.Optional<CalificacionProveedorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventoCountOutputType
   */

  export type EventoCountOutputType = {
    pagos: number
    reserva: number
    calificacion: number
  }

  export type EventoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pagos?: boolean | EventoCountOutputTypeCountPagosArgs
    reserva?: boolean | EventoCountOutputTypeCountReservaArgs
    calificacion?: boolean | EventoCountOutputTypeCountCalificacionArgs
  }

  // Custom InputTypes

  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventoCountOutputType
     */
    select?: EventoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountPagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoWhereInput
  }


  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountReservaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservaWhereInput
  }


  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountCalificacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalificacionWhereInput
  }



  /**
   * Count Type ServicioCountOutputType
   */

  export type ServicioCountOutputType = {
    Contratos: number
  }

  export type ServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Contratos?: boolean | ServicioCountOutputTypeCountContratosArgs
  }

  // Custom InputTypes

  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioCountOutputType
     */
    select?: ServicioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeCountContratosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoWhereInput
  }



  /**
   * Count Type ProveedorCountOutputType
   */

  export type ProveedorCountOutputType = {
    calificaciones: number
  }

  export type ProveedorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calificaciones?: boolean | ProveedorCountOutputTypeCountCalificacionesArgs
  }

  // Custom InputTypes

  /**
   * ProveedorCountOutputType without action
   */
  export type ProveedorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProveedorCountOutputType
     */
    select?: ProveedorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProveedorCountOutputType without action
   */
  export type ProveedorCountOutputTypeCountCalificacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalificacionProveedorWhereInput
  }



  /**
   * Count Type TipoEventoCountOutputType
   */

  export type TipoEventoCountOutputType = {
    eventos: number
  }

  export type TipoEventoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventos?: boolean | TipoEventoCountOutputTypeCountEventosArgs
  }

  // Custom InputTypes

  /**
   * TipoEventoCountOutputType without action
   */
  export type TipoEventoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEventoCountOutputType
     */
    select?: TipoEventoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TipoEventoCountOutputType without action
   */
  export type TipoEventoCountOutputTypeCountEventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }



  /**
   * Count Type PersonaCountOutputType
   */

  export type PersonaCountOutputType = {
    eventos: number
  }

  export type PersonaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventos?: boolean | PersonaCountOutputTypeCountEventosArgs
  }

  // Custom InputTypes

  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonaCountOutputType
     */
    select?: PersonaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PersonaCountOutputType without action
   */
  export type PersonaCountOutputTypeCountEventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }



  /**
   * Count Type MetodoPagoCountOutputType
   */

  export type MetodoPagoCountOutputType = {
    pagos: number
    asistentes: number
  }

  export type MetodoPagoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pagos?: boolean | MetodoPagoCountOutputTypeCountPagosArgs
    asistentes?: boolean | MetodoPagoCountOutputTypeCountAsistentesArgs
  }

  // Custom InputTypes

  /**
   * MetodoPagoCountOutputType without action
   */
  export type MetodoPagoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPagoCountOutputType
     */
    select?: MetodoPagoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MetodoPagoCountOutputType without action
   */
  export type MetodoPagoCountOutputTypeCountPagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoWhereInput
  }


  /**
   * MetodoPagoCountOutputType without action
   */
  export type MetodoPagoCountOutputTypeCountAsistentesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsistenteWhereInput
  }



  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    asistentes: number
    pagos: number
    proveedores: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asistentes?: boolean | ClienteCountOutputTypeCountAsistentesArgs
    pagos?: boolean | ClienteCountOutputTypeCountPagosArgs
    proveedores?: boolean | ClienteCountOutputTypeCountProveedoresArgs
  }

  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountAsistentesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsistenteWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountPagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountProveedoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProveedorWhereInput
  }



  /**
   * Count Type ReservaCountOutputType
   */

  export type ReservaCountOutputType = {
    servicios: number
  }

  export type ReservaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicios?: boolean | ReservaCountOutputTypeCountServiciosArgs
  }

  // Custom InputTypes

  /**
   * ReservaCountOutputType without action
   */
  export type ReservaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservaCountOutputType
     */
    select?: ReservaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReservaCountOutputType without action
   */
  export type ReservaCountOutputTypeCountServiciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
  }



  /**
   * Count Type TipoServicioCountOutputType
   */

  export type TipoServicioCountOutputType = {
    servicios: number
  }

  export type TipoServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicios?: boolean | TipoServicioCountOutputTypeCountServiciosArgs
  }

  // Custom InputTypes

  /**
   * TipoServicioCountOutputType without action
   */
  export type TipoServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicioCountOutputType
     */
    select?: TipoServicioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TipoServicioCountOutputType without action
   */
  export type TipoServicioCountOutputTypeCountServiciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
  }



  /**
   * Count Type ContratoCountOutputType
   */

  export type ContratoCountOutputType = {
    proveedor: number
  }

  export type ContratoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | ContratoCountOutputTypeCountProveedorArgs
  }

  // Custom InputTypes

  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoCountOutputType
     */
    select?: ContratoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountProveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProveedorWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Evento
   */

  export type AggregateEvento = {
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  export type EventoAvgAggregateOutputType = {
    id: number | null
    tipoEventoId: number | null
    responsableId: number | null
  }

  export type EventoSumAggregateOutputType = {
    id: number | null
    tipoEventoId: number | null
    responsableId: number | null
  }

  export type EventoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    fecha: Date | null
    hora: string | null
    lugar: string | null
    tipoEventoId: number | null
    responsableId: number | null
  }

  export type EventoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    fecha: Date | null
    hora: string | null
    lugar: string | null
    tipoEventoId: number | null
    responsableId: number | null
  }

  export type EventoCountAggregateOutputType = {
    id: number
    nombre: number
    fecha: number
    hora: number
    lugar: number
    tipoEventoId: number
    responsableId: number
    _all: number
  }


  export type EventoAvgAggregateInputType = {
    id?: true
    tipoEventoId?: true
    responsableId?: true
  }

  export type EventoSumAggregateInputType = {
    id?: true
    tipoEventoId?: true
    responsableId?: true
  }

  export type EventoMinAggregateInputType = {
    id?: true
    nombre?: true
    fecha?: true
    hora?: true
    lugar?: true
    tipoEventoId?: true
    responsableId?: true
  }

  export type EventoMaxAggregateInputType = {
    id?: true
    nombre?: true
    fecha?: true
    hora?: true
    lugar?: true
    tipoEventoId?: true
    responsableId?: true
  }

  export type EventoCountAggregateInputType = {
    id?: true
    nombre?: true
    fecha?: true
    hora?: true
    lugar?: true
    tipoEventoId?: true
    responsableId?: true
    _all?: true
  }

  export type EventoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evento to aggregate.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eventos
    **/
    _count?: true | EventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventoMaxAggregateInputType
  }

  export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
        [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvento[P]>
      : GetScalarType<T[P], AggregateEvento[P]>
  }




  export type EventoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithAggregationInput | EventoOrderByWithAggregationInput[]
    by: EventoScalarFieldEnum[] | EventoScalarFieldEnum
    having?: EventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventoCountAggregateInputType | true
    _avg?: EventoAvgAggregateInputType
    _sum?: EventoSumAggregateInputType
    _min?: EventoMinAggregateInputType
    _max?: EventoMaxAggregateInputType
  }

  export type EventoGroupByOutputType = {
    id: number
    nombre: string
    fecha: Date
    hora: string
    lugar: string
    tipoEventoId: number
    responsableId: number
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventoGroupByOutputType[P]>
            : GetScalarType<T[P], EventoGroupByOutputType[P]>
        }
      >
    >


  export type EventoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha?: boolean
    hora?: boolean
    lugar?: boolean
    tipoEventoId?: boolean
    responsableId?: boolean
    tipoEvento?: boolean | TipoEventoDefaultArgs<ExtArgs>
    responsable?: boolean | PersonaDefaultArgs<ExtArgs>
    pagos?: boolean | Evento$pagosArgs<ExtArgs>
    reserva?: boolean | Evento$reservaArgs<ExtArgs>
    calificacion?: boolean | Evento$calificacionArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evento"]>

  export type EventoSelectScalar = {
    id?: boolean
    nombre?: boolean
    fecha?: boolean
    hora?: boolean
    lugar?: boolean
    tipoEventoId?: boolean
    responsableId?: boolean
  }

  export type EventoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipoEvento?: boolean | TipoEventoDefaultArgs<ExtArgs>
    responsable?: boolean | PersonaDefaultArgs<ExtArgs>
    pagos?: boolean | Evento$pagosArgs<ExtArgs>
    reserva?: boolean | Evento$reservaArgs<ExtArgs>
    calificacion?: boolean | Evento$calificacionArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EventoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evento"
    objects: {
      tipoEvento: Prisma.$TipoEventoPayload<ExtArgs>
      responsable: Prisma.$PersonaPayload<ExtArgs>
      pagos: Prisma.$PagoPayload<ExtArgs>[]
      reserva: Prisma.$ReservaPayload<ExtArgs>[]
      calificacion: Prisma.$CalificacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      fecha: Date
      hora: string
      lugar: string
      tipoEventoId: number
      responsableId: number
    }, ExtArgs["result"]["evento"]>
    composites: {}
  }


  type EventoGetPayload<S extends boolean | null | undefined | EventoDefaultArgs> = $Result.GetResult<Prisma.$EventoPayload, S>

  type EventoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EventoCountAggregateInputType | true
    }

  export interface EventoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evento'], meta: { name: 'Evento' } }
    /**
     * Find zero or one Evento that matches the filter.
     * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventoFindUniqueArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Evento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Evento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Evento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Eventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eventos
     * const eventos = await prisma.evento.findMany()
     * 
     * // Get first 10 Eventos
     * const eventos = await prisma.evento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Evento.
     * @param {EventoCreateArgs} args - Arguments to create a Evento.
     * @example
     * // Create one Evento
     * const Evento = await prisma.evento.create({
     *   data: {
     *     // ... data to create a Evento
     *   }
     * })
     * 
    **/
    create<T extends EventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoCreateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Eventos.
     *     @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
     *     @example
     *     // Create many Eventos
     *     const evento = await prisma.evento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Evento.
     * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
     * @example
     * // Delete one Evento
     * const Evento = await prisma.evento.delete({
     *   where: {
     *     // ... filter to delete one Evento
     *   }
     * })
     * 
    **/
    delete<T extends EventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventoDeleteArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Evento.
     * @param {EventoUpdateArgs} args - Arguments to update one Evento.
     * @example
     * // Update one Evento
     * const evento = await prisma.evento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Eventos.
     * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
     * @example
     * // Delete a few Eventos
     * const { count } = await prisma.evento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eventos
     * const evento = await prisma.evento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evento.
     * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
     * @example
     * // Update or create a Evento
     * const evento = await prisma.evento.upsert({
     *   create: {
     *     // ... data to create a Evento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evento we want to update
     *   }
     * })
    **/
    upsert<T extends EventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpsertArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
     * @example
     * // Count the number of Eventos
     * const count = await prisma.evento.count({
     *   where: {
     *     // ... the filter for the Eventos we want to count
     *   }
     * })
    **/
    count<T extends EventoCountArgs>(
      args?: Subset<T, EventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventoAggregateArgs>(args: Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

    /**
     * Group by Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventoGroupByArgs['orderBy'] }
        : { orderBy?: EventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evento model
   */
  readonly fields: EventoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tipoEvento<T extends TipoEventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipoEventoDefaultArgs<ExtArgs>>): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    responsable<T extends PersonaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonaDefaultArgs<ExtArgs>>): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    pagos<T extends Evento$pagosArgs<ExtArgs> = {}>(args?: Subset<T, Evento$pagosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findMany'> | Null>;

    reserva<T extends Evento$reservaArgs<ExtArgs> = {}>(args?: Subset<T, Evento$reservaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findMany'> | Null>;

    calificacion<T extends Evento$calificacionArgs<ExtArgs> = {}>(args?: Subset<T, Evento$calificacionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Evento model
   */ 
  interface EventoFieldRefs {
    readonly id: FieldRef<"Evento", 'Int'>
    readonly nombre: FieldRef<"Evento", 'String'>
    readonly fecha: FieldRef<"Evento", 'DateTime'>
    readonly hora: FieldRef<"Evento", 'String'>
    readonly lugar: FieldRef<"Evento", 'String'>
    readonly tipoEventoId: FieldRef<"Evento", 'Int'>
    readonly responsableId: FieldRef<"Evento", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Evento findUnique
   */
  export type EventoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento findUniqueOrThrow
   */
  export type EventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento findFirst
   */
  export type EventoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }


  /**
   * Evento findFirstOrThrow
   */
  export type EventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }


  /**
   * Evento findMany
   */
  export type EventoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Eventos to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }


  /**
   * Evento create
   */
  export type EventoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to create a Evento.
     */
    data: XOR<EventoCreateInput, EventoUncheckedCreateInput>
  }


  /**
   * Evento createMany
   */
  export type EventoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eventos.
     */
    data: EventoCreateManyInput | EventoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Evento update
   */
  export type EventoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to update a Evento.
     */
    data: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
    /**
     * Choose, which Evento to update.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento updateMany
   */
  export type EventoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eventos.
     */
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyInput>
    /**
     * Filter which Eventos to update
     */
    where?: EventoWhereInput
  }


  /**
   * Evento upsert
   */
  export type EventoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The filter to search for the Evento to update in case it exists.
     */
    where: EventoWhereUniqueInput
    /**
     * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
     */
    create: XOR<EventoCreateInput, EventoUncheckedCreateInput>
    /**
     * In case the Evento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
  }


  /**
   * Evento delete
   */
  export type EventoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter which Evento to delete.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento deleteMany
   */
  export type EventoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eventos to delete
     */
    where?: EventoWhereInput
  }


  /**
   * Evento.pagos
   */
  export type Evento$pagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    where?: PagoWhereInput
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    cursor?: PagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoScalarFieldEnum | PagoScalarFieldEnum[]
  }


  /**
   * Evento.reserva
   */
  export type Evento$reservaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    where?: ReservaWhereInput
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    cursor?: ReservaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }


  /**
   * Evento.calificacion
   */
  export type Evento$calificacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    where?: CalificacionWhereInput
    orderBy?: CalificacionOrderByWithRelationInput | CalificacionOrderByWithRelationInput[]
    cursor?: CalificacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalificacionScalarFieldEnum | CalificacionScalarFieldEnum[]
  }


  /**
   * Evento without action
   */
  export type EventoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
  }



  /**
   * Model Asistente
   */

  export type AggregateAsistente = {
    _count: AsistenteCountAggregateOutputType | null
    _avg: AsistenteAvgAggregateOutputType | null
    _sum: AsistenteSumAggregateOutputType | null
    _min: AsistenteMinAggregateOutputType | null
    _max: AsistenteMaxAggregateOutputType | null
  }

  export type AsistenteAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    metodoPagoId: number | null
  }

  export type AsistenteSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    metodoPagoId: number | null
  }

  export type AsistenteMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    telefono: string | null
    clienteId: number | null
    metodoPagoId: number | null
  }

  export type AsistenteMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    telefono: string | null
    clienteId: number | null
    metodoPagoId: number | null
  }

  export type AsistenteCountAggregateOutputType = {
    id: number
    nombre: number
    correo: number
    telefono: number
    clienteId: number
    metodoPagoId: number
    _all: number
  }


  export type AsistenteAvgAggregateInputType = {
    id?: true
    clienteId?: true
    metodoPagoId?: true
  }

  export type AsistenteSumAggregateInputType = {
    id?: true
    clienteId?: true
    metodoPagoId?: true
  }

  export type AsistenteMinAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    telefono?: true
    clienteId?: true
    metodoPagoId?: true
  }

  export type AsistenteMaxAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    telefono?: true
    clienteId?: true
    metodoPagoId?: true
  }

  export type AsistenteCountAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    telefono?: true
    clienteId?: true
    metodoPagoId?: true
    _all?: true
  }

  export type AsistenteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asistente to aggregate.
     */
    where?: AsistenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asistentes to fetch.
     */
    orderBy?: AsistenteOrderByWithRelationInput | AsistenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AsistenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asistentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asistentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Asistentes
    **/
    _count?: true | AsistenteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AsistenteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AsistenteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AsistenteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AsistenteMaxAggregateInputType
  }

  export type GetAsistenteAggregateType<T extends AsistenteAggregateArgs> = {
        [P in keyof T & keyof AggregateAsistente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsistente[P]>
      : GetScalarType<T[P], AggregateAsistente[P]>
  }




  export type AsistenteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AsistenteWhereInput
    orderBy?: AsistenteOrderByWithAggregationInput | AsistenteOrderByWithAggregationInput[]
    by: AsistenteScalarFieldEnum[] | AsistenteScalarFieldEnum
    having?: AsistenteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AsistenteCountAggregateInputType | true
    _avg?: AsistenteAvgAggregateInputType
    _sum?: AsistenteSumAggregateInputType
    _min?: AsistenteMinAggregateInputType
    _max?: AsistenteMaxAggregateInputType
  }

  export type AsistenteGroupByOutputType = {
    id: number
    nombre: string
    correo: string
    telefono: string
    clienteId: number | null
    metodoPagoId: number | null
    _count: AsistenteCountAggregateOutputType | null
    _avg: AsistenteAvgAggregateOutputType | null
    _sum: AsistenteSumAggregateOutputType | null
    _min: AsistenteMinAggregateOutputType | null
    _max: AsistenteMaxAggregateOutputType | null
  }

  type GetAsistenteGroupByPayload<T extends AsistenteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AsistenteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AsistenteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AsistenteGroupByOutputType[P]>
            : GetScalarType<T[P], AsistenteGroupByOutputType[P]>
        }
      >
    >


  export type AsistenteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    clienteId?: boolean
    metodoPagoId?: boolean
    cliente?: boolean | Asistente$clienteArgs<ExtArgs>
    metodoPago?: boolean | Asistente$metodoPagoArgs<ExtArgs>
  }, ExtArgs["result"]["asistente"]>

  export type AsistenteSelectScalar = {
    id?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    clienteId?: boolean
    metodoPagoId?: boolean
  }

  export type AsistenteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | Asistente$clienteArgs<ExtArgs>
    metodoPago?: boolean | Asistente$metodoPagoArgs<ExtArgs>
  }


  export type $AsistentePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asistente"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      metodoPago: Prisma.$MetodoPagoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      correo: string
      telefono: string
      clienteId: number | null
      metodoPagoId: number | null
    }, ExtArgs["result"]["asistente"]>
    composites: {}
  }


  type AsistenteGetPayload<S extends boolean | null | undefined | AsistenteDefaultArgs> = $Result.GetResult<Prisma.$AsistentePayload, S>

  type AsistenteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AsistenteFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AsistenteCountAggregateInputType | true
    }

  export interface AsistenteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asistente'], meta: { name: 'Asistente' } }
    /**
     * Find zero or one Asistente that matches the filter.
     * @param {AsistenteFindUniqueArgs} args - Arguments to find a Asistente
     * @example
     * // Get one Asistente
     * const asistente = await prisma.asistente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AsistenteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AsistenteFindUniqueArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Asistente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AsistenteFindUniqueOrThrowArgs} args - Arguments to find a Asistente
     * @example
     * // Get one Asistente
     * const asistente = await prisma.asistente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AsistenteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AsistenteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Asistente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteFindFirstArgs} args - Arguments to find a Asistente
     * @example
     * // Get one Asistente
     * const asistente = await prisma.asistente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AsistenteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AsistenteFindFirstArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Asistente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteFindFirstOrThrowArgs} args - Arguments to find a Asistente
     * @example
     * // Get one Asistente
     * const asistente = await prisma.asistente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AsistenteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AsistenteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Asistentes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Asistentes
     * const asistentes = await prisma.asistente.findMany()
     * 
     * // Get first 10 Asistentes
     * const asistentes = await prisma.asistente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const asistenteWithIdOnly = await prisma.asistente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AsistenteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AsistenteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Asistente.
     * @param {AsistenteCreateArgs} args - Arguments to create a Asistente.
     * @example
     * // Create one Asistente
     * const Asistente = await prisma.asistente.create({
     *   data: {
     *     // ... data to create a Asistente
     *   }
     * })
     * 
    **/
    create<T extends AsistenteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AsistenteCreateArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Asistentes.
     *     @param {AsistenteCreateManyArgs} args - Arguments to create many Asistentes.
     *     @example
     *     // Create many Asistentes
     *     const asistente = await prisma.asistente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AsistenteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AsistenteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Asistente.
     * @param {AsistenteDeleteArgs} args - Arguments to delete one Asistente.
     * @example
     * // Delete one Asistente
     * const Asistente = await prisma.asistente.delete({
     *   where: {
     *     // ... filter to delete one Asistente
     *   }
     * })
     * 
    **/
    delete<T extends AsistenteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AsistenteDeleteArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Asistente.
     * @param {AsistenteUpdateArgs} args - Arguments to update one Asistente.
     * @example
     * // Update one Asistente
     * const asistente = await prisma.asistente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AsistenteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AsistenteUpdateArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Asistentes.
     * @param {AsistenteDeleteManyArgs} args - Arguments to filter Asistentes to delete.
     * @example
     * // Delete a few Asistentes
     * const { count } = await prisma.asistente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AsistenteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AsistenteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Asistentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Asistentes
     * const asistente = await prisma.asistente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AsistenteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AsistenteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Asistente.
     * @param {AsistenteUpsertArgs} args - Arguments to update or create a Asistente.
     * @example
     * // Update or create a Asistente
     * const asistente = await prisma.asistente.upsert({
     *   create: {
     *     // ... data to create a Asistente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asistente we want to update
     *   }
     * })
    **/
    upsert<T extends AsistenteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AsistenteUpsertArgs<ExtArgs>>
    ): Prisma__AsistenteClient<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Asistentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteCountArgs} args - Arguments to filter Asistentes to count.
     * @example
     * // Count the number of Asistentes
     * const count = await prisma.asistente.count({
     *   where: {
     *     // ... the filter for the Asistentes we want to count
     *   }
     * })
    **/
    count<T extends AsistenteCountArgs>(
      args?: Subset<T, AsistenteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AsistenteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asistente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AsistenteAggregateArgs>(args: Subset<T, AsistenteAggregateArgs>): Prisma.PrismaPromise<GetAsistenteAggregateType<T>>

    /**
     * Group by Asistente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AsistenteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AsistenteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AsistenteGroupByArgs['orderBy'] }
        : { orderBy?: AsistenteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AsistenteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAsistenteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asistente model
   */
  readonly fields: AsistenteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asistente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AsistenteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cliente<T extends Asistente$clienteArgs<ExtArgs> = {}>(args?: Subset<T, Asistente$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    metodoPago<T extends Asistente$metodoPagoArgs<ExtArgs> = {}>(args?: Subset<T, Asistente$metodoPagoArgs<ExtArgs>>): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Asistente model
   */ 
  interface AsistenteFieldRefs {
    readonly id: FieldRef<"Asistente", 'Int'>
    readonly nombre: FieldRef<"Asistente", 'String'>
    readonly correo: FieldRef<"Asistente", 'String'>
    readonly telefono: FieldRef<"Asistente", 'String'>
    readonly clienteId: FieldRef<"Asistente", 'Int'>
    readonly metodoPagoId: FieldRef<"Asistente", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Asistente findUnique
   */
  export type AsistenteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * Filter, which Asistente to fetch.
     */
    where: AsistenteWhereUniqueInput
  }


  /**
   * Asistente findUniqueOrThrow
   */
  export type AsistenteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * Filter, which Asistente to fetch.
     */
    where: AsistenteWhereUniqueInput
  }


  /**
   * Asistente findFirst
   */
  export type AsistenteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * Filter, which Asistente to fetch.
     */
    where?: AsistenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asistentes to fetch.
     */
    orderBy?: AsistenteOrderByWithRelationInput | AsistenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Asistentes.
     */
    cursor?: AsistenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asistentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asistentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Asistentes.
     */
    distinct?: AsistenteScalarFieldEnum | AsistenteScalarFieldEnum[]
  }


  /**
   * Asistente findFirstOrThrow
   */
  export type AsistenteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * Filter, which Asistente to fetch.
     */
    where?: AsistenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asistentes to fetch.
     */
    orderBy?: AsistenteOrderByWithRelationInput | AsistenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Asistentes.
     */
    cursor?: AsistenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asistentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asistentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Asistentes.
     */
    distinct?: AsistenteScalarFieldEnum | AsistenteScalarFieldEnum[]
  }


  /**
   * Asistente findMany
   */
  export type AsistenteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * Filter, which Asistentes to fetch.
     */
    where?: AsistenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Asistentes to fetch.
     */
    orderBy?: AsistenteOrderByWithRelationInput | AsistenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Asistentes.
     */
    cursor?: AsistenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Asistentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Asistentes.
     */
    skip?: number
    distinct?: AsistenteScalarFieldEnum | AsistenteScalarFieldEnum[]
  }


  /**
   * Asistente create
   */
  export type AsistenteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * The data needed to create a Asistente.
     */
    data: XOR<AsistenteCreateInput, AsistenteUncheckedCreateInput>
  }


  /**
   * Asistente createMany
   */
  export type AsistenteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Asistentes.
     */
    data: AsistenteCreateManyInput | AsistenteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Asistente update
   */
  export type AsistenteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * The data needed to update a Asistente.
     */
    data: XOR<AsistenteUpdateInput, AsistenteUncheckedUpdateInput>
    /**
     * Choose, which Asistente to update.
     */
    where: AsistenteWhereUniqueInput
  }


  /**
   * Asistente updateMany
   */
  export type AsistenteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Asistentes.
     */
    data: XOR<AsistenteUpdateManyMutationInput, AsistenteUncheckedUpdateManyInput>
    /**
     * Filter which Asistentes to update
     */
    where?: AsistenteWhereInput
  }


  /**
   * Asistente upsert
   */
  export type AsistenteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * The filter to search for the Asistente to update in case it exists.
     */
    where: AsistenteWhereUniqueInput
    /**
     * In case the Asistente found by the `where` argument doesn't exist, create a new Asistente with this data.
     */
    create: XOR<AsistenteCreateInput, AsistenteUncheckedCreateInput>
    /**
     * In case the Asistente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AsistenteUpdateInput, AsistenteUncheckedUpdateInput>
  }


  /**
   * Asistente delete
   */
  export type AsistenteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    /**
     * Filter which Asistente to delete.
     */
    where: AsistenteWhereUniqueInput
  }


  /**
   * Asistente deleteMany
   */
  export type AsistenteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asistentes to delete
     */
    where?: AsistenteWhereInput
  }


  /**
   * Asistente.cliente
   */
  export type Asistente$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }


  /**
   * Asistente.metodoPago
   */
  export type Asistente$metodoPagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    where?: MetodoPagoWhereInput
  }


  /**
   * Asistente without action
   */
  export type AsistenteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
  }



  /**
   * Model Pago
   */

  export type AggregatePago = {
    _count: PagoCountAggregateOutputType | null
    _avg: PagoAvgAggregateOutputType | null
    _sum: PagoSumAggregateOutputType | null
    _min: PagoMinAggregateOutputType | null
    _max: PagoMaxAggregateOutputType | null
  }

  export type PagoAvgAggregateOutputType = {
    id: number | null
    monto: number | null
    metodoPagoId: number | null
    eventoId: number | null
    clienteId: number | null
  }

  export type PagoSumAggregateOutputType = {
    id: number | null
    monto: number | null
    metodoPagoId: number | null
    eventoId: number | null
    clienteId: number | null
  }

  export type PagoMinAggregateOutputType = {
    id: number | null
    monto: number | null
    fechaPago: Date | null
    metodoPagoId: number | null
    eventoId: number | null
    clienteId: number | null
  }

  export type PagoMaxAggregateOutputType = {
    id: number | null
    monto: number | null
    fechaPago: Date | null
    metodoPagoId: number | null
    eventoId: number | null
    clienteId: number | null
  }

  export type PagoCountAggregateOutputType = {
    id: number
    monto: number
    fechaPago: number
    metodoPagoId: number
    eventoId: number
    clienteId: number
    _all: number
  }


  export type PagoAvgAggregateInputType = {
    id?: true
    monto?: true
    metodoPagoId?: true
    eventoId?: true
    clienteId?: true
  }

  export type PagoSumAggregateInputType = {
    id?: true
    monto?: true
    metodoPagoId?: true
    eventoId?: true
    clienteId?: true
  }

  export type PagoMinAggregateInputType = {
    id?: true
    monto?: true
    fechaPago?: true
    metodoPagoId?: true
    eventoId?: true
    clienteId?: true
  }

  export type PagoMaxAggregateInputType = {
    id?: true
    monto?: true
    fechaPago?: true
    metodoPagoId?: true
    eventoId?: true
    clienteId?: true
  }

  export type PagoCountAggregateInputType = {
    id?: true
    monto?: true
    fechaPago?: true
    metodoPagoId?: true
    eventoId?: true
    clienteId?: true
    _all?: true
  }

  export type PagoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pago to aggregate.
     */
    where?: PagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagos to fetch.
     */
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pagos
    **/
    _count?: true | PagoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagoMaxAggregateInputType
  }

  export type GetPagoAggregateType<T extends PagoAggregateArgs> = {
        [P in keyof T & keyof AggregatePago]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePago[P]>
      : GetScalarType<T[P], AggregatePago[P]>
  }




  export type PagoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoWhereInput
    orderBy?: PagoOrderByWithAggregationInput | PagoOrderByWithAggregationInput[]
    by: PagoScalarFieldEnum[] | PagoScalarFieldEnum
    having?: PagoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagoCountAggregateInputType | true
    _avg?: PagoAvgAggregateInputType
    _sum?: PagoSumAggregateInputType
    _min?: PagoMinAggregateInputType
    _max?: PagoMaxAggregateInputType
  }

  export type PagoGroupByOutputType = {
    id: number
    monto: number
    fechaPago: Date
    metodoPagoId: number
    eventoId: number
    clienteId: number
    _count: PagoCountAggregateOutputType | null
    _avg: PagoAvgAggregateOutputType | null
    _sum: PagoSumAggregateOutputType | null
    _min: PagoMinAggregateOutputType | null
    _max: PagoMaxAggregateOutputType | null
  }

  type GetPagoGroupByPayload<T extends PagoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagoGroupByOutputType[P]>
            : GetScalarType<T[P], PagoGroupByOutputType[P]>
        }
      >
    >


  export type PagoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    monto?: boolean
    fechaPago?: boolean
    metodoPagoId?: boolean
    eventoId?: boolean
    clienteId?: boolean
    metodoPago?: boolean | MetodoPagoDefaultArgs<ExtArgs>
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pago"]>

  export type PagoSelectScalar = {
    id?: boolean
    monto?: boolean
    fechaPago?: boolean
    metodoPagoId?: boolean
    eventoId?: boolean
    clienteId?: boolean
  }

  export type PagoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metodoPago?: boolean | MetodoPagoDefaultArgs<ExtArgs>
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }


  export type $PagoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pago"
    objects: {
      metodoPago: Prisma.$MetodoPagoPayload<ExtArgs>
      evento: Prisma.$EventoPayload<ExtArgs>
      cliente: Prisma.$ClientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      monto: number
      fechaPago: Date
      metodoPagoId: number
      eventoId: number
      clienteId: number
    }, ExtArgs["result"]["pago"]>
    composites: {}
  }


  type PagoGetPayload<S extends boolean | null | undefined | PagoDefaultArgs> = $Result.GetResult<Prisma.$PagoPayload, S>

  type PagoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PagoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PagoCountAggregateInputType | true
    }

  export interface PagoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pago'], meta: { name: 'Pago' } }
    /**
     * Find zero or one Pago that matches the filter.
     * @param {PagoFindUniqueArgs} args - Arguments to find a Pago
     * @example
     * // Get one Pago
     * const pago = await prisma.pago.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PagoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PagoFindUniqueArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pago that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PagoFindUniqueOrThrowArgs} args - Arguments to find a Pago
     * @example
     * // Get one Pago
     * const pago = await prisma.pago.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PagoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PagoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pago that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFindFirstArgs} args - Arguments to find a Pago
     * @example
     * // Get one Pago
     * const pago = await prisma.pago.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PagoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PagoFindFirstArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pago that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFindFirstOrThrowArgs} args - Arguments to find a Pago
     * @example
     * // Get one Pago
     * const pago = await prisma.pago.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PagoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PagoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagos
     * const pagos = await prisma.pago.findMany()
     * 
     * // Get first 10 Pagos
     * const pagos = await prisma.pago.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagoWithIdOnly = await prisma.pago.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PagoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PagoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pago.
     * @param {PagoCreateArgs} args - Arguments to create a Pago.
     * @example
     * // Create one Pago
     * const Pago = await prisma.pago.create({
     *   data: {
     *     // ... data to create a Pago
     *   }
     * })
     * 
    **/
    create<T extends PagoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PagoCreateArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pagos.
     *     @param {PagoCreateManyArgs} args - Arguments to create many Pagos.
     *     @example
     *     // Create many Pagos
     *     const pago = await prisma.pago.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PagoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PagoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pago.
     * @param {PagoDeleteArgs} args - Arguments to delete one Pago.
     * @example
     * // Delete one Pago
     * const Pago = await prisma.pago.delete({
     *   where: {
     *     // ... filter to delete one Pago
     *   }
     * })
     * 
    **/
    delete<T extends PagoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PagoDeleteArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pago.
     * @param {PagoUpdateArgs} args - Arguments to update one Pago.
     * @example
     * // Update one Pago
     * const pago = await prisma.pago.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PagoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PagoUpdateArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pagos.
     * @param {PagoDeleteManyArgs} args - Arguments to filter Pagos to delete.
     * @example
     * // Delete a few Pagos
     * const { count } = await prisma.pago.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PagoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PagoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagos
     * const pago = await prisma.pago.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PagoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PagoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pago.
     * @param {PagoUpsertArgs} args - Arguments to update or create a Pago.
     * @example
     * // Update or create a Pago
     * const pago = await prisma.pago.upsert({
     *   create: {
     *     // ... data to create a Pago
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pago we want to update
     *   }
     * })
    **/
    upsert<T extends PagoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PagoUpsertArgs<ExtArgs>>
    ): Prisma__PagoClient<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoCountArgs} args - Arguments to filter Pagos to count.
     * @example
     * // Count the number of Pagos
     * const count = await prisma.pago.count({
     *   where: {
     *     // ... the filter for the Pagos we want to count
     *   }
     * })
    **/
    count<T extends PagoCountArgs>(
      args?: Subset<T, PagoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagoAggregateArgs>(args: Subset<T, PagoAggregateArgs>): Prisma.PrismaPromise<GetPagoAggregateType<T>>

    /**
     * Group by Pago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagoGroupByArgs['orderBy'] }
        : { orderBy?: PagoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pago model
   */
  readonly fields: PagoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pago.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PagoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    metodoPago<T extends MetodoPagoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetodoPagoDefaultArgs<ExtArgs>>): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    evento<T extends EventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventoDefaultArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pago model
   */ 
  interface PagoFieldRefs {
    readonly id: FieldRef<"Pago", 'Int'>
    readonly monto: FieldRef<"Pago", 'Float'>
    readonly fechaPago: FieldRef<"Pago", 'DateTime'>
    readonly metodoPagoId: FieldRef<"Pago", 'Int'>
    readonly eventoId: FieldRef<"Pago", 'Int'>
    readonly clienteId: FieldRef<"Pago", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Pago findUnique
   */
  export type PagoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * Filter, which Pago to fetch.
     */
    where: PagoWhereUniqueInput
  }


  /**
   * Pago findUniqueOrThrow
   */
  export type PagoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * Filter, which Pago to fetch.
     */
    where: PagoWhereUniqueInput
  }


  /**
   * Pago findFirst
   */
  export type PagoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * Filter, which Pago to fetch.
     */
    where?: PagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagos to fetch.
     */
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagos.
     */
    cursor?: PagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagos.
     */
    distinct?: PagoScalarFieldEnum | PagoScalarFieldEnum[]
  }


  /**
   * Pago findFirstOrThrow
   */
  export type PagoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * Filter, which Pago to fetch.
     */
    where?: PagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagos to fetch.
     */
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagos.
     */
    cursor?: PagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagos.
     */
    distinct?: PagoScalarFieldEnum | PagoScalarFieldEnum[]
  }


  /**
   * Pago findMany
   */
  export type PagoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * Filter, which Pagos to fetch.
     */
    where?: PagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagos to fetch.
     */
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pagos.
     */
    cursor?: PagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagos.
     */
    skip?: number
    distinct?: PagoScalarFieldEnum | PagoScalarFieldEnum[]
  }


  /**
   * Pago create
   */
  export type PagoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pago.
     */
    data: XOR<PagoCreateInput, PagoUncheckedCreateInput>
  }


  /**
   * Pago createMany
   */
  export type PagoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pagos.
     */
    data: PagoCreateManyInput | PagoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pago update
   */
  export type PagoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pago.
     */
    data: XOR<PagoUpdateInput, PagoUncheckedUpdateInput>
    /**
     * Choose, which Pago to update.
     */
    where: PagoWhereUniqueInput
  }


  /**
   * Pago updateMany
   */
  export type PagoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pagos.
     */
    data: XOR<PagoUpdateManyMutationInput, PagoUncheckedUpdateManyInput>
    /**
     * Filter which Pagos to update
     */
    where?: PagoWhereInput
  }


  /**
   * Pago upsert
   */
  export type PagoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pago to update in case it exists.
     */
    where: PagoWhereUniqueInput
    /**
     * In case the Pago found by the `where` argument doesn't exist, create a new Pago with this data.
     */
    create: XOR<PagoCreateInput, PagoUncheckedCreateInput>
    /**
     * In case the Pago was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagoUpdateInput, PagoUncheckedUpdateInput>
  }


  /**
   * Pago delete
   */
  export type PagoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    /**
     * Filter which Pago to delete.
     */
    where: PagoWhereUniqueInput
  }


  /**
   * Pago deleteMany
   */
  export type PagoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagos to delete
     */
    where?: PagoWhereInput
  }


  /**
   * Pago without action
   */
  export type PagoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
  }



  /**
   * Model Servicio
   */

  export type AggregateServicio = {
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  export type ServicioAvgAggregateOutputType = {
    id: number | null
    costo: number | null
    reservaId: number | null
    tipoServicioId: number | null
  }

  export type ServicioSumAggregateOutputType = {
    id: number | null
    costo: number | null
    reservaId: number | null
    tipoServicioId: number | null
  }

  export type ServicioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    costo: number | null
    reservaId: number | null
    tipoServicioId: number | null
  }

  export type ServicioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    costo: number | null
    reservaId: number | null
    tipoServicioId: number | null
  }

  export type ServicioCountAggregateOutputType = {
    id: number
    nombre: number
    costo: number
    reservaId: number
    tipoServicioId: number
    _all: number
  }


  export type ServicioAvgAggregateInputType = {
    id?: true
    costo?: true
    reservaId?: true
    tipoServicioId?: true
  }

  export type ServicioSumAggregateInputType = {
    id?: true
    costo?: true
    reservaId?: true
    tipoServicioId?: true
  }

  export type ServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    costo?: true
    reservaId?: true
    tipoServicioId?: true
  }

  export type ServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    costo?: true
    reservaId?: true
    tipoServicioId?: true
  }

  export type ServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    costo?: true
    reservaId?: true
    tipoServicioId?: true
    _all?: true
  }

  export type ServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicio to aggregate.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicios
    **/
    _count?: true | ServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicioMaxAggregateInputType
  }

  export type GetServicioAggregateType<T extends ServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicio[P]>
      : GetScalarType<T[P], AggregateServicio[P]>
  }




  export type ServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithAggregationInput | ServicioOrderByWithAggregationInput[]
    by: ServicioScalarFieldEnum[] | ServicioScalarFieldEnum
    having?: ServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicioCountAggregateInputType | true
    _avg?: ServicioAvgAggregateInputType
    _sum?: ServicioSumAggregateInputType
    _min?: ServicioMinAggregateInputType
    _max?: ServicioMaxAggregateInputType
  }

  export type ServicioGroupByOutputType = {
    id: number
    nombre: string
    costo: number
    reservaId: number
    tipoServicioId: number
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  type GetServicioGroupByPayload<T extends ServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ServicioGroupByOutputType[P]>
        }
      >
    >


  export type ServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    costo?: boolean
    reservaId?: boolean
    tipoServicioId?: boolean
    reserva?: boolean | ReservaDefaultArgs<ExtArgs>
    tipoServicio?: boolean | TipoServicioDefaultArgs<ExtArgs>
    Contratos?: boolean | Servicio$ContratosArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    costo?: boolean
    reservaId?: boolean
    tipoServicioId?: boolean
  }

  export type ServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reserva?: boolean | ReservaDefaultArgs<ExtArgs>
    tipoServicio?: boolean | TipoServicioDefaultArgs<ExtArgs>
    Contratos?: boolean | Servicio$ContratosArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servicio"
    objects: {
      reserva: Prisma.$ReservaPayload<ExtArgs>
      tipoServicio: Prisma.$TipoServicioPayload<ExtArgs>
      Contratos: Prisma.$ContratoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      costo: number
      reservaId: number
      tipoServicioId: number
    }, ExtArgs["result"]["servicio"]>
    composites: {}
  }


  type ServicioGetPayload<S extends boolean | null | undefined | ServicioDefaultArgs> = $Result.GetResult<Prisma.$ServicioPayload, S>

  type ServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServicioFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServicioCountAggregateInputType | true
    }

  export interface ServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servicio'], meta: { name: 'Servicio' } }
    /**
     * Find zero or one Servicio that matches the filter.
     * @param {ServicioFindUniqueArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServicioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServicioFindUniqueArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Servicio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServicioFindUniqueOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServicioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Servicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServicioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicioFindFirstArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Servicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServicioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicios
     * const servicios = await prisma.servicio.findMany()
     * 
     * // Get first 10 Servicios
     * const servicios = await prisma.servicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicioWithIdOnly = await prisma.servicio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServicioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Servicio.
     * @param {ServicioCreateArgs} args - Arguments to create a Servicio.
     * @example
     * // Create one Servicio
     * const Servicio = await prisma.servicio.create({
     *   data: {
     *     // ... data to create a Servicio
     *   }
     * })
     * 
    **/
    create<T extends ServicioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicioCreateArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Servicios.
     *     @param {ServicioCreateManyArgs} args - Arguments to create many Servicios.
     *     @example
     *     // Create many Servicios
     *     const servicio = await prisma.servicio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServicioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Servicio.
     * @param {ServicioDeleteArgs} args - Arguments to delete one Servicio.
     * @example
     * // Delete one Servicio
     * const Servicio = await prisma.servicio.delete({
     *   where: {
     *     // ... filter to delete one Servicio
     *   }
     * })
     * 
    **/
    delete<T extends ServicioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServicioDeleteArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Servicio.
     * @param {ServicioUpdateArgs} args - Arguments to update one Servicio.
     * @example
     * // Update one Servicio
     * const servicio = await prisma.servicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServicioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicioUpdateArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Servicios.
     * @param {ServicioDeleteManyArgs} args - Arguments to filter Servicios to delete.
     * @example
     * // Delete a few Servicios
     * const { count } = await prisma.servicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServicioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServicioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServicioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Servicio.
     * @param {ServicioUpsertArgs} args - Arguments to update or create a Servicio.
     * @example
     * // Update or create a Servicio
     * const servicio = await prisma.servicio.upsert({
     *   create: {
     *     // ... data to create a Servicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicio we want to update
     *   }
     * })
    **/
    upsert<T extends ServicioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServicioUpsertArgs<ExtArgs>>
    ): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioCountArgs} args - Arguments to filter Servicios to count.
     * @example
     * // Count the number of Servicios
     * const count = await prisma.servicio.count({
     *   where: {
     *     // ... the filter for the Servicios we want to count
     *   }
     * })
    **/
    count<T extends ServicioCountArgs>(
      args?: Subset<T, ServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicioAggregateArgs>(args: Subset<T, ServicioAggregateArgs>): Prisma.PrismaPromise<GetServicioAggregateType<T>>

    /**
     * Group by Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicioGroupByArgs['orderBy'] }
        : { orderBy?: ServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servicio model
   */
  readonly fields: ServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    reserva<T extends ReservaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReservaDefaultArgs<ExtArgs>>): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tipoServicio<T extends TipoServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipoServicioDefaultArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Contratos<T extends Servicio$ContratosArgs<ExtArgs> = {}>(args?: Subset<T, Servicio$ContratosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Servicio model
   */ 
  interface ServicioFieldRefs {
    readonly id: FieldRef<"Servicio", 'Int'>
    readonly nombre: FieldRef<"Servicio", 'String'>
    readonly costo: FieldRef<"Servicio", 'Float'>
    readonly reservaId: FieldRef<"Servicio", 'Int'>
    readonly tipoServicioId: FieldRef<"Servicio", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Servicio findUnique
   */
  export type ServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }


  /**
   * Servicio findUniqueOrThrow
   */
  export type ServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }


  /**
   * Servicio findFirst
   */
  export type ServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }


  /**
   * Servicio findFirstOrThrow
   */
  export type ServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }


  /**
   * Servicio findMany
   */
  export type ServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicios to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }


  /**
   * Servicio create
   */
  export type ServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a Servicio.
     */
    data: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
  }


  /**
   * Servicio createMany
   */
  export type ServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Servicio update
   */
  export type ServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a Servicio.
     */
    data: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
    /**
     * Choose, which Servicio to update.
     */
    where: ServicioWhereUniqueInput
  }


  /**
   * Servicio updateMany
   */
  export type ServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
  }


  /**
   * Servicio upsert
   */
  export type ServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the Servicio to update in case it exists.
     */
    where: ServicioWhereUniqueInput
    /**
     * In case the Servicio found by the `where` argument doesn't exist, create a new Servicio with this data.
     */
    create: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
    /**
     * In case the Servicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
  }


  /**
   * Servicio delete
   */
  export type ServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter which Servicio to delete.
     */
    where: ServicioWhereUniqueInput
  }


  /**
   * Servicio deleteMany
   */
  export type ServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicios to delete
     */
    where?: ServicioWhereInput
  }


  /**
   * Servicio.Contratos
   */
  export type Servicio$ContratosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    where?: ContratoWhereInput
    orderBy?: ContratoOrderByWithRelationInput | ContratoOrderByWithRelationInput[]
    cursor?: ContratoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContratoScalarFieldEnum | ContratoScalarFieldEnum[]
  }


  /**
   * Servicio without action
   */
  export type ServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
  }



  /**
   * Model Proveedor
   */

  export type AggregateProveedor = {
    _count: ProveedorCountAggregateOutputType | null
    _avg: ProveedorAvgAggregateOutputType | null
    _sum: ProveedorSumAggregateOutputType | null
    _min: ProveedorMinAggregateOutputType | null
    _max: ProveedorMaxAggregateOutputType | null
  }

  export type ProveedorAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
    clienteId: number | null
  }

  export type ProveedorSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
    clienteId: number | null
  }

  export type ProveedorMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    contacto: string | null
    telefono: string | null
    contratoId: number | null
    clienteId: number | null
  }

  export type ProveedorMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    contacto: string | null
    telefono: string | null
    contratoId: number | null
    clienteId: number | null
  }

  export type ProveedorCountAggregateOutputType = {
    id: number
    nombre: number
    contacto: number
    telefono: number
    contratoId: number
    clienteId: number
    _all: number
  }


  export type ProveedorAvgAggregateInputType = {
    id?: true
    contratoId?: true
    clienteId?: true
  }

  export type ProveedorSumAggregateInputType = {
    id?: true
    contratoId?: true
    clienteId?: true
  }

  export type ProveedorMinAggregateInputType = {
    id?: true
    nombre?: true
    contacto?: true
    telefono?: true
    contratoId?: true
    clienteId?: true
  }

  export type ProveedorMaxAggregateInputType = {
    id?: true
    nombre?: true
    contacto?: true
    telefono?: true
    contratoId?: true
    clienteId?: true
  }

  export type ProveedorCountAggregateInputType = {
    id?: true
    nombre?: true
    contacto?: true
    telefono?: true
    contratoId?: true
    clienteId?: true
    _all?: true
  }

  export type ProveedorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proveedor to aggregate.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proveedors
    **/
    _count?: true | ProveedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProveedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProveedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProveedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProveedorMaxAggregateInputType
  }

  export type GetProveedorAggregateType<T extends ProveedorAggregateArgs> = {
        [P in keyof T & keyof AggregateProveedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProveedor[P]>
      : GetScalarType<T[P], AggregateProveedor[P]>
  }




  export type ProveedorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProveedorWhereInput
    orderBy?: ProveedorOrderByWithAggregationInput | ProveedorOrderByWithAggregationInput[]
    by: ProveedorScalarFieldEnum[] | ProveedorScalarFieldEnum
    having?: ProveedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProveedorCountAggregateInputType | true
    _avg?: ProveedorAvgAggregateInputType
    _sum?: ProveedorSumAggregateInputType
    _min?: ProveedorMinAggregateInputType
    _max?: ProveedorMaxAggregateInputType
  }

  export type ProveedorGroupByOutputType = {
    id: number
    nombre: string
    contacto: string
    telefono: string
    contratoId: number | null
    clienteId: number | null
    _count: ProveedorCountAggregateOutputType | null
    _avg: ProveedorAvgAggregateOutputType | null
    _sum: ProveedorSumAggregateOutputType | null
    _min: ProveedorMinAggregateOutputType | null
    _max: ProveedorMaxAggregateOutputType | null
  }

  type GetProveedorGroupByPayload<T extends ProveedorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProveedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProveedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProveedorGroupByOutputType[P]>
            : GetScalarType<T[P], ProveedorGroupByOutputType[P]>
        }
      >
    >


  export type ProveedorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    contacto?: boolean
    telefono?: boolean
    contratoId?: boolean
    clienteId?: boolean
    contrato?: boolean | Proveedor$contratoArgs<ExtArgs>
    cliente?: boolean | Proveedor$clienteArgs<ExtArgs>
    calificaciones?: boolean | Proveedor$calificacionesArgs<ExtArgs>
    _count?: boolean | ProveedorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proveedor"]>

  export type ProveedorSelectScalar = {
    id?: boolean
    nombre?: boolean
    contacto?: boolean
    telefono?: boolean
    contratoId?: boolean
    clienteId?: boolean
  }

  export type ProveedorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contrato?: boolean | Proveedor$contratoArgs<ExtArgs>
    cliente?: boolean | Proveedor$clienteArgs<ExtArgs>
    calificaciones?: boolean | Proveedor$calificacionesArgs<ExtArgs>
    _count?: boolean | ProveedorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProveedorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proveedor"
    objects: {
      contrato: Prisma.$ContratoPayload<ExtArgs> | null
      cliente: Prisma.$ClientePayload<ExtArgs> | null
      calificaciones: Prisma.$CalificacionProveedorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      contacto: string
      telefono: string
      contratoId: number | null
      clienteId: number | null
    }, ExtArgs["result"]["proveedor"]>
    composites: {}
  }


  type ProveedorGetPayload<S extends boolean | null | undefined | ProveedorDefaultArgs> = $Result.GetResult<Prisma.$ProveedorPayload, S>

  type ProveedorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProveedorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProveedorCountAggregateInputType | true
    }

  export interface ProveedorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proveedor'], meta: { name: 'Proveedor' } }
    /**
     * Find zero or one Proveedor that matches the filter.
     * @param {ProveedorFindUniqueArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProveedorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProveedorFindUniqueArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Proveedor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProveedorFindUniqueOrThrowArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProveedorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProveedorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Proveedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorFindFirstArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProveedorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProveedorFindFirstArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Proveedor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorFindFirstOrThrowArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProveedorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProveedorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Proveedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proveedors
     * const proveedors = await prisma.proveedor.findMany()
     * 
     * // Get first 10 Proveedors
     * const proveedors = await prisma.proveedor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proveedorWithIdOnly = await prisma.proveedor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProveedorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProveedorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Proveedor.
     * @param {ProveedorCreateArgs} args - Arguments to create a Proveedor.
     * @example
     * // Create one Proveedor
     * const Proveedor = await prisma.proveedor.create({
     *   data: {
     *     // ... data to create a Proveedor
     *   }
     * })
     * 
    **/
    create<T extends ProveedorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProveedorCreateArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Proveedors.
     *     @param {ProveedorCreateManyArgs} args - Arguments to create many Proveedors.
     *     @example
     *     // Create many Proveedors
     *     const proveedor = await prisma.proveedor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProveedorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProveedorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Proveedor.
     * @param {ProveedorDeleteArgs} args - Arguments to delete one Proveedor.
     * @example
     * // Delete one Proveedor
     * const Proveedor = await prisma.proveedor.delete({
     *   where: {
     *     // ... filter to delete one Proveedor
     *   }
     * })
     * 
    **/
    delete<T extends ProveedorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProveedorDeleteArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Proveedor.
     * @param {ProveedorUpdateArgs} args - Arguments to update one Proveedor.
     * @example
     * // Update one Proveedor
     * const proveedor = await prisma.proveedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProveedorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProveedorUpdateArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Proveedors.
     * @param {ProveedorDeleteManyArgs} args - Arguments to filter Proveedors to delete.
     * @example
     * // Delete a few Proveedors
     * const { count } = await prisma.proveedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProveedorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProveedorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proveedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proveedors
     * const proveedor = await prisma.proveedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProveedorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProveedorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proveedor.
     * @param {ProveedorUpsertArgs} args - Arguments to update or create a Proveedor.
     * @example
     * // Update or create a Proveedor
     * const proveedor = await prisma.proveedor.upsert({
     *   create: {
     *     // ... data to create a Proveedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proveedor we want to update
     *   }
     * })
    **/
    upsert<T extends ProveedorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProveedorUpsertArgs<ExtArgs>>
    ): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Proveedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorCountArgs} args - Arguments to filter Proveedors to count.
     * @example
     * // Count the number of Proveedors
     * const count = await prisma.proveedor.count({
     *   where: {
     *     // ... the filter for the Proveedors we want to count
     *   }
     * })
    **/
    count<T extends ProveedorCountArgs>(
      args?: Subset<T, ProveedorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProveedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proveedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProveedorAggregateArgs>(args: Subset<T, ProveedorAggregateArgs>): Prisma.PrismaPromise<GetProveedorAggregateType<T>>

    /**
     * Group by Proveedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProveedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProveedorGroupByArgs['orderBy'] }
        : { orderBy?: ProveedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProveedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProveedorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proveedor model
   */
  readonly fields: ProveedorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proveedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProveedorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    contrato<T extends Proveedor$contratoArgs<ExtArgs> = {}>(args?: Subset<T, Proveedor$contratoArgs<ExtArgs>>): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    cliente<T extends Proveedor$clienteArgs<ExtArgs> = {}>(args?: Subset<T, Proveedor$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    calificaciones<T extends Proveedor$calificacionesArgs<ExtArgs> = {}>(args?: Subset<T, Proveedor$calificacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Proveedor model
   */ 
  interface ProveedorFieldRefs {
    readonly id: FieldRef<"Proveedor", 'Int'>
    readonly nombre: FieldRef<"Proveedor", 'String'>
    readonly contacto: FieldRef<"Proveedor", 'String'>
    readonly telefono: FieldRef<"Proveedor", 'String'>
    readonly contratoId: FieldRef<"Proveedor", 'Int'>
    readonly clienteId: FieldRef<"Proveedor", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Proveedor findUnique
   */
  export type ProveedorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where: ProveedorWhereUniqueInput
  }


  /**
   * Proveedor findUniqueOrThrow
   */
  export type ProveedorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where: ProveedorWhereUniqueInput
  }


  /**
   * Proveedor findFirst
   */
  export type ProveedorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proveedors.
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proveedors.
     */
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }


  /**
   * Proveedor findFirstOrThrow
   */
  export type ProveedorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proveedors.
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proveedors.
     */
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }


  /**
   * Proveedor findMany
   */
  export type ProveedorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedors to fetch.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proveedors.
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }


  /**
   * Proveedor create
   */
  export type ProveedorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * The data needed to create a Proveedor.
     */
    data: XOR<ProveedorCreateInput, ProveedorUncheckedCreateInput>
  }


  /**
   * Proveedor createMany
   */
  export type ProveedorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proveedors.
     */
    data: ProveedorCreateManyInput | ProveedorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Proveedor update
   */
  export type ProveedorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * The data needed to update a Proveedor.
     */
    data: XOR<ProveedorUpdateInput, ProveedorUncheckedUpdateInput>
    /**
     * Choose, which Proveedor to update.
     */
    where: ProveedorWhereUniqueInput
  }


  /**
   * Proveedor updateMany
   */
  export type ProveedorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proveedors.
     */
    data: XOR<ProveedorUpdateManyMutationInput, ProveedorUncheckedUpdateManyInput>
    /**
     * Filter which Proveedors to update
     */
    where?: ProveedorWhereInput
  }


  /**
   * Proveedor upsert
   */
  export type ProveedorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * The filter to search for the Proveedor to update in case it exists.
     */
    where: ProveedorWhereUniqueInput
    /**
     * In case the Proveedor found by the `where` argument doesn't exist, create a new Proveedor with this data.
     */
    create: XOR<ProveedorCreateInput, ProveedorUncheckedCreateInput>
    /**
     * In case the Proveedor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProveedorUpdateInput, ProveedorUncheckedUpdateInput>
  }


  /**
   * Proveedor delete
   */
  export type ProveedorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter which Proveedor to delete.
     */
    where: ProveedorWhereUniqueInput
  }


  /**
   * Proveedor deleteMany
   */
  export type ProveedorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proveedors to delete
     */
    where?: ProveedorWhereInput
  }


  /**
   * Proveedor.contrato
   */
  export type Proveedor$contratoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    where?: ContratoWhereInput
  }


  /**
   * Proveedor.cliente
   */
  export type Proveedor$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }


  /**
   * Proveedor.calificaciones
   */
  export type Proveedor$calificacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    where?: CalificacionProveedorWhereInput
    orderBy?: CalificacionProveedorOrderByWithRelationInput | CalificacionProveedorOrderByWithRelationInput[]
    cursor?: CalificacionProveedorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalificacionProveedorScalarFieldEnum | CalificacionProveedorScalarFieldEnum[]
  }


  /**
   * Proveedor without action
   */
  export type ProveedorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
  }



  /**
   * Model TipoEvento
   */

  export type AggregateTipoEvento = {
    _count: TipoEventoCountAggregateOutputType | null
    _avg: TipoEventoAvgAggregateOutputType | null
    _sum: TipoEventoSumAggregateOutputType | null
    _min: TipoEventoMinAggregateOutputType | null
    _max: TipoEventoMaxAggregateOutputType | null
  }

  export type TipoEventoAvgAggregateOutputType = {
    id: number | null
    precioBase: number | null
    aforoMaximo: number | null
    duracion: number | null
  }

  export type TipoEventoSumAggregateOutputType = {
    id: number | null
    precioBase: number | null
    aforoMaximo: number | null
    duracion: number | null
  }

  export type TipoEventoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    precioBase: number | null
    aforoMaximo: number | null
    duracion: number | null
  }

  export type TipoEventoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    precioBase: number | null
    aforoMaximo: number | null
    duracion: number | null
  }

  export type TipoEventoCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    precioBase: number
    aforoMaximo: number
    duracion: number
    _all: number
  }


  export type TipoEventoAvgAggregateInputType = {
    id?: true
    precioBase?: true
    aforoMaximo?: true
    duracion?: true
  }

  export type TipoEventoSumAggregateInputType = {
    id?: true
    precioBase?: true
    aforoMaximo?: true
    duracion?: true
  }

  export type TipoEventoMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precioBase?: true
    aforoMaximo?: true
    duracion?: true
  }

  export type TipoEventoMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precioBase?: true
    aforoMaximo?: true
    duracion?: true
  }

  export type TipoEventoCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precioBase?: true
    aforoMaximo?: true
    duracion?: true
    _all?: true
  }

  export type TipoEventoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoEvento to aggregate.
     */
    where?: TipoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoEventos to fetch.
     */
    orderBy?: TipoEventoOrderByWithRelationInput | TipoEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoEventos
    **/
    _count?: true | TipoEventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoEventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoEventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoEventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoEventoMaxAggregateInputType
  }

  export type GetTipoEventoAggregateType<T extends TipoEventoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoEvento[P]>
      : GetScalarType<T[P], AggregateTipoEvento[P]>
  }




  export type TipoEventoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoEventoWhereInput
    orderBy?: TipoEventoOrderByWithAggregationInput | TipoEventoOrderByWithAggregationInput[]
    by: TipoEventoScalarFieldEnum[] | TipoEventoScalarFieldEnum
    having?: TipoEventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoEventoCountAggregateInputType | true
    _avg?: TipoEventoAvgAggregateInputType
    _sum?: TipoEventoSumAggregateInputType
    _min?: TipoEventoMinAggregateInputType
    _max?: TipoEventoMaxAggregateInputType
  }

  export type TipoEventoGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string
    precioBase: number
    aforoMaximo: number
    duracion: number
    _count: TipoEventoCountAggregateOutputType | null
    _avg: TipoEventoAvgAggregateOutputType | null
    _sum: TipoEventoSumAggregateOutputType | null
    _min: TipoEventoMinAggregateOutputType | null
    _max: TipoEventoMaxAggregateOutputType | null
  }

  type GetTipoEventoGroupByPayload<T extends TipoEventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoEventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoEventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoEventoGroupByOutputType[P]>
            : GetScalarType<T[P], TipoEventoGroupByOutputType[P]>
        }
      >
    >


  export type TipoEventoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precioBase?: boolean
    aforoMaximo?: boolean
    duracion?: boolean
    eventos?: boolean | TipoEvento$eventosArgs<ExtArgs>
    _count?: boolean | TipoEventoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoEvento"]>

  export type TipoEventoSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precioBase?: boolean
    aforoMaximo?: boolean
    duracion?: boolean
  }

  export type TipoEventoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventos?: boolean | TipoEvento$eventosArgs<ExtArgs>
    _count?: boolean | TipoEventoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TipoEventoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoEvento"
    objects: {
      eventos: Prisma.$EventoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string
      precioBase: number
      aforoMaximo: number
      duracion: number
    }, ExtArgs["result"]["tipoEvento"]>
    composites: {}
  }


  type TipoEventoGetPayload<S extends boolean | null | undefined | TipoEventoDefaultArgs> = $Result.GetResult<Prisma.$TipoEventoPayload, S>

  type TipoEventoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TipoEventoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TipoEventoCountAggregateInputType | true
    }

  export interface TipoEventoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoEvento'], meta: { name: 'TipoEvento' } }
    /**
     * Find zero or one TipoEvento that matches the filter.
     * @param {TipoEventoFindUniqueArgs} args - Arguments to find a TipoEvento
     * @example
     * // Get one TipoEvento
     * const tipoEvento = await prisma.tipoEvento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TipoEventoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TipoEventoFindUniqueArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TipoEvento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TipoEventoFindUniqueOrThrowArgs} args - Arguments to find a TipoEvento
     * @example
     * // Get one TipoEvento
     * const tipoEvento = await prisma.tipoEvento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TipoEventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoEventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TipoEvento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoFindFirstArgs} args - Arguments to find a TipoEvento
     * @example
     * // Get one TipoEvento
     * const tipoEvento = await prisma.tipoEvento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TipoEventoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoEventoFindFirstArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TipoEvento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoFindFirstOrThrowArgs} args - Arguments to find a TipoEvento
     * @example
     * // Get one TipoEvento
     * const tipoEvento = await prisma.tipoEvento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TipoEventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoEventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TipoEventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoEventos
     * const tipoEventos = await prisma.tipoEvento.findMany()
     * 
     * // Get first 10 TipoEventos
     * const tipoEventos = await prisma.tipoEvento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoEventoWithIdOnly = await prisma.tipoEvento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TipoEventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoEventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TipoEvento.
     * @param {TipoEventoCreateArgs} args - Arguments to create a TipoEvento.
     * @example
     * // Create one TipoEvento
     * const TipoEvento = await prisma.tipoEvento.create({
     *   data: {
     *     // ... data to create a TipoEvento
     *   }
     * })
     * 
    **/
    create<T extends TipoEventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TipoEventoCreateArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TipoEventos.
     *     @param {TipoEventoCreateManyArgs} args - Arguments to create many TipoEventos.
     *     @example
     *     // Create many TipoEventos
     *     const tipoEvento = await prisma.tipoEvento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TipoEventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoEventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TipoEvento.
     * @param {TipoEventoDeleteArgs} args - Arguments to delete one TipoEvento.
     * @example
     * // Delete one TipoEvento
     * const TipoEvento = await prisma.tipoEvento.delete({
     *   where: {
     *     // ... filter to delete one TipoEvento
     *   }
     * })
     * 
    **/
    delete<T extends TipoEventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TipoEventoDeleteArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TipoEvento.
     * @param {TipoEventoUpdateArgs} args - Arguments to update one TipoEvento.
     * @example
     * // Update one TipoEvento
     * const tipoEvento = await prisma.tipoEvento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TipoEventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TipoEventoUpdateArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TipoEventos.
     * @param {TipoEventoDeleteManyArgs} args - Arguments to filter TipoEventos to delete.
     * @example
     * // Delete a few TipoEventos
     * const { count } = await prisma.tipoEvento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TipoEventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoEventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoEventos
     * const tipoEvento = await prisma.tipoEvento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TipoEventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TipoEventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoEvento.
     * @param {TipoEventoUpsertArgs} args - Arguments to update or create a TipoEvento.
     * @example
     * // Update or create a TipoEvento
     * const tipoEvento = await prisma.tipoEvento.upsert({
     *   create: {
     *     // ... data to create a TipoEvento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoEvento we want to update
     *   }
     * })
    **/
    upsert<T extends TipoEventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TipoEventoUpsertArgs<ExtArgs>>
    ): Prisma__TipoEventoClient<$Result.GetResult<Prisma.$TipoEventoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TipoEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoCountArgs} args - Arguments to filter TipoEventos to count.
     * @example
     * // Count the number of TipoEventos
     * const count = await prisma.tipoEvento.count({
     *   where: {
     *     // ... the filter for the TipoEventos we want to count
     *   }
     * })
    **/
    count<T extends TipoEventoCountArgs>(
      args?: Subset<T, TipoEventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoEventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoEventoAggregateArgs>(args: Subset<T, TipoEventoAggregateArgs>): Prisma.PrismaPromise<GetTipoEventoAggregateType<T>>

    /**
     * Group by TipoEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoEventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoEventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoEventoGroupByArgs['orderBy'] }
        : { orderBy?: TipoEventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoEventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoEvento model
   */
  readonly fields: TipoEventoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoEvento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoEventoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    eventos<T extends TipoEvento$eventosArgs<ExtArgs> = {}>(args?: Subset<T, TipoEvento$eventosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TipoEvento model
   */ 
  interface TipoEventoFieldRefs {
    readonly id: FieldRef<"TipoEvento", 'Int'>
    readonly nombre: FieldRef<"TipoEvento", 'String'>
    readonly descripcion: FieldRef<"TipoEvento", 'String'>
    readonly precioBase: FieldRef<"TipoEvento", 'Float'>
    readonly aforoMaximo: FieldRef<"TipoEvento", 'Int'>
    readonly duracion: FieldRef<"TipoEvento", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * TipoEvento findUnique
   */
  export type TipoEventoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * Filter, which TipoEvento to fetch.
     */
    where: TipoEventoWhereUniqueInput
  }


  /**
   * TipoEvento findUniqueOrThrow
   */
  export type TipoEventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * Filter, which TipoEvento to fetch.
     */
    where: TipoEventoWhereUniqueInput
  }


  /**
   * TipoEvento findFirst
   */
  export type TipoEventoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * Filter, which TipoEvento to fetch.
     */
    where?: TipoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoEventos to fetch.
     */
    orderBy?: TipoEventoOrderByWithRelationInput | TipoEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoEventos.
     */
    cursor?: TipoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoEventos.
     */
    distinct?: TipoEventoScalarFieldEnum | TipoEventoScalarFieldEnum[]
  }


  /**
   * TipoEvento findFirstOrThrow
   */
  export type TipoEventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * Filter, which TipoEvento to fetch.
     */
    where?: TipoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoEventos to fetch.
     */
    orderBy?: TipoEventoOrderByWithRelationInput | TipoEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoEventos.
     */
    cursor?: TipoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoEventos.
     */
    distinct?: TipoEventoScalarFieldEnum | TipoEventoScalarFieldEnum[]
  }


  /**
   * TipoEvento findMany
   */
  export type TipoEventoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * Filter, which TipoEventos to fetch.
     */
    where?: TipoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoEventos to fetch.
     */
    orderBy?: TipoEventoOrderByWithRelationInput | TipoEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoEventos.
     */
    cursor?: TipoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoEventos.
     */
    skip?: number
    distinct?: TipoEventoScalarFieldEnum | TipoEventoScalarFieldEnum[]
  }


  /**
   * TipoEvento create
   */
  export type TipoEventoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoEvento.
     */
    data: XOR<TipoEventoCreateInput, TipoEventoUncheckedCreateInput>
  }


  /**
   * TipoEvento createMany
   */
  export type TipoEventoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoEventos.
     */
    data: TipoEventoCreateManyInput | TipoEventoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TipoEvento update
   */
  export type TipoEventoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoEvento.
     */
    data: XOR<TipoEventoUpdateInput, TipoEventoUncheckedUpdateInput>
    /**
     * Choose, which TipoEvento to update.
     */
    where: TipoEventoWhereUniqueInput
  }


  /**
   * TipoEvento updateMany
   */
  export type TipoEventoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoEventos.
     */
    data: XOR<TipoEventoUpdateManyMutationInput, TipoEventoUncheckedUpdateManyInput>
    /**
     * Filter which TipoEventos to update
     */
    where?: TipoEventoWhereInput
  }


  /**
   * TipoEvento upsert
   */
  export type TipoEventoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoEvento to update in case it exists.
     */
    where: TipoEventoWhereUniqueInput
    /**
     * In case the TipoEvento found by the `where` argument doesn't exist, create a new TipoEvento with this data.
     */
    create: XOR<TipoEventoCreateInput, TipoEventoUncheckedCreateInput>
    /**
     * In case the TipoEvento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoEventoUpdateInput, TipoEventoUncheckedUpdateInput>
  }


  /**
   * TipoEvento delete
   */
  export type TipoEventoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
    /**
     * Filter which TipoEvento to delete.
     */
    where: TipoEventoWhereUniqueInput
  }


  /**
   * TipoEvento deleteMany
   */
  export type TipoEventoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoEventos to delete
     */
    where?: TipoEventoWhereInput
  }


  /**
   * TipoEvento.eventos
   */
  export type TipoEvento$eventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }


  /**
   * TipoEvento without action
   */
  export type TipoEventoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoEvento
     */
    select?: TipoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoEventoInclude<ExtArgs> | null
  }



  /**
   * Model Persona
   */

  export type AggregatePersona = {
    _count: PersonaCountAggregateOutputType | null
    _avg: PersonaAvgAggregateOutputType | null
    _sum: PersonaSumAggregateOutputType | null
    _min: PersonaMinAggregateOutputType | null
    _max: PersonaMaxAggregateOutputType | null
  }

  export type PersonaAvgAggregateOutputType = {
    id: number | null
  }

  export type PersonaSumAggregateOutputType = {
    id: number | null
  }

  export type PersonaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    correo: string | null
    telefono: string | null
    direccion: string | null
    ciudad: string | null
    codigoPostal: string | null
    pais: string | null
  }

  export type PersonaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    correo: string | null
    telefono: string | null
    direccion: string | null
    ciudad: string | null
    codigoPostal: string | null
    pais: string | null
  }

  export type PersonaCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    correo: number
    telefono: number
    direccion: number
    ciudad: number
    codigoPostal: number
    pais: number
    _all: number
  }


  export type PersonaAvgAggregateInputType = {
    id?: true
  }

  export type PersonaSumAggregateInputType = {
    id?: true
  }

  export type PersonaMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    correo?: true
    telefono?: true
    direccion?: true
    ciudad?: true
    codigoPostal?: true
    pais?: true
  }

  export type PersonaMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    correo?: true
    telefono?: true
    direccion?: true
    ciudad?: true
    codigoPostal?: true
    pais?: true
  }

  export type PersonaCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    correo?: true
    telefono?: true
    direccion?: true
    ciudad?: true
    codigoPostal?: true
    pais?: true
    _all?: true
  }

  export type PersonaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Persona to aggregate.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Personas
    **/
    _count?: true | PersonaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonaMaxAggregateInputType
  }

  export type GetPersonaAggregateType<T extends PersonaAggregateArgs> = {
        [P in keyof T & keyof AggregatePersona]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersona[P]>
      : GetScalarType<T[P], AggregatePersona[P]>
  }




  export type PersonaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonaWhereInput
    orderBy?: PersonaOrderByWithAggregationInput | PersonaOrderByWithAggregationInput[]
    by: PersonaScalarFieldEnum[] | PersonaScalarFieldEnum
    having?: PersonaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonaCountAggregateInputType | true
    _avg?: PersonaAvgAggregateInputType
    _sum?: PersonaSumAggregateInputType
    _min?: PersonaMinAggregateInputType
    _max?: PersonaMaxAggregateInputType
  }

  export type PersonaGroupByOutputType = {
    id: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    _count: PersonaCountAggregateOutputType | null
    _avg: PersonaAvgAggregateOutputType | null
    _sum: PersonaSumAggregateOutputType | null
    _min: PersonaMinAggregateOutputType | null
    _max: PersonaMaxAggregateOutputType | null
  }

  type GetPersonaGroupByPayload<T extends PersonaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonaGroupByOutputType[P]>
            : GetScalarType<T[P], PersonaGroupByOutputType[P]>
        }
      >
    >


  export type PersonaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    ciudad?: boolean
    codigoPostal?: boolean
    pais?: boolean
    eventos?: boolean | Persona$eventosArgs<ExtArgs>
    _count?: boolean | PersonaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["persona"]>

  export type PersonaSelectScalar = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    ciudad?: boolean
    codigoPostal?: boolean
    pais?: boolean
  }

  export type PersonaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventos?: boolean | Persona$eventosArgs<ExtArgs>
    _count?: boolean | PersonaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PersonaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Persona"
    objects: {
      eventos: Prisma.$EventoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      apellido: string
      correo: string
      telefono: string
      direccion: string
      ciudad: string
      codigoPostal: string
      pais: string
    }, ExtArgs["result"]["persona"]>
    composites: {}
  }


  type PersonaGetPayload<S extends boolean | null | undefined | PersonaDefaultArgs> = $Result.GetResult<Prisma.$PersonaPayload, S>

  type PersonaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PersonaCountAggregateInputType | true
    }

  export interface PersonaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Persona'], meta: { name: 'Persona' } }
    /**
     * Find zero or one Persona that matches the filter.
     * @param {PersonaFindUniqueArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PersonaFindUniqueArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Persona that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PersonaFindUniqueOrThrowArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PersonaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Persona that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaFindFirstArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonaFindFirstArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Persona that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaFindFirstOrThrowArgs} args - Arguments to find a Persona
     * @example
     * // Get one Persona
     * const persona = await prisma.persona.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PersonaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Personas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personas
     * const personas = await prisma.persona.findMany()
     * 
     * // Get first 10 Personas
     * const personas = await prisma.persona.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personaWithIdOnly = await prisma.persona.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Persona.
     * @param {PersonaCreateArgs} args - Arguments to create a Persona.
     * @example
     * // Create one Persona
     * const Persona = await prisma.persona.create({
     *   data: {
     *     // ... data to create a Persona
     *   }
     * })
     * 
    **/
    create<T extends PersonaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonaCreateArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Personas.
     *     @param {PersonaCreateManyArgs} args - Arguments to create many Personas.
     *     @example
     *     // Create many Personas
     *     const persona = await prisma.persona.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Persona.
     * @param {PersonaDeleteArgs} args - Arguments to delete one Persona.
     * @example
     * // Delete one Persona
     * const Persona = await prisma.persona.delete({
     *   where: {
     *     // ... filter to delete one Persona
     *   }
     * })
     * 
    **/
    delete<T extends PersonaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PersonaDeleteArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Persona.
     * @param {PersonaUpdateArgs} args - Arguments to update one Persona.
     * @example
     * // Update one Persona
     * const persona = await prisma.persona.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonaUpdateArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Personas.
     * @param {PersonaDeleteManyArgs} args - Arguments to filter Personas to delete.
     * @example
     * // Delete a few Personas
     * const { count } = await prisma.persona.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personas
     * const persona = await prisma.persona.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PersonaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Persona.
     * @param {PersonaUpsertArgs} args - Arguments to update or create a Persona.
     * @example
     * // Update or create a Persona
     * const persona = await prisma.persona.upsert({
     *   create: {
     *     // ... data to create a Persona
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Persona we want to update
     *   }
     * })
    **/
    upsert<T extends PersonaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PersonaUpsertArgs<ExtArgs>>
    ): Prisma__PersonaClient<$Result.GetResult<Prisma.$PersonaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Personas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaCountArgs} args - Arguments to filter Personas to count.
     * @example
     * // Count the number of Personas
     * const count = await prisma.persona.count({
     *   where: {
     *     // ... the filter for the Personas we want to count
     *   }
     * })
    **/
    count<T extends PersonaCountArgs>(
      args?: Subset<T, PersonaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Persona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonaAggregateArgs>(args: Subset<T, PersonaAggregateArgs>): Prisma.PrismaPromise<GetPersonaAggregateType<T>>

    /**
     * Group by Persona.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonaGroupByArgs['orderBy'] }
        : { orderBy?: PersonaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Persona model
   */
  readonly fields: PersonaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Persona.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    eventos<T extends Persona$eventosArgs<ExtArgs> = {}>(args?: Subset<T, Persona$eventosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Persona model
   */ 
  interface PersonaFieldRefs {
    readonly id: FieldRef<"Persona", 'Int'>
    readonly nombre: FieldRef<"Persona", 'String'>
    readonly apellido: FieldRef<"Persona", 'String'>
    readonly correo: FieldRef<"Persona", 'String'>
    readonly telefono: FieldRef<"Persona", 'String'>
    readonly direccion: FieldRef<"Persona", 'String'>
    readonly ciudad: FieldRef<"Persona", 'String'>
    readonly codigoPostal: FieldRef<"Persona", 'String'>
    readonly pais: FieldRef<"Persona", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Persona findUnique
   */
  export type PersonaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where: PersonaWhereUniqueInput
  }


  /**
   * Persona findUniqueOrThrow
   */
  export type PersonaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where: PersonaWhereUniqueInput
  }


  /**
   * Persona findFirst
   */
  export type PersonaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personas.
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personas.
     */
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }


  /**
   * Persona findFirstOrThrow
   */
  export type PersonaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Persona to fetch.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personas.
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personas.
     */
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }


  /**
   * Persona findMany
   */
  export type PersonaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter, which Personas to fetch.
     */
    where?: PersonaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personas to fetch.
     */
    orderBy?: PersonaOrderByWithRelationInput | PersonaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Personas.
     */
    cursor?: PersonaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personas.
     */
    skip?: number
    distinct?: PersonaScalarFieldEnum | PersonaScalarFieldEnum[]
  }


  /**
   * Persona create
   */
  export type PersonaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * The data needed to create a Persona.
     */
    data: XOR<PersonaCreateInput, PersonaUncheckedCreateInput>
  }


  /**
   * Persona createMany
   */
  export type PersonaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Personas.
     */
    data: PersonaCreateManyInput | PersonaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Persona update
   */
  export type PersonaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * The data needed to update a Persona.
     */
    data: XOR<PersonaUpdateInput, PersonaUncheckedUpdateInput>
    /**
     * Choose, which Persona to update.
     */
    where: PersonaWhereUniqueInput
  }


  /**
   * Persona updateMany
   */
  export type PersonaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Personas.
     */
    data: XOR<PersonaUpdateManyMutationInput, PersonaUncheckedUpdateManyInput>
    /**
     * Filter which Personas to update
     */
    where?: PersonaWhereInput
  }


  /**
   * Persona upsert
   */
  export type PersonaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * The filter to search for the Persona to update in case it exists.
     */
    where: PersonaWhereUniqueInput
    /**
     * In case the Persona found by the `where` argument doesn't exist, create a new Persona with this data.
     */
    create: XOR<PersonaCreateInput, PersonaUncheckedCreateInput>
    /**
     * In case the Persona was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonaUpdateInput, PersonaUncheckedUpdateInput>
  }


  /**
   * Persona delete
   */
  export type PersonaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
    /**
     * Filter which Persona to delete.
     */
    where: PersonaWhereUniqueInput
  }


  /**
   * Persona deleteMany
   */
  export type PersonaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personas to delete
     */
    where?: PersonaWhereInput
  }


  /**
   * Persona.eventos
   */
  export type Persona$eventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }


  /**
   * Persona without action
   */
  export type PersonaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Persona
     */
    select?: PersonaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonaInclude<ExtArgs> | null
  }



  /**
   * Model MetodoPago
   */

  export type AggregateMetodoPago = {
    _count: MetodoPagoCountAggregateOutputType | null
    _avg: MetodoPagoAvgAggregateOutputType | null
    _sum: MetodoPagoSumAggregateOutputType | null
    _min: MetodoPagoMinAggregateOutputType | null
    _max: MetodoPagoMaxAggregateOutputType | null
  }

  export type MetodoPagoAvgAggregateOutputType = {
    id: number | null
  }

  export type MetodoPagoSumAggregateOutputType = {
    id: number | null
  }

  export type MetodoPagoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type MetodoPagoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type MetodoPagoCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type MetodoPagoAvgAggregateInputType = {
    id?: true
  }

  export type MetodoPagoSumAggregateInputType = {
    id?: true
  }

  export type MetodoPagoMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type MetodoPagoMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type MetodoPagoCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type MetodoPagoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetodoPago to aggregate.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: MetodoPagoOrderByWithRelationInput | MetodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetodoPagos
    **/
    _count?: true | MetodoPagoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetodoPagoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetodoPagoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetodoPagoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetodoPagoMaxAggregateInputType
  }

  export type GetMetodoPagoAggregateType<T extends MetodoPagoAggregateArgs> = {
        [P in keyof T & keyof AggregateMetodoPago]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetodoPago[P]>
      : GetScalarType<T[P], AggregateMetodoPago[P]>
  }




  export type MetodoPagoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetodoPagoWhereInput
    orderBy?: MetodoPagoOrderByWithAggregationInput | MetodoPagoOrderByWithAggregationInput[]
    by: MetodoPagoScalarFieldEnum[] | MetodoPagoScalarFieldEnum
    having?: MetodoPagoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetodoPagoCountAggregateInputType | true
    _avg?: MetodoPagoAvgAggregateInputType
    _sum?: MetodoPagoSumAggregateInputType
    _min?: MetodoPagoMinAggregateInputType
    _max?: MetodoPagoMaxAggregateInputType
  }

  export type MetodoPagoGroupByOutputType = {
    id: number
    nombre: string
    _count: MetodoPagoCountAggregateOutputType | null
    _avg: MetodoPagoAvgAggregateOutputType | null
    _sum: MetodoPagoSumAggregateOutputType | null
    _min: MetodoPagoMinAggregateOutputType | null
    _max: MetodoPagoMaxAggregateOutputType | null
  }

  type GetMetodoPagoGroupByPayload<T extends MetodoPagoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetodoPagoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetodoPagoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
            : GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
        }
      >
    >


  export type MetodoPagoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    pagos?: boolean | MetodoPago$pagosArgs<ExtArgs>
    asistentes?: boolean | MetodoPago$asistentesArgs<ExtArgs>
    _count?: boolean | MetodoPagoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metodoPago"]>

  export type MetodoPagoSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type MetodoPagoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pagos?: boolean | MetodoPago$pagosArgs<ExtArgs>
    asistentes?: boolean | MetodoPago$asistentesArgs<ExtArgs>
    _count?: boolean | MetodoPagoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MetodoPagoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetodoPago"
    objects: {
      pagos: Prisma.$PagoPayload<ExtArgs>[]
      asistentes: Prisma.$AsistentePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["metodoPago"]>
    composites: {}
  }


  type MetodoPagoGetPayload<S extends boolean | null | undefined | MetodoPagoDefaultArgs> = $Result.GetResult<Prisma.$MetodoPagoPayload, S>

  type MetodoPagoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MetodoPagoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MetodoPagoCountAggregateInputType | true
    }

  export interface MetodoPagoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetodoPago'], meta: { name: 'MetodoPago' } }
    /**
     * Find zero or one MetodoPago that matches the filter.
     * @param {MetodoPagoFindUniqueArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MetodoPagoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MetodoPagoFindUniqueArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MetodoPago that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MetodoPagoFindUniqueOrThrowArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MetodoPagoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MetodoPagoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MetodoPago that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoFindFirstArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MetodoPagoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MetodoPagoFindFirstArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MetodoPago that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoFindFirstOrThrowArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MetodoPagoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MetodoPagoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MetodoPagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetodoPagos
     * const metodoPagos = await prisma.metodoPago.findMany()
     * 
     * // Get first 10 MetodoPagos
     * const metodoPagos = await prisma.metodoPago.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metodoPagoWithIdOnly = await prisma.metodoPago.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MetodoPagoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MetodoPagoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MetodoPago.
     * @param {MetodoPagoCreateArgs} args - Arguments to create a MetodoPago.
     * @example
     * // Create one MetodoPago
     * const MetodoPago = await prisma.metodoPago.create({
     *   data: {
     *     // ... data to create a MetodoPago
     *   }
     * })
     * 
    **/
    create<T extends MetodoPagoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MetodoPagoCreateArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MetodoPagos.
     *     @param {MetodoPagoCreateManyArgs} args - Arguments to create many MetodoPagos.
     *     @example
     *     // Create many MetodoPagos
     *     const metodoPago = await prisma.metodoPago.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MetodoPagoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MetodoPagoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MetodoPago.
     * @param {MetodoPagoDeleteArgs} args - Arguments to delete one MetodoPago.
     * @example
     * // Delete one MetodoPago
     * const MetodoPago = await prisma.metodoPago.delete({
     *   where: {
     *     // ... filter to delete one MetodoPago
     *   }
     * })
     * 
    **/
    delete<T extends MetodoPagoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MetodoPagoDeleteArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MetodoPago.
     * @param {MetodoPagoUpdateArgs} args - Arguments to update one MetodoPago.
     * @example
     * // Update one MetodoPago
     * const metodoPago = await prisma.metodoPago.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MetodoPagoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MetodoPagoUpdateArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MetodoPagos.
     * @param {MetodoPagoDeleteManyArgs} args - Arguments to filter MetodoPagos to delete.
     * @example
     * // Delete a few MetodoPagos
     * const { count } = await prisma.metodoPago.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MetodoPagoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MetodoPagoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetodoPagos
     * const metodoPago = await prisma.metodoPago.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MetodoPagoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MetodoPagoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MetodoPago.
     * @param {MetodoPagoUpsertArgs} args - Arguments to update or create a MetodoPago.
     * @example
     * // Update or create a MetodoPago
     * const metodoPago = await prisma.metodoPago.upsert({
     *   create: {
     *     // ... data to create a MetodoPago
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetodoPago we want to update
     *   }
     * })
    **/
    upsert<T extends MetodoPagoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MetodoPagoUpsertArgs<ExtArgs>>
    ): Prisma__MetodoPagoClient<$Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MetodoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCountArgs} args - Arguments to filter MetodoPagos to count.
     * @example
     * // Count the number of MetodoPagos
     * const count = await prisma.metodoPago.count({
     *   where: {
     *     // ... the filter for the MetodoPagos we want to count
     *   }
     * })
    **/
    count<T extends MetodoPagoCountArgs>(
      args?: Subset<T, MetodoPagoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetodoPagoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetodoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetodoPagoAggregateArgs>(args: Subset<T, MetodoPagoAggregateArgs>): Prisma.PrismaPromise<GetMetodoPagoAggregateType<T>>

    /**
     * Group by MetodoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetodoPagoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetodoPagoGroupByArgs['orderBy'] }
        : { orderBy?: MetodoPagoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetodoPagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetodoPagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetodoPago model
   */
  readonly fields: MetodoPagoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetodoPago.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetodoPagoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pagos<T extends MetodoPago$pagosArgs<ExtArgs> = {}>(args?: Subset<T, MetodoPago$pagosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findMany'> | Null>;

    asistentes<T extends MetodoPago$asistentesArgs<ExtArgs> = {}>(args?: Subset<T, MetodoPago$asistentesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MetodoPago model
   */ 
  interface MetodoPagoFieldRefs {
    readonly id: FieldRef<"MetodoPago", 'Int'>
    readonly nombre: FieldRef<"MetodoPago", 'String'>
  }
    

  // Custom InputTypes

  /**
   * MetodoPago findUnique
   */
  export type MetodoPagoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago findUniqueOrThrow
   */
  export type MetodoPagoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago findFirst
   */
  export type MetodoPagoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: MetodoPagoOrderByWithRelationInput | MetodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagos.
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagos.
     */
    distinct?: MetodoPagoScalarFieldEnum | MetodoPagoScalarFieldEnum[]
  }


  /**
   * MetodoPago findFirstOrThrow
   */
  export type MetodoPagoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: MetodoPagoOrderByWithRelationInput | MetodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagos.
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagos.
     */
    distinct?: MetodoPagoScalarFieldEnum | MetodoPagoScalarFieldEnum[]
  }


  /**
   * MetodoPago findMany
   */
  export type MetodoPagoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * Filter, which MetodoPagos to fetch.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: MetodoPagoOrderByWithRelationInput | MetodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetodoPagos.
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    distinct?: MetodoPagoScalarFieldEnum | MetodoPagoScalarFieldEnum[]
  }


  /**
   * MetodoPago create
   */
  export type MetodoPagoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * The data needed to create a MetodoPago.
     */
    data: XOR<MetodoPagoCreateInput, MetodoPagoUncheckedCreateInput>
  }


  /**
   * MetodoPago createMany
   */
  export type MetodoPagoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetodoPagos.
     */
    data: MetodoPagoCreateManyInput | MetodoPagoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MetodoPago update
   */
  export type MetodoPagoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * The data needed to update a MetodoPago.
     */
    data: XOR<MetodoPagoUpdateInput, MetodoPagoUncheckedUpdateInput>
    /**
     * Choose, which MetodoPago to update.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago updateMany
   */
  export type MetodoPagoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetodoPagos.
     */
    data: XOR<MetodoPagoUpdateManyMutationInput, MetodoPagoUncheckedUpdateManyInput>
    /**
     * Filter which MetodoPagos to update
     */
    where?: MetodoPagoWhereInput
  }


  /**
   * MetodoPago upsert
   */
  export type MetodoPagoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * The filter to search for the MetodoPago to update in case it exists.
     */
    where: MetodoPagoWhereUniqueInput
    /**
     * In case the MetodoPago found by the `where` argument doesn't exist, create a new MetodoPago with this data.
     */
    create: XOR<MetodoPagoCreateInput, MetodoPagoUncheckedCreateInput>
    /**
     * In case the MetodoPago was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetodoPagoUpdateInput, MetodoPagoUncheckedUpdateInput>
  }


  /**
   * MetodoPago delete
   */
  export type MetodoPagoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
    /**
     * Filter which MetodoPago to delete.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago deleteMany
   */
  export type MetodoPagoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetodoPagos to delete
     */
    where?: MetodoPagoWhereInput
  }


  /**
   * MetodoPago.pagos
   */
  export type MetodoPago$pagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    where?: PagoWhereInput
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    cursor?: PagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoScalarFieldEnum | PagoScalarFieldEnum[]
  }


  /**
   * MetodoPago.asistentes
   */
  export type MetodoPago$asistentesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    where?: AsistenteWhereInput
    orderBy?: AsistenteOrderByWithRelationInput | AsistenteOrderByWithRelationInput[]
    cursor?: AsistenteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsistenteScalarFieldEnum | AsistenteScalarFieldEnum[]
  }


  /**
   * MetodoPago without action
   */
  export type MetodoPagoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude<ExtArgs> | null
  }



  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    correo: string | null
    telefono: string | null
    direccion: string | null
    ciudad: string | null
    codigoPostal: string | null
    pais: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    correo: string | null
    telefono: string | null
    direccion: string | null
    ciudad: string | null
    codigoPostal: string | null
    pais: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    correo: number
    telefono: number
    direccion: number
    ciudad: number
    codigoPostal: number
    pais: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    correo?: true
    telefono?: true
    direccion?: true
    ciudad?: true
    codigoPostal?: true
    pais?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    correo?: true
    telefono?: true
    direccion?: true
    ciudad?: true
    codigoPostal?: true
    pais?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    correo?: true
    telefono?: true
    direccion?: true
    ciudad?: true
    codigoPostal?: true
    pais?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    ciudad?: boolean
    codigoPostal?: boolean
    pais?: boolean
    asistentes?: boolean | Cliente$asistentesArgs<ExtArgs>
    pagos?: boolean | Cliente$pagosArgs<ExtArgs>
    proveedores?: boolean | Cliente$proveedoresArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    ciudad?: boolean
    codigoPostal?: boolean
    pais?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asistentes?: boolean | Cliente$asistentesArgs<ExtArgs>
    pagos?: boolean | Cliente$pagosArgs<ExtArgs>
    proveedores?: boolean | Cliente$proveedoresArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      asistentes: Prisma.$AsistentePayload<ExtArgs>[]
      pagos: Prisma.$PagoPayload<ExtArgs>[]
      proveedores: Prisma.$ProveedorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      apellido: string
      correo: string
      telefono: string
      direccion: string
      ciudad: string
      codigoPostal: string
      pais: string
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }


  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    asistentes<T extends Cliente$asistentesArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$asistentesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AsistentePayload<ExtArgs>, T, 'findMany'> | Null>;

    pagos<T extends Cliente$pagosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$pagosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoPayload<ExtArgs>, T, 'findMany'> | Null>;

    proveedores<T extends Cliente$proveedoresArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$proveedoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nombre: FieldRef<"Cliente", 'String'>
    readonly apellido: FieldRef<"Cliente", 'String'>
    readonly correo: FieldRef<"Cliente", 'String'>
    readonly telefono: FieldRef<"Cliente", 'String'>
    readonly direccion: FieldRef<"Cliente", 'String'>
    readonly ciudad: FieldRef<"Cliente", 'String'>
    readonly codigoPostal: FieldRef<"Cliente", 'String'>
    readonly pais: FieldRef<"Cliente", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente.asistentes
   */
  export type Cliente$asistentesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asistente
     */
    select?: AsistenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AsistenteInclude<ExtArgs> | null
    where?: AsistenteWhereInput
    orderBy?: AsistenteOrderByWithRelationInput | AsistenteOrderByWithRelationInput[]
    cursor?: AsistenteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AsistenteScalarFieldEnum | AsistenteScalarFieldEnum[]
  }


  /**
   * Cliente.pagos
   */
  export type Cliente$pagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pago
     */
    select?: PagoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagoInclude<ExtArgs> | null
    where?: PagoWhereInput
    orderBy?: PagoOrderByWithRelationInput | PagoOrderByWithRelationInput[]
    cursor?: PagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoScalarFieldEnum | PagoScalarFieldEnum[]
  }


  /**
   * Cliente.proveedores
   */
  export type Cliente$proveedoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    where?: ProveedorWhereInput
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    cursor?: ProveedorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }


  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
  }



  /**
   * Model Reserva
   */

  export type AggregateReserva = {
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  export type ReservaAvgAggregateOutputType = {
    id: number | null
    eventoId: number | null
    duracionReserva: number | null
  }

  export type ReservaSumAggregateOutputType = {
    id: number | null
    eventoId: number | null
    duracionReserva: number | null
  }

  export type ReservaMinAggregateOutputType = {
    id: number | null
    fechaReserva: Date | null
    horaReserva: string | null
    eventoId: number | null
    duracionReserva: number | null
  }

  export type ReservaMaxAggregateOutputType = {
    id: number | null
    fechaReserva: Date | null
    horaReserva: string | null
    eventoId: number | null
    duracionReserva: number | null
  }

  export type ReservaCountAggregateOutputType = {
    id: number
    fechaReserva: number
    horaReserva: number
    eventoId: number
    duracionReserva: number
    _all: number
  }


  export type ReservaAvgAggregateInputType = {
    id?: true
    eventoId?: true
    duracionReserva?: true
  }

  export type ReservaSumAggregateInputType = {
    id?: true
    eventoId?: true
    duracionReserva?: true
  }

  export type ReservaMinAggregateInputType = {
    id?: true
    fechaReserva?: true
    horaReserva?: true
    eventoId?: true
    duracionReserva?: true
  }

  export type ReservaMaxAggregateInputType = {
    id?: true
    fechaReserva?: true
    horaReserva?: true
    eventoId?: true
    duracionReserva?: true
  }

  export type ReservaCountAggregateInputType = {
    id?: true
    fechaReserva?: true
    horaReserva?: true
    eventoId?: true
    duracionReserva?: true
    _all?: true
  }

  export type ReservaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reserva to aggregate.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservas
    **/
    _count?: true | ReservaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservaMaxAggregateInputType
  }

  export type GetReservaAggregateType<T extends ReservaAggregateArgs> = {
        [P in keyof T & keyof AggregateReserva]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReserva[P]>
      : GetScalarType<T[P], AggregateReserva[P]>
  }




  export type ReservaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservaWhereInput
    orderBy?: ReservaOrderByWithAggregationInput | ReservaOrderByWithAggregationInput[]
    by: ReservaScalarFieldEnum[] | ReservaScalarFieldEnum
    having?: ReservaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservaCountAggregateInputType | true
    _avg?: ReservaAvgAggregateInputType
    _sum?: ReservaSumAggregateInputType
    _min?: ReservaMinAggregateInputType
    _max?: ReservaMaxAggregateInputType
  }

  export type ReservaGroupByOutputType = {
    id: number
    fechaReserva: Date
    horaReserva: string
    eventoId: number
    duracionReserva: number
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  type GetReservaGroupByPayload<T extends ReservaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservaGroupByOutputType[P]>
            : GetScalarType<T[P], ReservaGroupByOutputType[P]>
        }
      >
    >


  export type ReservaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaReserva?: boolean
    horaReserva?: boolean
    eventoId?: boolean
    duracionReserva?: boolean
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    servicios?: boolean | Reserva$serviciosArgs<ExtArgs>
    _count?: boolean | ReservaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reserva"]>

  export type ReservaSelectScalar = {
    id?: boolean
    fechaReserva?: boolean
    horaReserva?: boolean
    eventoId?: boolean
    duracionReserva?: boolean
  }

  export type ReservaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    servicios?: boolean | Reserva$serviciosArgs<ExtArgs>
    _count?: boolean | ReservaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ReservaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reserva"
    objects: {
      evento: Prisma.$EventoPayload<ExtArgs>
      servicios: Prisma.$ServicioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fechaReserva: Date
      horaReserva: string
      eventoId: number
      duracionReserva: number
    }, ExtArgs["result"]["reserva"]>
    composites: {}
  }


  type ReservaGetPayload<S extends boolean | null | undefined | ReservaDefaultArgs> = $Result.GetResult<Prisma.$ReservaPayload, S>

  type ReservaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ReservaCountAggregateInputType | true
    }

  export interface ReservaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reserva'], meta: { name: 'Reserva' } }
    /**
     * Find zero or one Reserva that matches the filter.
     * @param {ReservaFindUniqueArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaFindUniqueArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reserva that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservaFindUniqueOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reserva that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindFirstArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindFirstArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reserva that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindFirstOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reservas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservas
     * const reservas = await prisma.reserva.findMany()
     * 
     * // Get first 10 Reservas
     * const reservas = await prisma.reserva.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservaWithIdOnly = await prisma.reserva.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReservaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reserva.
     * @param {ReservaCreateArgs} args - Arguments to create a Reserva.
     * @example
     * // Create one Reserva
     * const Reserva = await prisma.reserva.create({
     *   data: {
     *     // ... data to create a Reserva
     *   }
     * })
     * 
    **/
    create<T extends ReservaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaCreateArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reservas.
     *     @param {ReservaCreateManyArgs} args - Arguments to create many Reservas.
     *     @example
     *     // Create many Reservas
     *     const reserva = await prisma.reserva.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reserva.
     * @param {ReservaDeleteArgs} args - Arguments to delete one Reserva.
     * @example
     * // Delete one Reserva
     * const Reserva = await prisma.reserva.delete({
     *   where: {
     *     // ... filter to delete one Reserva
     *   }
     * })
     * 
    **/
    delete<T extends ReservaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaDeleteArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reserva.
     * @param {ReservaUpdateArgs} args - Arguments to update one Reserva.
     * @example
     * // Update one Reserva
     * const reserva = await prisma.reserva.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaUpdateArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reservas.
     * @param {ReservaDeleteManyArgs} args - Arguments to filter Reservas to delete.
     * @example
     * // Delete a few Reservas
     * const { count } = await prisma.reserva.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservas
     * const reserva = await prisma.reserva.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reserva.
     * @param {ReservaUpsertArgs} args - Arguments to update or create a Reserva.
     * @example
     * // Update or create a Reserva
     * const reserva = await prisma.reserva.upsert({
     *   create: {
     *     // ... data to create a Reserva
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reserva we want to update
     *   }
     * })
    **/
    upsert<T extends ReservaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaUpsertArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaCountArgs} args - Arguments to filter Reservas to count.
     * @example
     * // Count the number of Reservas
     * const count = await prisma.reserva.count({
     *   where: {
     *     // ... the filter for the Reservas we want to count
     *   }
     * })
    **/
    count<T extends ReservaCountArgs>(
      args?: Subset<T, ReservaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservaAggregateArgs>(args: Subset<T, ReservaAggregateArgs>): Prisma.PrismaPromise<GetReservaAggregateType<T>>

    /**
     * Group by Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservaGroupByArgs['orderBy'] }
        : { orderBy?: ReservaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reserva model
   */
  readonly fields: ReservaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reserva.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    evento<T extends EventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventoDefaultArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    servicios<T extends Reserva$serviciosArgs<ExtArgs> = {}>(args?: Subset<T, Reserva$serviciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reserva model
   */ 
  interface ReservaFieldRefs {
    readonly id: FieldRef<"Reserva", 'Int'>
    readonly fechaReserva: FieldRef<"Reserva", 'DateTime'>
    readonly horaReserva: FieldRef<"Reserva", 'String'>
    readonly eventoId: FieldRef<"Reserva", 'Int'>
    readonly duracionReserva: FieldRef<"Reserva", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Reserva findUnique
   */
  export type ReservaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva findUniqueOrThrow
   */
  export type ReservaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva findFirst
   */
  export type ReservaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }


  /**
   * Reserva findFirstOrThrow
   */
  export type ReservaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }


  /**
   * Reserva findMany
   */
  export type ReservaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }


  /**
   * Reserva create
   */
  export type ReservaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The data needed to create a Reserva.
     */
    data: XOR<ReservaCreateInput, ReservaUncheckedCreateInput>
  }


  /**
   * Reserva createMany
   */
  export type ReservaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservas.
     */
    data: ReservaCreateManyInput | ReservaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reserva update
   */
  export type ReservaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The data needed to update a Reserva.
     */
    data: XOR<ReservaUpdateInput, ReservaUncheckedUpdateInput>
    /**
     * Choose, which Reserva to update.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva updateMany
   */
  export type ReservaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservas.
     */
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyInput>
    /**
     * Filter which Reservas to update
     */
    where?: ReservaWhereInput
  }


  /**
   * Reserva upsert
   */
  export type ReservaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The filter to search for the Reserva to update in case it exists.
     */
    where: ReservaWhereUniqueInput
    /**
     * In case the Reserva found by the `where` argument doesn't exist, create a new Reserva with this data.
     */
    create: XOR<ReservaCreateInput, ReservaUncheckedCreateInput>
    /**
     * In case the Reserva was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservaUpdateInput, ReservaUncheckedUpdateInput>
  }


  /**
   * Reserva delete
   */
  export type ReservaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter which Reserva to delete.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva deleteMany
   */
  export type ReservaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservas to delete
     */
    where?: ReservaWhereInput
  }


  /**
   * Reserva.servicios
   */
  export type Reserva$serviciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    cursor?: ServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }


  /**
   * Reserva without action
   */
  export type ReservaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude<ExtArgs> | null
  }



  /**
   * Model TipoServicio
   */

  export type AggregateTipoServicio = {
    _count: TipoServicioCountAggregateOutputType | null
    _avg: TipoServicioAvgAggregateOutputType | null
    _sum: TipoServicioSumAggregateOutputType | null
    _min: TipoServicioMinAggregateOutputType | null
    _max: TipoServicioMaxAggregateOutputType | null
  }

  export type TipoServicioAvgAggregateOutputType = {
    id: number | null
  }

  export type TipoServicioSumAggregateOutputType = {
    id: number | null
  }

  export type TipoServicioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
  }

  export type TipoServicioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
  }

  export type TipoServicioCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    _all: number
  }


  export type TipoServicioAvgAggregateInputType = {
    id?: true
  }

  export type TipoServicioSumAggregateInputType = {
    id?: true
  }

  export type TipoServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type TipoServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type TipoServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    _all?: true
  }

  export type TipoServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoServicio to aggregate.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoServicios
    **/
    _count?: true | TipoServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoServicioMaxAggregateInputType
  }

  export type GetTipoServicioAggregateType<T extends TipoServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoServicio[P]>
      : GetScalarType<T[P], AggregateTipoServicio[P]>
  }




  export type TipoServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoServicioWhereInput
    orderBy?: TipoServicioOrderByWithAggregationInput | TipoServicioOrderByWithAggregationInput[]
    by: TipoServicioScalarFieldEnum[] | TipoServicioScalarFieldEnum
    having?: TipoServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoServicioCountAggregateInputType | true
    _avg?: TipoServicioAvgAggregateInputType
    _sum?: TipoServicioSumAggregateInputType
    _min?: TipoServicioMinAggregateInputType
    _max?: TipoServicioMaxAggregateInputType
  }

  export type TipoServicioGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string
    _count: TipoServicioCountAggregateOutputType | null
    _avg: TipoServicioAvgAggregateOutputType | null
    _sum: TipoServicioSumAggregateOutputType | null
    _min: TipoServicioMinAggregateOutputType | null
    _max: TipoServicioMaxAggregateOutputType | null
  }

  type GetTipoServicioGroupByPayload<T extends TipoServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoServicioGroupByOutputType[P]>
            : GetScalarType<T[P], TipoServicioGroupByOutputType[P]>
        }
      >
    >


  export type TipoServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    servicios?: boolean | TipoServicio$serviciosArgs<ExtArgs>
    _count?: boolean | TipoServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoServicio"]>

  export type TipoServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }

  export type TipoServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicios?: boolean | TipoServicio$serviciosArgs<ExtArgs>
    _count?: boolean | TipoServicioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TipoServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoServicio"
    objects: {
      servicios: Prisma.$ServicioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string
    }, ExtArgs["result"]["tipoServicio"]>
    composites: {}
  }


  type TipoServicioGetPayload<S extends boolean | null | undefined | TipoServicioDefaultArgs> = $Result.GetResult<Prisma.$TipoServicioPayload, S>

  type TipoServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TipoServicioFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TipoServicioCountAggregateInputType | true
    }

  export interface TipoServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoServicio'], meta: { name: 'TipoServicio' } }
    /**
     * Find zero or one TipoServicio that matches the filter.
     * @param {TipoServicioFindUniqueArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TipoServicioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TipoServicioFindUniqueArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TipoServicio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TipoServicioFindUniqueOrThrowArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TipoServicioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoServicioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TipoServicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioFindFirstArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TipoServicioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoServicioFindFirstArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TipoServicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioFindFirstOrThrowArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TipoServicioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoServicioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TipoServicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoServicios
     * const tipoServicios = await prisma.tipoServicio.findMany()
     * 
     * // Get first 10 TipoServicios
     * const tipoServicios = await prisma.tipoServicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoServicioWithIdOnly = await prisma.tipoServicio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TipoServicioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoServicioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TipoServicio.
     * @param {TipoServicioCreateArgs} args - Arguments to create a TipoServicio.
     * @example
     * // Create one TipoServicio
     * const TipoServicio = await prisma.tipoServicio.create({
     *   data: {
     *     // ... data to create a TipoServicio
     *   }
     * })
     * 
    **/
    create<T extends TipoServicioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TipoServicioCreateArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TipoServicios.
     *     @param {TipoServicioCreateManyArgs} args - Arguments to create many TipoServicios.
     *     @example
     *     // Create many TipoServicios
     *     const tipoServicio = await prisma.tipoServicio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TipoServicioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoServicioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TipoServicio.
     * @param {TipoServicioDeleteArgs} args - Arguments to delete one TipoServicio.
     * @example
     * // Delete one TipoServicio
     * const TipoServicio = await prisma.tipoServicio.delete({
     *   where: {
     *     // ... filter to delete one TipoServicio
     *   }
     * })
     * 
    **/
    delete<T extends TipoServicioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TipoServicioDeleteArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TipoServicio.
     * @param {TipoServicioUpdateArgs} args - Arguments to update one TipoServicio.
     * @example
     * // Update one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TipoServicioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TipoServicioUpdateArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TipoServicios.
     * @param {TipoServicioDeleteManyArgs} args - Arguments to filter TipoServicios to delete.
     * @example
     * // Delete a few TipoServicios
     * const { count } = await prisma.tipoServicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TipoServicioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TipoServicioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoServicios
     * const tipoServicio = await prisma.tipoServicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TipoServicioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TipoServicioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoServicio.
     * @param {TipoServicioUpsertArgs} args - Arguments to update or create a TipoServicio.
     * @example
     * // Update or create a TipoServicio
     * const tipoServicio = await prisma.tipoServicio.upsert({
     *   create: {
     *     // ... data to create a TipoServicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoServicio we want to update
     *   }
     * })
    **/
    upsert<T extends TipoServicioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TipoServicioUpsertArgs<ExtArgs>>
    ): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TipoServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioCountArgs} args - Arguments to filter TipoServicios to count.
     * @example
     * // Count the number of TipoServicios
     * const count = await prisma.tipoServicio.count({
     *   where: {
     *     // ... the filter for the TipoServicios we want to count
     *   }
     * })
    **/
    count<T extends TipoServicioCountArgs>(
      args?: Subset<T, TipoServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoServicioAggregateArgs>(args: Subset<T, TipoServicioAggregateArgs>): Prisma.PrismaPromise<GetTipoServicioAggregateType<T>>

    /**
     * Group by TipoServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoServicioGroupByArgs['orderBy'] }
        : { orderBy?: TipoServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoServicio model
   */
  readonly fields: TipoServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoServicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    servicios<T extends TipoServicio$serviciosArgs<ExtArgs> = {}>(args?: Subset<T, TipoServicio$serviciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TipoServicio model
   */ 
  interface TipoServicioFieldRefs {
    readonly id: FieldRef<"TipoServicio", 'Int'>
    readonly nombre: FieldRef<"TipoServicio", 'String'>
    readonly descripcion: FieldRef<"TipoServicio", 'String'>
  }
    

  // Custom InputTypes

  /**
   * TipoServicio findUnique
   */
  export type TipoServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where: TipoServicioWhereUniqueInput
  }


  /**
   * TipoServicio findUniqueOrThrow
   */
  export type TipoServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where: TipoServicioWhereUniqueInput
  }


  /**
   * TipoServicio findFirst
   */
  export type TipoServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoServicios.
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoServicios.
     */
    distinct?: TipoServicioScalarFieldEnum | TipoServicioScalarFieldEnum[]
  }


  /**
   * TipoServicio findFirstOrThrow
   */
  export type TipoServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoServicios.
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoServicios.
     */
    distinct?: TipoServicioScalarFieldEnum | TipoServicioScalarFieldEnum[]
  }


  /**
   * TipoServicio findMany
   */
  export type TipoServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicios to fetch.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoServicios.
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    distinct?: TipoServicioScalarFieldEnum | TipoServicioScalarFieldEnum[]
  }


  /**
   * TipoServicio create
   */
  export type TipoServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoServicio.
     */
    data: XOR<TipoServicioCreateInput, TipoServicioUncheckedCreateInput>
  }


  /**
   * TipoServicio createMany
   */
  export type TipoServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoServicios.
     */
    data: TipoServicioCreateManyInput | TipoServicioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TipoServicio update
   */
  export type TipoServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoServicio.
     */
    data: XOR<TipoServicioUpdateInput, TipoServicioUncheckedUpdateInput>
    /**
     * Choose, which TipoServicio to update.
     */
    where: TipoServicioWhereUniqueInput
  }


  /**
   * TipoServicio updateMany
   */
  export type TipoServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoServicios.
     */
    data: XOR<TipoServicioUpdateManyMutationInput, TipoServicioUncheckedUpdateManyInput>
    /**
     * Filter which TipoServicios to update
     */
    where?: TipoServicioWhereInput
  }


  /**
   * TipoServicio upsert
   */
  export type TipoServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoServicio to update in case it exists.
     */
    where: TipoServicioWhereUniqueInput
    /**
     * In case the TipoServicio found by the `where` argument doesn't exist, create a new TipoServicio with this data.
     */
    create: XOR<TipoServicioCreateInput, TipoServicioUncheckedCreateInput>
    /**
     * In case the TipoServicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoServicioUpdateInput, TipoServicioUncheckedUpdateInput>
  }


  /**
   * TipoServicio delete
   */
  export type TipoServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter which TipoServicio to delete.
     */
    where: TipoServicioWhereUniqueInput
  }


  /**
   * TipoServicio deleteMany
   */
  export type TipoServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoServicios to delete
     */
    where?: TipoServicioWhereInput
  }


  /**
   * TipoServicio.servicios
   */
  export type TipoServicio$serviciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicioInclude<ExtArgs> | null
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    cursor?: ServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }


  /**
   * TipoServicio without action
   */
  export type TipoServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoServicioInclude<ExtArgs> | null
  }



  /**
   * Model Contrato
   */

  export type AggregateContrato = {
    _count: ContratoCountAggregateOutputType | null
    _avg: ContratoAvgAggregateOutputType | null
    _sum: ContratoSumAggregateOutputType | null
    _min: ContratoMinAggregateOutputType | null
    _max: ContratoMaxAggregateOutputType | null
  }

  export type ContratoAvgAggregateOutputType = {
    id: number | null
    servicioId: number | null
    costoTotal: number | null
  }

  export type ContratoSumAggregateOutputType = {
    id: number | null
    servicioId: number | null
    costoTotal: number | null
  }

  export type ContratoMinAggregateOutputType = {
    id: number | null
    fechaInicio: Date | null
    fechaFinalizacion: Date | null
    servicioId: number | null
    tipoContrato: string | null
    costoTotal: number | null
  }

  export type ContratoMaxAggregateOutputType = {
    id: number | null
    fechaInicio: Date | null
    fechaFinalizacion: Date | null
    servicioId: number | null
    tipoContrato: string | null
    costoTotal: number | null
  }

  export type ContratoCountAggregateOutputType = {
    id: number
    fechaInicio: number
    fechaFinalizacion: number
    servicioId: number
    tipoContrato: number
    costoTotal: number
    _all: number
  }


  export type ContratoAvgAggregateInputType = {
    id?: true
    servicioId?: true
    costoTotal?: true
  }

  export type ContratoSumAggregateInputType = {
    id?: true
    servicioId?: true
    costoTotal?: true
  }

  export type ContratoMinAggregateInputType = {
    id?: true
    fechaInicio?: true
    fechaFinalizacion?: true
    servicioId?: true
    tipoContrato?: true
    costoTotal?: true
  }

  export type ContratoMaxAggregateInputType = {
    id?: true
    fechaInicio?: true
    fechaFinalizacion?: true
    servicioId?: true
    tipoContrato?: true
    costoTotal?: true
  }

  export type ContratoCountAggregateInputType = {
    id?: true
    fechaInicio?: true
    fechaFinalizacion?: true
    servicioId?: true
    tipoContrato?: true
    costoTotal?: true
    _all?: true
  }

  export type ContratoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contrato to aggregate.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: ContratoOrderByWithRelationInput | ContratoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contratoes
    **/
    _count?: true | ContratoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContratoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContratoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContratoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContratoMaxAggregateInputType
  }

  export type GetContratoAggregateType<T extends ContratoAggregateArgs> = {
        [P in keyof T & keyof AggregateContrato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContrato[P]>
      : GetScalarType<T[P], AggregateContrato[P]>
  }




  export type ContratoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoWhereInput
    orderBy?: ContratoOrderByWithAggregationInput | ContratoOrderByWithAggregationInput[]
    by: ContratoScalarFieldEnum[] | ContratoScalarFieldEnum
    having?: ContratoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContratoCountAggregateInputType | true
    _avg?: ContratoAvgAggregateInputType
    _sum?: ContratoSumAggregateInputType
    _min?: ContratoMinAggregateInputType
    _max?: ContratoMaxAggregateInputType
  }

  export type ContratoGroupByOutputType = {
    id: number
    fechaInicio: Date
    fechaFinalizacion: Date
    servicioId: number
    tipoContrato: string
    costoTotal: number
    _count: ContratoCountAggregateOutputType | null
    _avg: ContratoAvgAggregateOutputType | null
    _sum: ContratoSumAggregateOutputType | null
    _min: ContratoMinAggregateOutputType | null
    _max: ContratoMaxAggregateOutputType | null
  }

  type GetContratoGroupByPayload<T extends ContratoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContratoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContratoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContratoGroupByOutputType[P]>
            : GetScalarType<T[P], ContratoGroupByOutputType[P]>
        }
      >
    >


  export type ContratoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaInicio?: boolean
    fechaFinalizacion?: boolean
    servicioId?: boolean
    tipoContrato?: boolean
    costoTotal?: boolean
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
    proveedor?: boolean | Contrato$proveedorArgs<ExtArgs>
    _count?: boolean | ContratoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contrato"]>

  export type ContratoSelectScalar = {
    id?: boolean
    fechaInicio?: boolean
    fechaFinalizacion?: boolean
    servicioId?: boolean
    tipoContrato?: boolean
    costoTotal?: boolean
  }

  export type ContratoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
    proveedor?: boolean | Contrato$proveedorArgs<ExtArgs>
    _count?: boolean | ContratoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ContratoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contrato"
    objects: {
      servicio: Prisma.$ServicioPayload<ExtArgs>
      proveedor: Prisma.$ProveedorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fechaInicio: Date
      fechaFinalizacion: Date
      servicioId: number
      tipoContrato: string
      costoTotal: number
    }, ExtArgs["result"]["contrato"]>
    composites: {}
  }


  type ContratoGetPayload<S extends boolean | null | undefined | ContratoDefaultArgs> = $Result.GetResult<Prisma.$ContratoPayload, S>

  type ContratoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContratoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ContratoCountAggregateInputType | true
    }

  export interface ContratoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contrato'], meta: { name: 'Contrato' } }
    /**
     * Find zero or one Contrato that matches the filter.
     * @param {ContratoFindUniqueArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContratoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoFindUniqueArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contrato that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContratoFindUniqueOrThrowArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContratoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contrato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoFindFirstArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContratoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindFirstArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contrato that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoFindFirstOrThrowArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContratoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contratoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contratoes
     * const contratoes = await prisma.contrato.findMany()
     * 
     * // Get first 10 Contratoes
     * const contratoes = await prisma.contrato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contratoWithIdOnly = await prisma.contrato.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContratoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contrato.
     * @param {ContratoCreateArgs} args - Arguments to create a Contrato.
     * @example
     * // Create one Contrato
     * const Contrato = await prisma.contrato.create({
     *   data: {
     *     // ... data to create a Contrato
     *   }
     * })
     * 
    **/
    create<T extends ContratoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoCreateArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contratoes.
     *     @param {ContratoCreateManyArgs} args - Arguments to create many Contratoes.
     *     @example
     *     // Create many Contratoes
     *     const contrato = await prisma.contrato.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContratoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contrato.
     * @param {ContratoDeleteArgs} args - Arguments to delete one Contrato.
     * @example
     * // Delete one Contrato
     * const Contrato = await prisma.contrato.delete({
     *   where: {
     *     // ... filter to delete one Contrato
     *   }
     * })
     * 
    **/
    delete<T extends ContratoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoDeleteArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contrato.
     * @param {ContratoUpdateArgs} args - Arguments to update one Contrato.
     * @example
     * // Update one Contrato
     * const contrato = await prisma.contrato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContratoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoUpdateArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contratoes.
     * @param {ContratoDeleteManyArgs} args - Arguments to filter Contratoes to delete.
     * @example
     * // Delete a few Contratoes
     * const { count } = await prisma.contrato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContratoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contratoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contratoes
     * const contrato = await prisma.contrato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContratoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contrato.
     * @param {ContratoUpsertArgs} args - Arguments to update or create a Contrato.
     * @example
     * // Update or create a Contrato
     * const contrato = await prisma.contrato.upsert({
     *   create: {
     *     // ... data to create a Contrato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contrato we want to update
     *   }
     * })
    **/
    upsert<T extends ContratoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoUpsertArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Result.GetResult<Prisma.$ContratoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contratoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoCountArgs} args - Arguments to filter Contratoes to count.
     * @example
     * // Count the number of Contratoes
     * const count = await prisma.contrato.count({
     *   where: {
     *     // ... the filter for the Contratoes we want to count
     *   }
     * })
    **/
    count<T extends ContratoCountArgs>(
      args?: Subset<T, ContratoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContratoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contrato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContratoAggregateArgs>(args: Subset<T, ContratoAggregateArgs>): Prisma.PrismaPromise<GetContratoAggregateType<T>>

    /**
     * Group by Contrato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContratoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContratoGroupByArgs['orderBy'] }
        : { orderBy?: ContratoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContratoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContratoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contrato model
   */
  readonly fields: ContratoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contrato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContratoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    servicio<T extends ServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicioDefaultArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    proveedor<T extends Contrato$proveedorArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$proveedorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Contrato model
   */ 
  interface ContratoFieldRefs {
    readonly id: FieldRef<"Contrato", 'Int'>
    readonly fechaInicio: FieldRef<"Contrato", 'DateTime'>
    readonly fechaFinalizacion: FieldRef<"Contrato", 'DateTime'>
    readonly servicioId: FieldRef<"Contrato", 'Int'>
    readonly tipoContrato: FieldRef<"Contrato", 'String'>
    readonly costoTotal: FieldRef<"Contrato", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Contrato findUnique
   */
  export type ContratoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato findUniqueOrThrow
   */
  export type ContratoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato findFirst
   */
  export type ContratoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: ContratoOrderByWithRelationInput | ContratoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contratoes.
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contratoes.
     */
    distinct?: ContratoScalarFieldEnum | ContratoScalarFieldEnum[]
  }


  /**
   * Contrato findFirstOrThrow
   */
  export type ContratoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: ContratoOrderByWithRelationInput | ContratoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contratoes.
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contratoes.
     */
    distinct?: ContratoScalarFieldEnum | ContratoScalarFieldEnum[]
  }


  /**
   * Contrato findMany
   */
  export type ContratoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contratoes to fetch.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: ContratoOrderByWithRelationInput | ContratoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contratoes.
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    distinct?: ContratoScalarFieldEnum | ContratoScalarFieldEnum[]
  }


  /**
   * Contrato create
   */
  export type ContratoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * The data needed to create a Contrato.
     */
    data: XOR<ContratoCreateInput, ContratoUncheckedCreateInput>
  }


  /**
   * Contrato createMany
   */
  export type ContratoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contratoes.
     */
    data: ContratoCreateManyInput | ContratoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Contrato update
   */
  export type ContratoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * The data needed to update a Contrato.
     */
    data: XOR<ContratoUpdateInput, ContratoUncheckedUpdateInput>
    /**
     * Choose, which Contrato to update.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato updateMany
   */
  export type ContratoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contratoes.
     */
    data: XOR<ContratoUpdateManyMutationInput, ContratoUncheckedUpdateManyInput>
    /**
     * Filter which Contratoes to update
     */
    where?: ContratoWhereInput
  }


  /**
   * Contrato upsert
   */
  export type ContratoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * The filter to search for the Contrato to update in case it exists.
     */
    where: ContratoWhereUniqueInput
    /**
     * In case the Contrato found by the `where` argument doesn't exist, create a new Contrato with this data.
     */
    create: XOR<ContratoCreateInput, ContratoUncheckedCreateInput>
    /**
     * In case the Contrato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContratoUpdateInput, ContratoUncheckedUpdateInput>
  }


  /**
   * Contrato delete
   */
  export type ContratoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter which Contrato to delete.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato deleteMany
   */
  export type ContratoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contratoes to delete
     */
    where?: ContratoWhereInput
  }


  /**
   * Contrato.proveedor
   */
  export type Contrato$proveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProveedorInclude<ExtArgs> | null
    where?: ProveedorWhereInput
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    cursor?: ProveedorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }


  /**
   * Contrato without action
   */
  export type ContratoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
  }



  /**
   * Model Calificacion
   */

  export type AggregateCalificacion = {
    _count: CalificacionCountAggregateOutputType | null
    _avg: CalificacionAvgAggregateOutputType | null
    _sum: CalificacionSumAggregateOutputType | null
    _min: CalificacionMinAggregateOutputType | null
    _max: CalificacionMaxAggregateOutputType | null
  }

  export type CalificacionAvgAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    eventoId: number | null
  }

  export type CalificacionSumAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    eventoId: number | null
  }

  export type CalificacionMinAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    comentarios: string | null
    eventoId: number | null
    fechaCalificacion: Date | null
  }

  export type CalificacionMaxAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    comentarios: string | null
    eventoId: number | null
    fechaCalificacion: Date | null
  }

  export type CalificacionCountAggregateOutputType = {
    id: number
    puntuacion: number
    comentarios: number
    eventoId: number
    fechaCalificacion: number
    _all: number
  }


  export type CalificacionAvgAggregateInputType = {
    id?: true
    puntuacion?: true
    eventoId?: true
  }

  export type CalificacionSumAggregateInputType = {
    id?: true
    puntuacion?: true
    eventoId?: true
  }

  export type CalificacionMinAggregateInputType = {
    id?: true
    puntuacion?: true
    comentarios?: true
    eventoId?: true
    fechaCalificacion?: true
  }

  export type CalificacionMaxAggregateInputType = {
    id?: true
    puntuacion?: true
    comentarios?: true
    eventoId?: true
    fechaCalificacion?: true
  }

  export type CalificacionCountAggregateInputType = {
    id?: true
    puntuacion?: true
    comentarios?: true
    eventoId?: true
    fechaCalificacion?: true
    _all?: true
  }

  export type CalificacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Calificacion to aggregate.
     */
    where?: CalificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calificacions to fetch.
     */
    orderBy?: CalificacionOrderByWithRelationInput | CalificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Calificacions
    **/
    _count?: true | CalificacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalificacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalificacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalificacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalificacionMaxAggregateInputType
  }

  export type GetCalificacionAggregateType<T extends CalificacionAggregateArgs> = {
        [P in keyof T & keyof AggregateCalificacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalificacion[P]>
      : GetScalarType<T[P], AggregateCalificacion[P]>
  }




  export type CalificacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalificacionWhereInput
    orderBy?: CalificacionOrderByWithAggregationInput | CalificacionOrderByWithAggregationInput[]
    by: CalificacionScalarFieldEnum[] | CalificacionScalarFieldEnum
    having?: CalificacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalificacionCountAggregateInputType | true
    _avg?: CalificacionAvgAggregateInputType
    _sum?: CalificacionSumAggregateInputType
    _min?: CalificacionMinAggregateInputType
    _max?: CalificacionMaxAggregateInputType
  }

  export type CalificacionGroupByOutputType = {
    id: number
    puntuacion: number
    comentarios: string
    eventoId: number
    fechaCalificacion: Date
    _count: CalificacionCountAggregateOutputType | null
    _avg: CalificacionAvgAggregateOutputType | null
    _sum: CalificacionSumAggregateOutputType | null
    _min: CalificacionMinAggregateOutputType | null
    _max: CalificacionMaxAggregateOutputType | null
  }

  type GetCalificacionGroupByPayload<T extends CalificacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalificacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalificacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalificacionGroupByOutputType[P]>
            : GetScalarType<T[P], CalificacionGroupByOutputType[P]>
        }
      >
    >


  export type CalificacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    puntuacion?: boolean
    comentarios?: boolean
    eventoId?: boolean
    fechaCalificacion?: boolean
    evento?: boolean | EventoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calificacion"]>

  export type CalificacionSelectScalar = {
    id?: boolean
    puntuacion?: boolean
    comentarios?: boolean
    eventoId?: boolean
    fechaCalificacion?: boolean
  }

  export type CalificacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    evento?: boolean | EventoDefaultArgs<ExtArgs>
  }


  export type $CalificacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Calificacion"
    objects: {
      evento: Prisma.$EventoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      puntuacion: number
      comentarios: string
      eventoId: number
      fechaCalificacion: Date
    }, ExtArgs["result"]["calificacion"]>
    composites: {}
  }


  type CalificacionGetPayload<S extends boolean | null | undefined | CalificacionDefaultArgs> = $Result.GetResult<Prisma.$CalificacionPayload, S>

  type CalificacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CalificacionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CalificacionCountAggregateInputType | true
    }

  export interface CalificacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Calificacion'], meta: { name: 'Calificacion' } }
    /**
     * Find zero or one Calificacion that matches the filter.
     * @param {CalificacionFindUniqueArgs} args - Arguments to find a Calificacion
     * @example
     * // Get one Calificacion
     * const calificacion = await prisma.calificacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CalificacionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionFindUniqueArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Calificacion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CalificacionFindUniqueOrThrowArgs} args - Arguments to find a Calificacion
     * @example
     * // Get one Calificacion
     * const calificacion = await prisma.calificacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CalificacionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Calificacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionFindFirstArgs} args - Arguments to find a Calificacion
     * @example
     * // Get one Calificacion
     * const calificacion = await prisma.calificacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CalificacionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionFindFirstArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Calificacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionFindFirstOrThrowArgs} args - Arguments to find a Calificacion
     * @example
     * // Get one Calificacion
     * const calificacion = await prisma.calificacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CalificacionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Calificacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Calificacions
     * const calificacions = await prisma.calificacion.findMany()
     * 
     * // Get first 10 Calificacions
     * const calificacions = await prisma.calificacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calificacionWithIdOnly = await prisma.calificacion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CalificacionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Calificacion.
     * @param {CalificacionCreateArgs} args - Arguments to create a Calificacion.
     * @example
     * // Create one Calificacion
     * const Calificacion = await prisma.calificacion.create({
     *   data: {
     *     // ... data to create a Calificacion
     *   }
     * })
     * 
    **/
    create<T extends CalificacionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionCreateArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Calificacions.
     *     @param {CalificacionCreateManyArgs} args - Arguments to create many Calificacions.
     *     @example
     *     // Create many Calificacions
     *     const calificacion = await prisma.calificacion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CalificacionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Calificacion.
     * @param {CalificacionDeleteArgs} args - Arguments to delete one Calificacion.
     * @example
     * // Delete one Calificacion
     * const Calificacion = await prisma.calificacion.delete({
     *   where: {
     *     // ... filter to delete one Calificacion
     *   }
     * })
     * 
    **/
    delete<T extends CalificacionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionDeleteArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Calificacion.
     * @param {CalificacionUpdateArgs} args - Arguments to update one Calificacion.
     * @example
     * // Update one Calificacion
     * const calificacion = await prisma.calificacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CalificacionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionUpdateArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Calificacions.
     * @param {CalificacionDeleteManyArgs} args - Arguments to filter Calificacions to delete.
     * @example
     * // Delete a few Calificacions
     * const { count } = await prisma.calificacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CalificacionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Calificacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Calificacions
     * const calificacion = await prisma.calificacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CalificacionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Calificacion.
     * @param {CalificacionUpsertArgs} args - Arguments to update or create a Calificacion.
     * @example
     * // Update or create a Calificacion
     * const calificacion = await prisma.calificacion.upsert({
     *   create: {
     *     // ... data to create a Calificacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Calificacion we want to update
     *   }
     * })
    **/
    upsert<T extends CalificacionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionUpsertArgs<ExtArgs>>
    ): Prisma__CalificacionClient<$Result.GetResult<Prisma.$CalificacionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Calificacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionCountArgs} args - Arguments to filter Calificacions to count.
     * @example
     * // Count the number of Calificacions
     * const count = await prisma.calificacion.count({
     *   where: {
     *     // ... the filter for the Calificacions we want to count
     *   }
     * })
    **/
    count<T extends CalificacionCountArgs>(
      args?: Subset<T, CalificacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalificacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Calificacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalificacionAggregateArgs>(args: Subset<T, CalificacionAggregateArgs>): Prisma.PrismaPromise<GetCalificacionAggregateType<T>>

    /**
     * Group by Calificacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalificacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalificacionGroupByArgs['orderBy'] }
        : { orderBy?: CalificacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalificacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalificacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Calificacion model
   */
  readonly fields: CalificacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Calificacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalificacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    evento<T extends EventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventoDefaultArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Calificacion model
   */ 
  interface CalificacionFieldRefs {
    readonly id: FieldRef<"Calificacion", 'Int'>
    readonly puntuacion: FieldRef<"Calificacion", 'Int'>
    readonly comentarios: FieldRef<"Calificacion", 'String'>
    readonly eventoId: FieldRef<"Calificacion", 'Int'>
    readonly fechaCalificacion: FieldRef<"Calificacion", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Calificacion findUnique
   */
  export type CalificacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * Filter, which Calificacion to fetch.
     */
    where: CalificacionWhereUniqueInput
  }


  /**
   * Calificacion findUniqueOrThrow
   */
  export type CalificacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * Filter, which Calificacion to fetch.
     */
    where: CalificacionWhereUniqueInput
  }


  /**
   * Calificacion findFirst
   */
  export type CalificacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * Filter, which Calificacion to fetch.
     */
    where?: CalificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calificacions to fetch.
     */
    orderBy?: CalificacionOrderByWithRelationInput | CalificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Calificacions.
     */
    cursor?: CalificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Calificacions.
     */
    distinct?: CalificacionScalarFieldEnum | CalificacionScalarFieldEnum[]
  }


  /**
   * Calificacion findFirstOrThrow
   */
  export type CalificacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * Filter, which Calificacion to fetch.
     */
    where?: CalificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calificacions to fetch.
     */
    orderBy?: CalificacionOrderByWithRelationInput | CalificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Calificacions.
     */
    cursor?: CalificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Calificacions.
     */
    distinct?: CalificacionScalarFieldEnum | CalificacionScalarFieldEnum[]
  }


  /**
   * Calificacion findMany
   */
  export type CalificacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * Filter, which Calificacions to fetch.
     */
    where?: CalificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calificacions to fetch.
     */
    orderBy?: CalificacionOrderByWithRelationInput | CalificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Calificacions.
     */
    cursor?: CalificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calificacions.
     */
    skip?: number
    distinct?: CalificacionScalarFieldEnum | CalificacionScalarFieldEnum[]
  }


  /**
   * Calificacion create
   */
  export type CalificacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Calificacion.
     */
    data: XOR<CalificacionCreateInput, CalificacionUncheckedCreateInput>
  }


  /**
   * Calificacion createMany
   */
  export type CalificacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Calificacions.
     */
    data: CalificacionCreateManyInput | CalificacionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Calificacion update
   */
  export type CalificacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Calificacion.
     */
    data: XOR<CalificacionUpdateInput, CalificacionUncheckedUpdateInput>
    /**
     * Choose, which Calificacion to update.
     */
    where: CalificacionWhereUniqueInput
  }


  /**
   * Calificacion updateMany
   */
  export type CalificacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Calificacions.
     */
    data: XOR<CalificacionUpdateManyMutationInput, CalificacionUncheckedUpdateManyInput>
    /**
     * Filter which Calificacions to update
     */
    where?: CalificacionWhereInput
  }


  /**
   * Calificacion upsert
   */
  export type CalificacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Calificacion to update in case it exists.
     */
    where: CalificacionWhereUniqueInput
    /**
     * In case the Calificacion found by the `where` argument doesn't exist, create a new Calificacion with this data.
     */
    create: XOR<CalificacionCreateInput, CalificacionUncheckedCreateInput>
    /**
     * In case the Calificacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalificacionUpdateInput, CalificacionUncheckedUpdateInput>
  }


  /**
   * Calificacion delete
   */
  export type CalificacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
    /**
     * Filter which Calificacion to delete.
     */
    where: CalificacionWhereUniqueInput
  }


  /**
   * Calificacion deleteMany
   */
  export type CalificacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Calificacions to delete
     */
    where?: CalificacionWhereInput
  }


  /**
   * Calificacion without action
   */
  export type CalificacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Calificacion
     */
    select?: CalificacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionInclude<ExtArgs> | null
  }



  /**
   * Model CalificacionProveedor
   */

  export type AggregateCalificacionProveedor = {
    _count: CalificacionProveedorCountAggregateOutputType | null
    _avg: CalificacionProveedorAvgAggregateOutputType | null
    _sum: CalificacionProveedorSumAggregateOutputType | null
    _min: CalificacionProveedorMinAggregateOutputType | null
    _max: CalificacionProveedorMaxAggregateOutputType | null
  }

  export type CalificacionProveedorAvgAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    proveedorId: number | null
  }

  export type CalificacionProveedorSumAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    proveedorId: number | null
  }

  export type CalificacionProveedorMinAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    comentarios: string | null
    proveedorId: number | null
    fechaCalificacion: Date | null
  }

  export type CalificacionProveedorMaxAggregateOutputType = {
    id: number | null
    puntuacion: number | null
    comentarios: string | null
    proveedorId: number | null
    fechaCalificacion: Date | null
  }

  export type CalificacionProveedorCountAggregateOutputType = {
    id: number
    puntuacion: number
    comentarios: number
    proveedorId: number
    fechaCalificacion: number
    _all: number
  }


  export type CalificacionProveedorAvgAggregateInputType = {
    id?: true
    puntuacion?: true
    proveedorId?: true
  }

  export type CalificacionProveedorSumAggregateInputType = {
    id?: true
    puntuacion?: true
    proveedorId?: true
  }

  export type CalificacionProveedorMinAggregateInputType = {
    id?: true
    puntuacion?: true
    comentarios?: true
    proveedorId?: true
    fechaCalificacion?: true
  }

  export type CalificacionProveedorMaxAggregateInputType = {
    id?: true
    puntuacion?: true
    comentarios?: true
    proveedorId?: true
    fechaCalificacion?: true
  }

  export type CalificacionProveedorCountAggregateInputType = {
    id?: true
    puntuacion?: true
    comentarios?: true
    proveedorId?: true
    fechaCalificacion?: true
    _all?: true
  }

  export type CalificacionProveedorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalificacionProveedor to aggregate.
     */
    where?: CalificacionProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalificacionProveedors to fetch.
     */
    orderBy?: CalificacionProveedorOrderByWithRelationInput | CalificacionProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalificacionProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalificacionProveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalificacionProveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalificacionProveedors
    **/
    _count?: true | CalificacionProveedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalificacionProveedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalificacionProveedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalificacionProveedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalificacionProveedorMaxAggregateInputType
  }

  export type GetCalificacionProveedorAggregateType<T extends CalificacionProveedorAggregateArgs> = {
        [P in keyof T & keyof AggregateCalificacionProveedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalificacionProveedor[P]>
      : GetScalarType<T[P], AggregateCalificacionProveedor[P]>
  }




  export type CalificacionProveedorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalificacionProveedorWhereInput
    orderBy?: CalificacionProveedorOrderByWithAggregationInput | CalificacionProveedorOrderByWithAggregationInput[]
    by: CalificacionProveedorScalarFieldEnum[] | CalificacionProveedorScalarFieldEnum
    having?: CalificacionProveedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalificacionProveedorCountAggregateInputType | true
    _avg?: CalificacionProveedorAvgAggregateInputType
    _sum?: CalificacionProveedorSumAggregateInputType
    _min?: CalificacionProveedorMinAggregateInputType
    _max?: CalificacionProveedorMaxAggregateInputType
  }

  export type CalificacionProveedorGroupByOutputType = {
    id: number
    puntuacion: number
    comentarios: string
    proveedorId: number
    fechaCalificacion: Date
    _count: CalificacionProveedorCountAggregateOutputType | null
    _avg: CalificacionProveedorAvgAggregateOutputType | null
    _sum: CalificacionProveedorSumAggregateOutputType | null
    _min: CalificacionProveedorMinAggregateOutputType | null
    _max: CalificacionProveedorMaxAggregateOutputType | null
  }

  type GetCalificacionProveedorGroupByPayload<T extends CalificacionProveedorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalificacionProveedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalificacionProveedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalificacionProveedorGroupByOutputType[P]>
            : GetScalarType<T[P], CalificacionProveedorGroupByOutputType[P]>
        }
      >
    >


  export type CalificacionProveedorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    puntuacion?: boolean
    comentarios?: boolean
    proveedorId?: boolean
    fechaCalificacion?: boolean
    proveedor?: boolean | ProveedorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calificacionProveedor"]>

  export type CalificacionProveedorSelectScalar = {
    id?: boolean
    puntuacion?: boolean
    comentarios?: boolean
    proveedorId?: boolean
    fechaCalificacion?: boolean
  }

  export type CalificacionProveedorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proveedor?: boolean | ProveedorDefaultArgs<ExtArgs>
  }


  export type $CalificacionProveedorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalificacionProveedor"
    objects: {
      proveedor: Prisma.$ProveedorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      puntuacion: number
      comentarios: string
      proveedorId: number
      fechaCalificacion: Date
    }, ExtArgs["result"]["calificacionProveedor"]>
    composites: {}
  }


  type CalificacionProveedorGetPayload<S extends boolean | null | undefined | CalificacionProveedorDefaultArgs> = $Result.GetResult<Prisma.$CalificacionProveedorPayload, S>

  type CalificacionProveedorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CalificacionProveedorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CalificacionProveedorCountAggregateInputType | true
    }

  export interface CalificacionProveedorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalificacionProveedor'], meta: { name: 'CalificacionProveedor' } }
    /**
     * Find zero or one CalificacionProveedor that matches the filter.
     * @param {CalificacionProveedorFindUniqueArgs} args - Arguments to find a CalificacionProveedor
     * @example
     * // Get one CalificacionProveedor
     * const calificacionProveedor = await prisma.calificacionProveedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CalificacionProveedorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionProveedorFindUniqueArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CalificacionProveedor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CalificacionProveedorFindUniqueOrThrowArgs} args - Arguments to find a CalificacionProveedor
     * @example
     * // Get one CalificacionProveedor
     * const calificacionProveedor = await prisma.calificacionProveedor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CalificacionProveedorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionProveedorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CalificacionProveedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorFindFirstArgs} args - Arguments to find a CalificacionProveedor
     * @example
     * // Get one CalificacionProveedor
     * const calificacionProveedor = await prisma.calificacionProveedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CalificacionProveedorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionProveedorFindFirstArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CalificacionProveedor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorFindFirstOrThrowArgs} args - Arguments to find a CalificacionProveedor
     * @example
     * // Get one CalificacionProveedor
     * const calificacionProveedor = await prisma.calificacionProveedor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CalificacionProveedorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionProveedorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CalificacionProveedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalificacionProveedors
     * const calificacionProveedors = await prisma.calificacionProveedor.findMany()
     * 
     * // Get first 10 CalificacionProveedors
     * const calificacionProveedors = await prisma.calificacionProveedor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calificacionProveedorWithIdOnly = await prisma.calificacionProveedor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CalificacionProveedorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionProveedorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CalificacionProveedor.
     * @param {CalificacionProveedorCreateArgs} args - Arguments to create a CalificacionProveedor.
     * @example
     * // Create one CalificacionProveedor
     * const CalificacionProveedor = await prisma.calificacionProveedor.create({
     *   data: {
     *     // ... data to create a CalificacionProveedor
     *   }
     * })
     * 
    **/
    create<T extends CalificacionProveedorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionProveedorCreateArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CalificacionProveedors.
     *     @param {CalificacionProveedorCreateManyArgs} args - Arguments to create many CalificacionProveedors.
     *     @example
     *     // Create many CalificacionProveedors
     *     const calificacionProveedor = await prisma.calificacionProveedor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CalificacionProveedorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionProveedorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CalificacionProveedor.
     * @param {CalificacionProveedorDeleteArgs} args - Arguments to delete one CalificacionProveedor.
     * @example
     * // Delete one CalificacionProveedor
     * const CalificacionProveedor = await prisma.calificacionProveedor.delete({
     *   where: {
     *     // ... filter to delete one CalificacionProveedor
     *   }
     * })
     * 
    **/
    delete<T extends CalificacionProveedorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionProveedorDeleteArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CalificacionProveedor.
     * @param {CalificacionProveedorUpdateArgs} args - Arguments to update one CalificacionProveedor.
     * @example
     * // Update one CalificacionProveedor
     * const calificacionProveedor = await prisma.calificacionProveedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CalificacionProveedorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionProveedorUpdateArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CalificacionProveedors.
     * @param {CalificacionProveedorDeleteManyArgs} args - Arguments to filter CalificacionProveedors to delete.
     * @example
     * // Delete a few CalificacionProveedors
     * const { count } = await prisma.calificacionProveedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CalificacionProveedorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CalificacionProveedorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalificacionProveedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalificacionProveedors
     * const calificacionProveedor = await prisma.calificacionProveedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CalificacionProveedorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionProveedorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CalificacionProveedor.
     * @param {CalificacionProveedorUpsertArgs} args - Arguments to update or create a CalificacionProveedor.
     * @example
     * // Update or create a CalificacionProveedor
     * const calificacionProveedor = await prisma.calificacionProveedor.upsert({
     *   create: {
     *     // ... data to create a CalificacionProveedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalificacionProveedor we want to update
     *   }
     * })
    **/
    upsert<T extends CalificacionProveedorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CalificacionProveedorUpsertArgs<ExtArgs>>
    ): Prisma__CalificacionProveedorClient<$Result.GetResult<Prisma.$CalificacionProveedorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CalificacionProveedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorCountArgs} args - Arguments to filter CalificacionProveedors to count.
     * @example
     * // Count the number of CalificacionProveedors
     * const count = await prisma.calificacionProveedor.count({
     *   where: {
     *     // ... the filter for the CalificacionProveedors we want to count
     *   }
     * })
    **/
    count<T extends CalificacionProveedorCountArgs>(
      args?: Subset<T, CalificacionProveedorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalificacionProveedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalificacionProveedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalificacionProveedorAggregateArgs>(args: Subset<T, CalificacionProveedorAggregateArgs>): Prisma.PrismaPromise<GetCalificacionProveedorAggregateType<T>>

    /**
     * Group by CalificacionProveedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalificacionProveedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalificacionProveedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalificacionProveedorGroupByArgs['orderBy'] }
        : { orderBy?: CalificacionProveedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalificacionProveedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalificacionProveedorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalificacionProveedor model
   */
  readonly fields: CalificacionProveedorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalificacionProveedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalificacionProveedorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    proveedor<T extends ProveedorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProveedorDefaultArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CalificacionProveedor model
   */ 
  interface CalificacionProveedorFieldRefs {
    readonly id: FieldRef<"CalificacionProveedor", 'Int'>
    readonly puntuacion: FieldRef<"CalificacionProveedor", 'Int'>
    readonly comentarios: FieldRef<"CalificacionProveedor", 'String'>
    readonly proveedorId: FieldRef<"CalificacionProveedor", 'Int'>
    readonly fechaCalificacion: FieldRef<"CalificacionProveedor", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * CalificacionProveedor findUnique
   */
  export type CalificacionProveedorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * Filter, which CalificacionProveedor to fetch.
     */
    where: CalificacionProveedorWhereUniqueInput
  }


  /**
   * CalificacionProveedor findUniqueOrThrow
   */
  export type CalificacionProveedorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * Filter, which CalificacionProveedor to fetch.
     */
    where: CalificacionProveedorWhereUniqueInput
  }


  /**
   * CalificacionProveedor findFirst
   */
  export type CalificacionProveedorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * Filter, which CalificacionProveedor to fetch.
     */
    where?: CalificacionProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalificacionProveedors to fetch.
     */
    orderBy?: CalificacionProveedorOrderByWithRelationInput | CalificacionProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalificacionProveedors.
     */
    cursor?: CalificacionProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalificacionProveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalificacionProveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalificacionProveedors.
     */
    distinct?: CalificacionProveedorScalarFieldEnum | CalificacionProveedorScalarFieldEnum[]
  }


  /**
   * CalificacionProveedor findFirstOrThrow
   */
  export type CalificacionProveedorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * Filter, which CalificacionProveedor to fetch.
     */
    where?: CalificacionProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalificacionProveedors to fetch.
     */
    orderBy?: CalificacionProveedorOrderByWithRelationInput | CalificacionProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalificacionProveedors.
     */
    cursor?: CalificacionProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalificacionProveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalificacionProveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalificacionProveedors.
     */
    distinct?: CalificacionProveedorScalarFieldEnum | CalificacionProveedorScalarFieldEnum[]
  }


  /**
   * CalificacionProveedor findMany
   */
  export type CalificacionProveedorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * Filter, which CalificacionProveedors to fetch.
     */
    where?: CalificacionProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalificacionProveedors to fetch.
     */
    orderBy?: CalificacionProveedorOrderByWithRelationInput | CalificacionProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalificacionProveedors.
     */
    cursor?: CalificacionProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalificacionProveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalificacionProveedors.
     */
    skip?: number
    distinct?: CalificacionProveedorScalarFieldEnum | CalificacionProveedorScalarFieldEnum[]
  }


  /**
   * CalificacionProveedor create
   */
  export type CalificacionProveedorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * The data needed to create a CalificacionProveedor.
     */
    data: XOR<CalificacionProveedorCreateInput, CalificacionProveedorUncheckedCreateInput>
  }


  /**
   * CalificacionProveedor createMany
   */
  export type CalificacionProveedorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalificacionProveedors.
     */
    data: CalificacionProveedorCreateManyInput | CalificacionProveedorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CalificacionProveedor update
   */
  export type CalificacionProveedorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * The data needed to update a CalificacionProveedor.
     */
    data: XOR<CalificacionProveedorUpdateInput, CalificacionProveedorUncheckedUpdateInput>
    /**
     * Choose, which CalificacionProveedor to update.
     */
    where: CalificacionProveedorWhereUniqueInput
  }


  /**
   * CalificacionProveedor updateMany
   */
  export type CalificacionProveedorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalificacionProveedors.
     */
    data: XOR<CalificacionProveedorUpdateManyMutationInput, CalificacionProveedorUncheckedUpdateManyInput>
    /**
     * Filter which CalificacionProveedors to update
     */
    where?: CalificacionProveedorWhereInput
  }


  /**
   * CalificacionProveedor upsert
   */
  export type CalificacionProveedorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * The filter to search for the CalificacionProveedor to update in case it exists.
     */
    where: CalificacionProveedorWhereUniqueInput
    /**
     * In case the CalificacionProveedor found by the `where` argument doesn't exist, create a new CalificacionProveedor with this data.
     */
    create: XOR<CalificacionProveedorCreateInput, CalificacionProveedorUncheckedCreateInput>
    /**
     * In case the CalificacionProveedor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalificacionProveedorUpdateInput, CalificacionProveedorUncheckedUpdateInput>
  }


  /**
   * CalificacionProveedor delete
   */
  export type CalificacionProveedorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
    /**
     * Filter which CalificacionProveedor to delete.
     */
    where: CalificacionProveedorWhereUniqueInput
  }


  /**
   * CalificacionProveedor deleteMany
   */
  export type CalificacionProveedorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalificacionProveedors to delete
     */
    where?: CalificacionProveedorWhereInput
  }


  /**
   * CalificacionProveedor without action
   */
  export type CalificacionProveedorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalificacionProveedor
     */
    select?: CalificacionProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CalificacionProveedorInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EventoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    fecha: 'fecha',
    hora: 'hora',
    lugar: 'lugar',
    tipoEventoId: 'tipoEventoId',
    responsableId: 'responsableId'
  };

  export type EventoScalarFieldEnum = (typeof EventoScalarFieldEnum)[keyof typeof EventoScalarFieldEnum]


  export const AsistenteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    correo: 'correo',
    telefono: 'telefono',
    clienteId: 'clienteId',
    metodoPagoId: 'metodoPagoId'
  };

  export type AsistenteScalarFieldEnum = (typeof AsistenteScalarFieldEnum)[keyof typeof AsistenteScalarFieldEnum]


  export const PagoScalarFieldEnum: {
    id: 'id',
    monto: 'monto',
    fechaPago: 'fechaPago',
    metodoPagoId: 'metodoPagoId',
    eventoId: 'eventoId',
    clienteId: 'clienteId'
  };

  export type PagoScalarFieldEnum = (typeof PagoScalarFieldEnum)[keyof typeof PagoScalarFieldEnum]


  export const ServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    costo: 'costo',
    reservaId: 'reservaId',
    tipoServicioId: 'tipoServicioId'
  };

  export type ServicioScalarFieldEnum = (typeof ServicioScalarFieldEnum)[keyof typeof ServicioScalarFieldEnum]


  export const ProveedorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    contacto: 'contacto',
    telefono: 'telefono',
    contratoId: 'contratoId',
    clienteId: 'clienteId'
  };

  export type ProveedorScalarFieldEnum = (typeof ProveedorScalarFieldEnum)[keyof typeof ProveedorScalarFieldEnum]


  export const TipoEventoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    precioBase: 'precioBase',
    aforoMaximo: 'aforoMaximo',
    duracion: 'duracion'
  };

  export type TipoEventoScalarFieldEnum = (typeof TipoEventoScalarFieldEnum)[keyof typeof TipoEventoScalarFieldEnum]


  export const PersonaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    correo: 'correo',
    telefono: 'telefono',
    direccion: 'direccion',
    ciudad: 'ciudad',
    codigoPostal: 'codigoPostal',
    pais: 'pais'
  };

  export type PersonaScalarFieldEnum = (typeof PersonaScalarFieldEnum)[keyof typeof PersonaScalarFieldEnum]


  export const MetodoPagoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type MetodoPagoScalarFieldEnum = (typeof MetodoPagoScalarFieldEnum)[keyof typeof MetodoPagoScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    correo: 'correo',
    telefono: 'telefono',
    direccion: 'direccion',
    ciudad: 'ciudad',
    codigoPostal: 'codigoPostal',
    pais: 'pais'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ReservaScalarFieldEnum: {
    id: 'id',
    fechaReserva: 'fechaReserva',
    horaReserva: 'horaReserva',
    eventoId: 'eventoId',
    duracionReserva: 'duracionReserva'
  };

  export type ReservaScalarFieldEnum = (typeof ReservaScalarFieldEnum)[keyof typeof ReservaScalarFieldEnum]


  export const TipoServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion'
  };

  export type TipoServicioScalarFieldEnum = (typeof TipoServicioScalarFieldEnum)[keyof typeof TipoServicioScalarFieldEnum]


  export const ContratoScalarFieldEnum: {
    id: 'id',
    fechaInicio: 'fechaInicio',
    fechaFinalizacion: 'fechaFinalizacion',
    servicioId: 'servicioId',
    tipoContrato: 'tipoContrato',
    costoTotal: 'costoTotal'
  };

  export type ContratoScalarFieldEnum = (typeof ContratoScalarFieldEnum)[keyof typeof ContratoScalarFieldEnum]


  export const CalificacionScalarFieldEnum: {
    id: 'id',
    puntuacion: 'puntuacion',
    comentarios: 'comentarios',
    eventoId: 'eventoId',
    fechaCalificacion: 'fechaCalificacion'
  };

  export type CalificacionScalarFieldEnum = (typeof CalificacionScalarFieldEnum)[keyof typeof CalificacionScalarFieldEnum]


  export const CalificacionProveedorScalarFieldEnum: {
    id: 'id',
    puntuacion: 'puntuacion',
    comentarios: 'comentarios',
    proveedorId: 'proveedorId',
    fechaCalificacion: 'fechaCalificacion'
  };

  export type CalificacionProveedorScalarFieldEnum = (typeof CalificacionProveedorScalarFieldEnum)[keyof typeof CalificacionProveedorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EventoWhereInput = {
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    id?: IntFilter<"Evento"> | number
    nombre?: StringFilter<"Evento"> | string
    fecha?: DateTimeFilter<"Evento"> | Date | string
    hora?: StringFilter<"Evento"> | string
    lugar?: StringFilter<"Evento"> | string
    tipoEventoId?: IntFilter<"Evento"> | number
    responsableId?: IntFilter<"Evento"> | number
    tipoEvento?: XOR<TipoEventoRelationFilter, TipoEventoWhereInput>
    responsable?: XOR<PersonaRelationFilter, PersonaWhereInput>
    pagos?: PagoListRelationFilter
    reserva?: ReservaListRelationFilter
    calificacion?: CalificacionListRelationFilter
  }

  export type EventoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    lugar?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
    tipoEvento?: TipoEventoOrderByWithRelationInput
    responsable?: PersonaOrderByWithRelationInput
    pagos?: PagoOrderByRelationAggregateInput
    reserva?: ReservaOrderByRelationAggregateInput
    calificacion?: CalificacionOrderByRelationAggregateInput
  }

  export type EventoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    nombre?: StringFilter<"Evento"> | string
    fecha?: DateTimeFilter<"Evento"> | Date | string
    hora?: StringFilter<"Evento"> | string
    lugar?: StringFilter<"Evento"> | string
    tipoEventoId?: IntFilter<"Evento"> | number
    responsableId?: IntFilter<"Evento"> | number
    tipoEvento?: XOR<TipoEventoRelationFilter, TipoEventoWhereInput>
    responsable?: XOR<PersonaRelationFilter, PersonaWhereInput>
    pagos?: PagoListRelationFilter
    reserva?: ReservaListRelationFilter
    calificacion?: CalificacionListRelationFilter
  }, "id">

  export type EventoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    lugar?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
    _count?: EventoCountOrderByAggregateInput
    _avg?: EventoAvgOrderByAggregateInput
    _max?: EventoMaxOrderByAggregateInput
    _min?: EventoMinOrderByAggregateInput
    _sum?: EventoSumOrderByAggregateInput
  }

  export type EventoScalarWhereWithAggregatesInput = {
    AND?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    OR?: EventoScalarWhereWithAggregatesInput[]
    NOT?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Evento"> | number
    nombre?: StringWithAggregatesFilter<"Evento"> | string
    fecha?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
    hora?: StringWithAggregatesFilter<"Evento"> | string
    lugar?: StringWithAggregatesFilter<"Evento"> | string
    tipoEventoId?: IntWithAggregatesFilter<"Evento"> | number
    responsableId?: IntWithAggregatesFilter<"Evento"> | number
  }

  export type AsistenteWhereInput = {
    AND?: AsistenteWhereInput | AsistenteWhereInput[]
    OR?: AsistenteWhereInput[]
    NOT?: AsistenteWhereInput | AsistenteWhereInput[]
    id?: IntFilter<"Asistente"> | number
    nombre?: StringFilter<"Asistente"> | string
    correo?: StringFilter<"Asistente"> | string
    telefono?: StringFilter<"Asistente"> | string
    clienteId?: IntNullableFilter<"Asistente"> | number | null
    metodoPagoId?: IntNullableFilter<"Asistente"> | number | null
    cliente?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    metodoPago?: XOR<MetodoPagoNullableRelationFilter, MetodoPagoWhereInput> | null
  }

  export type AsistenteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    clienteId?: SortOrderInput | SortOrder
    metodoPagoId?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
    metodoPago?: MetodoPagoOrderByWithRelationInput
  }

  export type AsistenteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AsistenteWhereInput | AsistenteWhereInput[]
    OR?: AsistenteWhereInput[]
    NOT?: AsistenteWhereInput | AsistenteWhereInput[]
    nombre?: StringFilter<"Asistente"> | string
    correo?: StringFilter<"Asistente"> | string
    telefono?: StringFilter<"Asistente"> | string
    clienteId?: IntNullableFilter<"Asistente"> | number | null
    metodoPagoId?: IntNullableFilter<"Asistente"> | number | null
    cliente?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    metodoPago?: XOR<MetodoPagoNullableRelationFilter, MetodoPagoWhereInput> | null
  }, "id">

  export type AsistenteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    clienteId?: SortOrderInput | SortOrder
    metodoPagoId?: SortOrderInput | SortOrder
    _count?: AsistenteCountOrderByAggregateInput
    _avg?: AsistenteAvgOrderByAggregateInput
    _max?: AsistenteMaxOrderByAggregateInput
    _min?: AsistenteMinOrderByAggregateInput
    _sum?: AsistenteSumOrderByAggregateInput
  }

  export type AsistenteScalarWhereWithAggregatesInput = {
    AND?: AsistenteScalarWhereWithAggregatesInput | AsistenteScalarWhereWithAggregatesInput[]
    OR?: AsistenteScalarWhereWithAggregatesInput[]
    NOT?: AsistenteScalarWhereWithAggregatesInput | AsistenteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Asistente"> | number
    nombre?: StringWithAggregatesFilter<"Asistente"> | string
    correo?: StringWithAggregatesFilter<"Asistente"> | string
    telefono?: StringWithAggregatesFilter<"Asistente"> | string
    clienteId?: IntNullableWithAggregatesFilter<"Asistente"> | number | null
    metodoPagoId?: IntNullableWithAggregatesFilter<"Asistente"> | number | null
  }

  export type PagoWhereInput = {
    AND?: PagoWhereInput | PagoWhereInput[]
    OR?: PagoWhereInput[]
    NOT?: PagoWhereInput | PagoWhereInput[]
    id?: IntFilter<"Pago"> | number
    monto?: FloatFilter<"Pago"> | number
    fechaPago?: DateTimeFilter<"Pago"> | Date | string
    metodoPagoId?: IntFilter<"Pago"> | number
    eventoId?: IntFilter<"Pago"> | number
    clienteId?: IntFilter<"Pago"> | number
    metodoPago?: XOR<MetodoPagoRelationFilter, MetodoPagoWhereInput>
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type PagoOrderByWithRelationInput = {
    id?: SortOrder
    monto?: SortOrder
    fechaPago?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
    metodoPago?: MetodoPagoOrderByWithRelationInput
    evento?: EventoOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
  }

  export type PagoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PagoWhereInput | PagoWhereInput[]
    OR?: PagoWhereInput[]
    NOT?: PagoWhereInput | PagoWhereInput[]
    monto?: FloatFilter<"Pago"> | number
    fechaPago?: DateTimeFilter<"Pago"> | Date | string
    metodoPagoId?: IntFilter<"Pago"> | number
    eventoId?: IntFilter<"Pago"> | number
    clienteId?: IntFilter<"Pago"> | number
    metodoPago?: XOR<MetodoPagoRelationFilter, MetodoPagoWhereInput>
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }, "id">

  export type PagoOrderByWithAggregationInput = {
    id?: SortOrder
    monto?: SortOrder
    fechaPago?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
    _count?: PagoCountOrderByAggregateInput
    _avg?: PagoAvgOrderByAggregateInput
    _max?: PagoMaxOrderByAggregateInput
    _min?: PagoMinOrderByAggregateInput
    _sum?: PagoSumOrderByAggregateInput
  }

  export type PagoScalarWhereWithAggregatesInput = {
    AND?: PagoScalarWhereWithAggregatesInput | PagoScalarWhereWithAggregatesInput[]
    OR?: PagoScalarWhereWithAggregatesInput[]
    NOT?: PagoScalarWhereWithAggregatesInput | PagoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pago"> | number
    monto?: FloatWithAggregatesFilter<"Pago"> | number
    fechaPago?: DateTimeWithAggregatesFilter<"Pago"> | Date | string
    metodoPagoId?: IntWithAggregatesFilter<"Pago"> | number
    eventoId?: IntWithAggregatesFilter<"Pago"> | number
    clienteId?: IntWithAggregatesFilter<"Pago"> | number
  }

  export type ServicioWhereInput = {
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    id?: IntFilter<"Servicio"> | number
    nombre?: StringFilter<"Servicio"> | string
    costo?: FloatFilter<"Servicio"> | number
    reservaId?: IntFilter<"Servicio"> | number
    tipoServicioId?: IntFilter<"Servicio"> | number
    reserva?: XOR<ReservaRelationFilter, ReservaWhereInput>
    tipoServicio?: XOR<TipoServicioRelationFilter, TipoServicioWhereInput>
    Contratos?: ContratoListRelationFilter
  }

  export type ServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
    reserva?: ReservaOrderByWithRelationInput
    tipoServicio?: TipoServicioOrderByWithRelationInput
    Contratos?: ContratoOrderByRelationAggregateInput
  }

  export type ServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    nombre?: StringFilter<"Servicio"> | string
    costo?: FloatFilter<"Servicio"> | number
    reservaId?: IntFilter<"Servicio"> | number
    tipoServicioId?: IntFilter<"Servicio"> | number
    reserva?: XOR<ReservaRelationFilter, ReservaWhereInput>
    tipoServicio?: XOR<TipoServicioRelationFilter, TipoServicioWhereInput>
    Contratos?: ContratoListRelationFilter
  }, "id">

  export type ServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
    _count?: ServicioCountOrderByAggregateInput
    _avg?: ServicioAvgOrderByAggregateInput
    _max?: ServicioMaxOrderByAggregateInput
    _min?: ServicioMinOrderByAggregateInput
    _sum?: ServicioSumOrderByAggregateInput
  }

  export type ServicioScalarWhereWithAggregatesInput = {
    AND?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    OR?: ServicioScalarWhereWithAggregatesInput[]
    NOT?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Servicio"> | number
    nombre?: StringWithAggregatesFilter<"Servicio"> | string
    costo?: FloatWithAggregatesFilter<"Servicio"> | number
    reservaId?: IntWithAggregatesFilter<"Servicio"> | number
    tipoServicioId?: IntWithAggregatesFilter<"Servicio"> | number
  }

  export type ProveedorWhereInput = {
    AND?: ProveedorWhereInput | ProveedorWhereInput[]
    OR?: ProveedorWhereInput[]
    NOT?: ProveedorWhereInput | ProveedorWhereInput[]
    id?: IntFilter<"Proveedor"> | number
    nombre?: StringFilter<"Proveedor"> | string
    contacto?: StringFilter<"Proveedor"> | string
    telefono?: StringFilter<"Proveedor"> | string
    contratoId?: IntNullableFilter<"Proveedor"> | number | null
    clienteId?: IntNullableFilter<"Proveedor"> | number | null
    contrato?: XOR<ContratoNullableRelationFilter, ContratoWhereInput> | null
    cliente?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    calificaciones?: CalificacionProveedorListRelationFilter
  }

  export type ProveedorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    contacto?: SortOrder
    telefono?: SortOrder
    contratoId?: SortOrderInput | SortOrder
    clienteId?: SortOrderInput | SortOrder
    contrato?: ContratoOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
    calificaciones?: CalificacionProveedorOrderByRelationAggregateInput
  }

  export type ProveedorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProveedorWhereInput | ProveedorWhereInput[]
    OR?: ProveedorWhereInput[]
    NOT?: ProveedorWhereInput | ProveedorWhereInput[]
    nombre?: StringFilter<"Proveedor"> | string
    contacto?: StringFilter<"Proveedor"> | string
    telefono?: StringFilter<"Proveedor"> | string
    contratoId?: IntNullableFilter<"Proveedor"> | number | null
    clienteId?: IntNullableFilter<"Proveedor"> | number | null
    contrato?: XOR<ContratoNullableRelationFilter, ContratoWhereInput> | null
    cliente?: XOR<ClienteNullableRelationFilter, ClienteWhereInput> | null
    calificaciones?: CalificacionProveedorListRelationFilter
  }, "id">

  export type ProveedorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    contacto?: SortOrder
    telefono?: SortOrder
    contratoId?: SortOrderInput | SortOrder
    clienteId?: SortOrderInput | SortOrder
    _count?: ProveedorCountOrderByAggregateInput
    _avg?: ProveedorAvgOrderByAggregateInput
    _max?: ProveedorMaxOrderByAggregateInput
    _min?: ProveedorMinOrderByAggregateInput
    _sum?: ProveedorSumOrderByAggregateInput
  }

  export type ProveedorScalarWhereWithAggregatesInput = {
    AND?: ProveedorScalarWhereWithAggregatesInput | ProveedorScalarWhereWithAggregatesInput[]
    OR?: ProveedorScalarWhereWithAggregatesInput[]
    NOT?: ProveedorScalarWhereWithAggregatesInput | ProveedorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Proveedor"> | number
    nombre?: StringWithAggregatesFilter<"Proveedor"> | string
    contacto?: StringWithAggregatesFilter<"Proveedor"> | string
    telefono?: StringWithAggregatesFilter<"Proveedor"> | string
    contratoId?: IntNullableWithAggregatesFilter<"Proveedor"> | number | null
    clienteId?: IntNullableWithAggregatesFilter<"Proveedor"> | number | null
  }

  export type TipoEventoWhereInput = {
    AND?: TipoEventoWhereInput | TipoEventoWhereInput[]
    OR?: TipoEventoWhereInput[]
    NOT?: TipoEventoWhereInput | TipoEventoWhereInput[]
    id?: IntFilter<"TipoEvento"> | number
    nombre?: StringFilter<"TipoEvento"> | string
    descripcion?: StringFilter<"TipoEvento"> | string
    precioBase?: FloatFilter<"TipoEvento"> | number
    aforoMaximo?: IntFilter<"TipoEvento"> | number
    duracion?: IntFilter<"TipoEvento"> | number
    eventos?: EventoListRelationFilter
  }

  export type TipoEventoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
    eventos?: EventoOrderByRelationAggregateInput
  }

  export type TipoEventoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TipoEventoWhereInput | TipoEventoWhereInput[]
    OR?: TipoEventoWhereInput[]
    NOT?: TipoEventoWhereInput | TipoEventoWhereInput[]
    nombre?: StringFilter<"TipoEvento"> | string
    descripcion?: StringFilter<"TipoEvento"> | string
    precioBase?: FloatFilter<"TipoEvento"> | number
    aforoMaximo?: IntFilter<"TipoEvento"> | number
    duracion?: IntFilter<"TipoEvento"> | number
    eventos?: EventoListRelationFilter
  }, "id">

  export type TipoEventoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
    _count?: TipoEventoCountOrderByAggregateInput
    _avg?: TipoEventoAvgOrderByAggregateInput
    _max?: TipoEventoMaxOrderByAggregateInput
    _min?: TipoEventoMinOrderByAggregateInput
    _sum?: TipoEventoSumOrderByAggregateInput
  }

  export type TipoEventoScalarWhereWithAggregatesInput = {
    AND?: TipoEventoScalarWhereWithAggregatesInput | TipoEventoScalarWhereWithAggregatesInput[]
    OR?: TipoEventoScalarWhereWithAggregatesInput[]
    NOT?: TipoEventoScalarWhereWithAggregatesInput | TipoEventoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoEvento"> | number
    nombre?: StringWithAggregatesFilter<"TipoEvento"> | string
    descripcion?: StringWithAggregatesFilter<"TipoEvento"> | string
    precioBase?: FloatWithAggregatesFilter<"TipoEvento"> | number
    aforoMaximo?: IntWithAggregatesFilter<"TipoEvento"> | number
    duracion?: IntWithAggregatesFilter<"TipoEvento"> | number
  }

  export type PersonaWhereInput = {
    AND?: PersonaWhereInput | PersonaWhereInput[]
    OR?: PersonaWhereInput[]
    NOT?: PersonaWhereInput | PersonaWhereInput[]
    id?: IntFilter<"Persona"> | number
    nombre?: StringFilter<"Persona"> | string
    apellido?: StringFilter<"Persona"> | string
    correo?: StringFilter<"Persona"> | string
    telefono?: StringFilter<"Persona"> | string
    direccion?: StringFilter<"Persona"> | string
    ciudad?: StringFilter<"Persona"> | string
    codigoPostal?: StringFilter<"Persona"> | string
    pais?: StringFilter<"Persona"> | string
    eventos?: EventoListRelationFilter
  }

  export type PersonaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    eventos?: EventoOrderByRelationAggregateInput
  }

  export type PersonaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    AND?: PersonaWhereInput | PersonaWhereInput[]
    OR?: PersonaWhereInput[]
    NOT?: PersonaWhereInput | PersonaWhereInput[]
    nombre?: StringFilter<"Persona"> | string
    apellido?: StringFilter<"Persona"> | string
    telefono?: StringFilter<"Persona"> | string
    direccion?: StringFilter<"Persona"> | string
    ciudad?: StringFilter<"Persona"> | string
    codigoPostal?: StringFilter<"Persona"> | string
    pais?: StringFilter<"Persona"> | string
    eventos?: EventoListRelationFilter
  }, "id" | "correo">

  export type PersonaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    _count?: PersonaCountOrderByAggregateInput
    _avg?: PersonaAvgOrderByAggregateInput
    _max?: PersonaMaxOrderByAggregateInput
    _min?: PersonaMinOrderByAggregateInput
    _sum?: PersonaSumOrderByAggregateInput
  }

  export type PersonaScalarWhereWithAggregatesInput = {
    AND?: PersonaScalarWhereWithAggregatesInput | PersonaScalarWhereWithAggregatesInput[]
    OR?: PersonaScalarWhereWithAggregatesInput[]
    NOT?: PersonaScalarWhereWithAggregatesInput | PersonaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Persona"> | number
    nombre?: StringWithAggregatesFilter<"Persona"> | string
    apellido?: StringWithAggregatesFilter<"Persona"> | string
    correo?: StringWithAggregatesFilter<"Persona"> | string
    telefono?: StringWithAggregatesFilter<"Persona"> | string
    direccion?: StringWithAggregatesFilter<"Persona"> | string
    ciudad?: StringWithAggregatesFilter<"Persona"> | string
    codigoPostal?: StringWithAggregatesFilter<"Persona"> | string
    pais?: StringWithAggregatesFilter<"Persona"> | string
  }

  export type MetodoPagoWhereInput = {
    AND?: MetodoPagoWhereInput | MetodoPagoWhereInput[]
    OR?: MetodoPagoWhereInput[]
    NOT?: MetodoPagoWhereInput | MetodoPagoWhereInput[]
    id?: IntFilter<"MetodoPago"> | number
    nombre?: StringFilter<"MetodoPago"> | string
    pagos?: PagoListRelationFilter
    asistentes?: AsistenteListRelationFilter
  }

  export type MetodoPagoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    pagos?: PagoOrderByRelationAggregateInput
    asistentes?: AsistenteOrderByRelationAggregateInput
  }

  export type MetodoPagoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MetodoPagoWhereInput | MetodoPagoWhereInput[]
    OR?: MetodoPagoWhereInput[]
    NOT?: MetodoPagoWhereInput | MetodoPagoWhereInput[]
    nombre?: StringFilter<"MetodoPago"> | string
    pagos?: PagoListRelationFilter
    asistentes?: AsistenteListRelationFilter
  }, "id">

  export type MetodoPagoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: MetodoPagoCountOrderByAggregateInput
    _avg?: MetodoPagoAvgOrderByAggregateInput
    _max?: MetodoPagoMaxOrderByAggregateInput
    _min?: MetodoPagoMinOrderByAggregateInput
    _sum?: MetodoPagoSumOrderByAggregateInput
  }

  export type MetodoPagoScalarWhereWithAggregatesInput = {
    AND?: MetodoPagoScalarWhereWithAggregatesInput | MetodoPagoScalarWhereWithAggregatesInput[]
    OR?: MetodoPagoScalarWhereWithAggregatesInput[]
    NOT?: MetodoPagoScalarWhereWithAggregatesInput | MetodoPagoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MetodoPago"> | number
    nombre?: StringWithAggregatesFilter<"MetodoPago"> | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nombre?: StringFilter<"Cliente"> | string
    apellido?: StringFilter<"Cliente"> | string
    correo?: StringFilter<"Cliente"> | string
    telefono?: StringFilter<"Cliente"> | string
    direccion?: StringFilter<"Cliente"> | string
    ciudad?: StringFilter<"Cliente"> | string
    codigoPostal?: StringFilter<"Cliente"> | string
    pais?: StringFilter<"Cliente"> | string
    asistentes?: AsistenteListRelationFilter
    pagos?: PagoListRelationFilter
    proveedores?: ProveedorListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    asistentes?: AsistenteOrderByRelationAggregateInput
    pagos?: PagoOrderByRelationAggregateInput
    proveedores?: ProveedorOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nombre?: StringFilter<"Cliente"> | string
    apellido?: StringFilter<"Cliente"> | string
    correo?: StringFilter<"Cliente"> | string
    telefono?: StringFilter<"Cliente"> | string
    direccion?: StringFilter<"Cliente"> | string
    ciudad?: StringFilter<"Cliente"> | string
    codigoPostal?: StringFilter<"Cliente"> | string
    pais?: StringFilter<"Cliente"> | string
    asistentes?: AsistenteListRelationFilter
    pagos?: PagoListRelationFilter
    proveedores?: ProveedorListRelationFilter
  }, "id">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nombre?: StringWithAggregatesFilter<"Cliente"> | string
    apellido?: StringWithAggregatesFilter<"Cliente"> | string
    correo?: StringWithAggregatesFilter<"Cliente"> | string
    telefono?: StringWithAggregatesFilter<"Cliente"> | string
    direccion?: StringWithAggregatesFilter<"Cliente"> | string
    ciudad?: StringWithAggregatesFilter<"Cliente"> | string
    codigoPostal?: StringWithAggregatesFilter<"Cliente"> | string
    pais?: StringWithAggregatesFilter<"Cliente"> | string
  }

  export type ReservaWhereInput = {
    AND?: ReservaWhereInput | ReservaWhereInput[]
    OR?: ReservaWhereInput[]
    NOT?: ReservaWhereInput | ReservaWhereInput[]
    id?: IntFilter<"Reserva"> | number
    fechaReserva?: DateTimeFilter<"Reserva"> | Date | string
    horaReserva?: StringFilter<"Reserva"> | string
    eventoId?: IntFilter<"Reserva"> | number
    duracionReserva?: IntFilter<"Reserva"> | number
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
    servicios?: ServicioListRelationFilter
  }

  export type ReservaOrderByWithRelationInput = {
    id?: SortOrder
    fechaReserva?: SortOrder
    horaReserva?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
    evento?: EventoOrderByWithRelationInput
    servicios?: ServicioOrderByRelationAggregateInput
  }

  export type ReservaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReservaWhereInput | ReservaWhereInput[]
    OR?: ReservaWhereInput[]
    NOT?: ReservaWhereInput | ReservaWhereInput[]
    fechaReserva?: DateTimeFilter<"Reserva"> | Date | string
    horaReserva?: StringFilter<"Reserva"> | string
    eventoId?: IntFilter<"Reserva"> | number
    duracionReserva?: IntFilter<"Reserva"> | number
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
    servicios?: ServicioListRelationFilter
  }, "id">

  export type ReservaOrderByWithAggregationInput = {
    id?: SortOrder
    fechaReserva?: SortOrder
    horaReserva?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
    _count?: ReservaCountOrderByAggregateInput
    _avg?: ReservaAvgOrderByAggregateInput
    _max?: ReservaMaxOrderByAggregateInput
    _min?: ReservaMinOrderByAggregateInput
    _sum?: ReservaSumOrderByAggregateInput
  }

  export type ReservaScalarWhereWithAggregatesInput = {
    AND?: ReservaScalarWhereWithAggregatesInput | ReservaScalarWhereWithAggregatesInput[]
    OR?: ReservaScalarWhereWithAggregatesInput[]
    NOT?: ReservaScalarWhereWithAggregatesInput | ReservaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reserva"> | number
    fechaReserva?: DateTimeWithAggregatesFilter<"Reserva"> | Date | string
    horaReserva?: StringWithAggregatesFilter<"Reserva"> | string
    eventoId?: IntWithAggregatesFilter<"Reserva"> | number
    duracionReserva?: IntWithAggregatesFilter<"Reserva"> | number
  }

  export type TipoServicioWhereInput = {
    AND?: TipoServicioWhereInput | TipoServicioWhereInput[]
    OR?: TipoServicioWhereInput[]
    NOT?: TipoServicioWhereInput | TipoServicioWhereInput[]
    id?: IntFilter<"TipoServicio"> | number
    nombre?: StringFilter<"TipoServicio"> | string
    descripcion?: StringFilter<"TipoServicio"> | string
    servicios?: ServicioListRelationFilter
  }

  export type TipoServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    servicios?: ServicioOrderByRelationAggregateInput
  }

  export type TipoServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TipoServicioWhereInput | TipoServicioWhereInput[]
    OR?: TipoServicioWhereInput[]
    NOT?: TipoServicioWhereInput | TipoServicioWhereInput[]
    nombre?: StringFilter<"TipoServicio"> | string
    descripcion?: StringFilter<"TipoServicio"> | string
    servicios?: ServicioListRelationFilter
  }, "id">

  export type TipoServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    _count?: TipoServicioCountOrderByAggregateInput
    _avg?: TipoServicioAvgOrderByAggregateInput
    _max?: TipoServicioMaxOrderByAggregateInput
    _min?: TipoServicioMinOrderByAggregateInput
    _sum?: TipoServicioSumOrderByAggregateInput
  }

  export type TipoServicioScalarWhereWithAggregatesInput = {
    AND?: TipoServicioScalarWhereWithAggregatesInput | TipoServicioScalarWhereWithAggregatesInput[]
    OR?: TipoServicioScalarWhereWithAggregatesInput[]
    NOT?: TipoServicioScalarWhereWithAggregatesInput | TipoServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoServicio"> | number
    nombre?: StringWithAggregatesFilter<"TipoServicio"> | string
    descripcion?: StringWithAggregatesFilter<"TipoServicio"> | string
  }

  export type ContratoWhereInput = {
    AND?: ContratoWhereInput | ContratoWhereInput[]
    OR?: ContratoWhereInput[]
    NOT?: ContratoWhereInput | ContratoWhereInput[]
    id?: IntFilter<"Contrato"> | number
    fechaInicio?: DateTimeFilter<"Contrato"> | Date | string
    fechaFinalizacion?: DateTimeFilter<"Contrato"> | Date | string
    servicioId?: IntFilter<"Contrato"> | number
    tipoContrato?: StringFilter<"Contrato"> | string
    costoTotal?: FloatFilter<"Contrato"> | number
    servicio?: XOR<ServicioRelationFilter, ServicioWhereInput>
    proveedor?: ProveedorListRelationFilter
  }

  export type ContratoOrderByWithRelationInput = {
    id?: SortOrder
    fechaInicio?: SortOrder
    fechaFinalizacion?: SortOrder
    servicioId?: SortOrder
    tipoContrato?: SortOrder
    costoTotal?: SortOrder
    servicio?: ServicioOrderByWithRelationInput
    proveedor?: ProveedorOrderByRelationAggregateInput
  }

  export type ContratoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContratoWhereInput | ContratoWhereInput[]
    OR?: ContratoWhereInput[]
    NOT?: ContratoWhereInput | ContratoWhereInput[]
    fechaInicio?: DateTimeFilter<"Contrato"> | Date | string
    fechaFinalizacion?: DateTimeFilter<"Contrato"> | Date | string
    servicioId?: IntFilter<"Contrato"> | number
    tipoContrato?: StringFilter<"Contrato"> | string
    costoTotal?: FloatFilter<"Contrato"> | number
    servicio?: XOR<ServicioRelationFilter, ServicioWhereInput>
    proveedor?: ProveedorListRelationFilter
  }, "id">

  export type ContratoOrderByWithAggregationInput = {
    id?: SortOrder
    fechaInicio?: SortOrder
    fechaFinalizacion?: SortOrder
    servicioId?: SortOrder
    tipoContrato?: SortOrder
    costoTotal?: SortOrder
    _count?: ContratoCountOrderByAggregateInput
    _avg?: ContratoAvgOrderByAggregateInput
    _max?: ContratoMaxOrderByAggregateInput
    _min?: ContratoMinOrderByAggregateInput
    _sum?: ContratoSumOrderByAggregateInput
  }

  export type ContratoScalarWhereWithAggregatesInput = {
    AND?: ContratoScalarWhereWithAggregatesInput | ContratoScalarWhereWithAggregatesInput[]
    OR?: ContratoScalarWhereWithAggregatesInput[]
    NOT?: ContratoScalarWhereWithAggregatesInput | ContratoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contrato"> | number
    fechaInicio?: DateTimeWithAggregatesFilter<"Contrato"> | Date | string
    fechaFinalizacion?: DateTimeWithAggregatesFilter<"Contrato"> | Date | string
    servicioId?: IntWithAggregatesFilter<"Contrato"> | number
    tipoContrato?: StringWithAggregatesFilter<"Contrato"> | string
    costoTotal?: FloatWithAggregatesFilter<"Contrato"> | number
  }

  export type CalificacionWhereInput = {
    AND?: CalificacionWhereInput | CalificacionWhereInput[]
    OR?: CalificacionWhereInput[]
    NOT?: CalificacionWhereInput | CalificacionWhereInput[]
    id?: IntFilter<"Calificacion"> | number
    puntuacion?: IntFilter<"Calificacion"> | number
    comentarios?: StringFilter<"Calificacion"> | string
    eventoId?: IntFilter<"Calificacion"> | number
    fechaCalificacion?: DateTimeFilter<"Calificacion"> | Date | string
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
  }

  export type CalificacionOrderByWithRelationInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    eventoId?: SortOrder
    fechaCalificacion?: SortOrder
    evento?: EventoOrderByWithRelationInput
  }

  export type CalificacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CalificacionWhereInput | CalificacionWhereInput[]
    OR?: CalificacionWhereInput[]
    NOT?: CalificacionWhereInput | CalificacionWhereInput[]
    puntuacion?: IntFilter<"Calificacion"> | number
    comentarios?: StringFilter<"Calificacion"> | string
    eventoId?: IntFilter<"Calificacion"> | number
    fechaCalificacion?: DateTimeFilter<"Calificacion"> | Date | string
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
  }, "id">

  export type CalificacionOrderByWithAggregationInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    eventoId?: SortOrder
    fechaCalificacion?: SortOrder
    _count?: CalificacionCountOrderByAggregateInput
    _avg?: CalificacionAvgOrderByAggregateInput
    _max?: CalificacionMaxOrderByAggregateInput
    _min?: CalificacionMinOrderByAggregateInput
    _sum?: CalificacionSumOrderByAggregateInput
  }

  export type CalificacionScalarWhereWithAggregatesInput = {
    AND?: CalificacionScalarWhereWithAggregatesInput | CalificacionScalarWhereWithAggregatesInput[]
    OR?: CalificacionScalarWhereWithAggregatesInput[]
    NOT?: CalificacionScalarWhereWithAggregatesInput | CalificacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Calificacion"> | number
    puntuacion?: IntWithAggregatesFilter<"Calificacion"> | number
    comentarios?: StringWithAggregatesFilter<"Calificacion"> | string
    eventoId?: IntWithAggregatesFilter<"Calificacion"> | number
    fechaCalificacion?: DateTimeWithAggregatesFilter<"Calificacion"> | Date | string
  }

  export type CalificacionProveedorWhereInput = {
    AND?: CalificacionProveedorWhereInput | CalificacionProveedorWhereInput[]
    OR?: CalificacionProveedorWhereInput[]
    NOT?: CalificacionProveedorWhereInput | CalificacionProveedorWhereInput[]
    id?: IntFilter<"CalificacionProveedor"> | number
    puntuacion?: IntFilter<"CalificacionProveedor"> | number
    comentarios?: StringFilter<"CalificacionProveedor"> | string
    proveedorId?: IntFilter<"CalificacionProveedor"> | number
    fechaCalificacion?: DateTimeFilter<"CalificacionProveedor"> | Date | string
    proveedor?: XOR<ProveedorRelationFilter, ProveedorWhereInput>
  }

  export type CalificacionProveedorOrderByWithRelationInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    proveedorId?: SortOrder
    fechaCalificacion?: SortOrder
    proveedor?: ProveedorOrderByWithRelationInput
  }

  export type CalificacionProveedorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CalificacionProveedorWhereInput | CalificacionProveedorWhereInput[]
    OR?: CalificacionProveedorWhereInput[]
    NOT?: CalificacionProveedorWhereInput | CalificacionProveedorWhereInput[]
    puntuacion?: IntFilter<"CalificacionProveedor"> | number
    comentarios?: StringFilter<"CalificacionProveedor"> | string
    proveedorId?: IntFilter<"CalificacionProveedor"> | number
    fechaCalificacion?: DateTimeFilter<"CalificacionProveedor"> | Date | string
    proveedor?: XOR<ProveedorRelationFilter, ProveedorWhereInput>
  }, "id">

  export type CalificacionProveedorOrderByWithAggregationInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    proveedorId?: SortOrder
    fechaCalificacion?: SortOrder
    _count?: CalificacionProveedorCountOrderByAggregateInput
    _avg?: CalificacionProveedorAvgOrderByAggregateInput
    _max?: CalificacionProveedorMaxOrderByAggregateInput
    _min?: CalificacionProveedorMinOrderByAggregateInput
    _sum?: CalificacionProveedorSumOrderByAggregateInput
  }

  export type CalificacionProveedorScalarWhereWithAggregatesInput = {
    AND?: CalificacionProveedorScalarWhereWithAggregatesInput | CalificacionProveedorScalarWhereWithAggregatesInput[]
    OR?: CalificacionProveedorScalarWhereWithAggregatesInput[]
    NOT?: CalificacionProveedorScalarWhereWithAggregatesInput | CalificacionProveedorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalificacionProveedor"> | number
    puntuacion?: IntWithAggregatesFilter<"CalificacionProveedor"> | number
    comentarios?: StringWithAggregatesFilter<"CalificacionProveedor"> | string
    proveedorId?: IntWithAggregatesFilter<"CalificacionProveedor"> | number
    fechaCalificacion?: DateTimeWithAggregatesFilter<"CalificacionProveedor"> | Date | string
  }

  export type EventoCreateInput = {
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEvento: TipoEventoCreateNestedOneWithoutEventosInput
    responsable: PersonaCreateNestedOneWithoutEventosInput
    pagos?: PagoCreateNestedManyWithoutEventoInput
    reserva?: ReservaCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
    responsableId: number
    pagos?: PagoUncheckedCreateNestedManyWithoutEventoInput
    reserva?: ReservaUncheckedCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEvento?: TipoEventoUpdateOneRequiredWithoutEventosNestedInput
    responsable?: PersonaUpdateOneRequiredWithoutEventosNestedInput
    pagos?: PagoUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    pagos?: PagoUncheckedUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUncheckedUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoCreateManyInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
    responsableId: number
  }

  export type EventoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
  }

  export type EventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
  }

  export type AsistenteCreateInput = {
    nombre: string
    correo: string
    telefono: string
    cliente?: ClienteCreateNestedOneWithoutAsistentesInput
    metodoPago?: MetodoPagoCreateNestedOneWithoutAsistentesInput
  }

  export type AsistenteUncheckedCreateInput = {
    id?: number
    nombre: string
    correo: string
    telefono: string
    clienteId?: number | null
    metodoPagoId?: number | null
  }

  export type AsistenteUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneWithoutAsistentesNestedInput
    metodoPago?: MetodoPagoUpdateOneWithoutAsistentesNestedInput
  }

  export type AsistenteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    metodoPagoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsistenteCreateManyInput = {
    id?: number
    nombre: string
    correo: string
    telefono: string
    clienteId?: number | null
    metodoPagoId?: number | null
  }

  export type AsistenteUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
  }

  export type AsistenteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    metodoPagoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PagoCreateInput = {
    monto: number
    fechaPago: Date | string
    metodoPago: MetodoPagoCreateNestedOneWithoutPagosInput
    evento: EventoCreateNestedOneWithoutPagosInput
    cliente: ClienteCreateNestedOneWithoutPagosInput
  }

  export type PagoUncheckedCreateInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    metodoPagoId: number
    eventoId: number
    clienteId: number
  }

  export type PagoUpdateInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutPagosNestedInput
    evento?: EventoUpdateOneRequiredWithoutPagosNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutPagosNestedInput
  }

  export type PagoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPagoId?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type PagoCreateManyInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    metodoPagoId: number
    eventoId: number
    clienteId: number
  }

  export type PagoUpdateManyMutationInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPagoId?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type ServicioCreateInput = {
    nombre: string
    costo: number
    reserva: ReservaCreateNestedOneWithoutServiciosInput
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
    Contratos?: ContratoCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateInput = {
    id?: number
    nombre: string
    costo: number
    reservaId: number
    tipoServicioId: number
    Contratos?: ContratoUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reserva?: ReservaUpdateOneRequiredWithoutServiciosNestedInput
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
    Contratos?: ContratoUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    Contratos?: ContratoUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioCreateManyInput = {
    id?: number
    nombre: string
    costo: number
    reservaId: number
    tipoServicioId: number
  }

  export type ServicioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
  }

  export type ServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    tipoServicioId?: IntFieldUpdateOperationsInput | number
  }

  export type ProveedorCreateInput = {
    nombre: string
    contacto: string
    telefono: string
    contrato?: ContratoCreateNestedOneWithoutProveedorInput
    cliente?: ClienteCreateNestedOneWithoutProveedoresInput
    calificaciones?: CalificacionProveedorCreateNestedManyWithoutProveedorInput
  }

  export type ProveedorUncheckedCreateInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    contratoId?: number | null
    clienteId?: number | null
    calificaciones?: CalificacionProveedorUncheckedCreateNestedManyWithoutProveedorInput
  }

  export type ProveedorUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contrato?: ContratoUpdateOneWithoutProveedorNestedInput
    cliente?: ClienteUpdateOneWithoutProveedoresNestedInput
    calificaciones?: CalificacionProveedorUpdateManyWithoutProveedorNestedInput
  }

  export type ProveedorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    calificaciones?: CalificacionProveedorUncheckedUpdateManyWithoutProveedorNestedInput
  }

  export type ProveedorCreateManyInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    contratoId?: number | null
    clienteId?: number | null
  }

  export type ProveedorUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
  }

  export type ProveedorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TipoEventoCreateInput = {
    nombre: string
    descripcion: string
    precioBase: number
    aforoMaximo: number
    duracion: number
    eventos?: EventoCreateNestedManyWithoutTipoEventoInput
  }

  export type TipoEventoUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion: string
    precioBase: number
    aforoMaximo: number
    duracion: number
    eventos?: EventoUncheckedCreateNestedManyWithoutTipoEventoInput
  }

  export type TipoEventoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precioBase?: FloatFieldUpdateOperationsInput | number
    aforoMaximo?: IntFieldUpdateOperationsInput | number
    duracion?: IntFieldUpdateOperationsInput | number
    eventos?: EventoUpdateManyWithoutTipoEventoNestedInput
  }

  export type TipoEventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precioBase?: FloatFieldUpdateOperationsInput | number
    aforoMaximo?: IntFieldUpdateOperationsInput | number
    duracion?: IntFieldUpdateOperationsInput | number
    eventos?: EventoUncheckedUpdateManyWithoutTipoEventoNestedInput
  }

  export type TipoEventoCreateManyInput = {
    id?: number
    nombre: string
    descripcion: string
    precioBase: number
    aforoMaximo: number
    duracion: number
  }

  export type TipoEventoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precioBase?: FloatFieldUpdateOperationsInput | number
    aforoMaximo?: IntFieldUpdateOperationsInput | number
    duracion?: IntFieldUpdateOperationsInput | number
  }

  export type TipoEventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precioBase?: FloatFieldUpdateOperationsInput | number
    aforoMaximo?: IntFieldUpdateOperationsInput | number
    duracion?: IntFieldUpdateOperationsInput | number
  }

  export type PersonaCreateInput = {
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    eventos?: EventoCreateNestedManyWithoutResponsableInput
  }

  export type PersonaUncheckedCreateInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    eventos?: EventoUncheckedCreateNestedManyWithoutResponsableInput
  }

  export type PersonaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    eventos?: EventoUpdateManyWithoutResponsableNestedInput
  }

  export type PersonaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    eventos?: EventoUncheckedUpdateManyWithoutResponsableNestedInput
  }

  export type PersonaCreateManyInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
  }

  export type PersonaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
  }

  export type PersonaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
  }

  export type MetodoPagoCreateInput = {
    nombre: string
    pagos?: PagoCreateNestedManyWithoutMetodoPagoInput
    asistentes?: AsistenteCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateInput = {
    id?: number
    nombre: string
    pagos?: PagoUncheckedCreateNestedManyWithoutMetodoPagoInput
    asistentes?: AsistenteUncheckedCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    pagos?: PagoUpdateManyWithoutMetodoPagoNestedInput
    asistentes?: AsistenteUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    pagos?: PagoUncheckedUpdateManyWithoutMetodoPagoNestedInput
    asistentes?: AsistenteUncheckedUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoCreateManyInput = {
    id?: number
    nombre: string
  }

  export type MetodoPagoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type MetodoPagoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateInput = {
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    asistentes?: AsistenteCreateNestedManyWithoutClienteInput
    pagos?: PagoCreateNestedManyWithoutClienteInput
    proveedores?: ProveedorCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    asistentes?: AsistenteUncheckedCreateNestedManyWithoutClienteInput
    pagos?: PagoUncheckedCreateNestedManyWithoutClienteInput
    proveedores?: ProveedorUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUpdateManyWithoutClienteNestedInput
    pagos?: PagoUpdateManyWithoutClienteNestedInput
    proveedores?: ProveedorUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUncheckedUpdateManyWithoutClienteNestedInput
    pagos?: PagoUncheckedUpdateManyWithoutClienteNestedInput
    proveedores?: ProveedorUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
  }

  export type ClienteUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
  }

  export type ReservaCreateInput = {
    fechaReserva: Date | string
    horaReserva: string
    duracionReserva: number
    evento: EventoCreateNestedOneWithoutReservaInput
    servicios?: ServicioCreateNestedManyWithoutReservaInput
  }

  export type ReservaUncheckedCreateInput = {
    id?: number
    fechaReserva: Date | string
    horaReserva: string
    eventoId: number
    duracionReserva: number
    servicios?: ServicioUncheckedCreateNestedManyWithoutReservaInput
  }

  export type ReservaUpdateInput = {
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    duracionReserva?: IntFieldUpdateOperationsInput | number
    evento?: EventoUpdateOneRequiredWithoutReservaNestedInput
    servicios?: ServicioUpdateManyWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    eventoId?: IntFieldUpdateOperationsInput | number
    duracionReserva?: IntFieldUpdateOperationsInput | number
    servicios?: ServicioUncheckedUpdateManyWithoutReservaNestedInput
  }

  export type ReservaCreateManyInput = {
    id?: number
    fechaReserva: Date | string
    horaReserva: string
    eventoId: number
    duracionReserva: number
  }

  export type ReservaUpdateManyMutationInput = {
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    duracionReserva?: IntFieldUpdateOperationsInput | number
  }

  export type ReservaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    eventoId?: IntFieldUpdateOperationsInput | number
    duracionReserva?: IntFieldUpdateOperationsInput | number
  }

  export type TipoServicioCreateInput = {
    nombre: string
    descripcion: string
    servicios?: ServicioCreateNestedManyWithoutTipoServicioInput
  }

  export type TipoServicioUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion: string
    servicios?: ServicioUncheckedCreateNestedManyWithoutTipoServicioInput
  }

  export type TipoServicioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    servicios?: ServicioUpdateManyWithoutTipoServicioNestedInput
  }

  export type TipoServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    servicios?: ServicioUncheckedUpdateManyWithoutTipoServicioNestedInput
  }

  export type TipoServicioCreateManyInput = {
    id?: number
    nombre: string
    descripcion: string
  }

  export type TipoServicioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type TipoServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ContratoCreateInput = {
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    tipoContrato: string
    costoTotal: number
    servicio: ServicioCreateNestedOneWithoutContratosInput
    proveedor?: ProveedorCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateInput = {
    id?: number
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    servicioId: number
    tipoContrato: string
    costoTotal: number
    proveedor?: ProveedorUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoUpdateInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
    servicio?: ServicioUpdateOneRequiredWithoutContratosNestedInput
    proveedor?: ProveedorUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    servicioId?: IntFieldUpdateOperationsInput | number
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
    proveedor?: ProveedorUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoCreateManyInput = {
    id?: number
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    servicioId: number
    tipoContrato: string
    costoTotal: number
  }

  export type ContratoUpdateManyMutationInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type ContratoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    servicioId?: IntFieldUpdateOperationsInput | number
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CalificacionCreateInput = {
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
    evento: EventoCreateNestedOneWithoutCalificacionInput
  }

  export type CalificacionUncheckedCreateInput = {
    id?: number
    puntuacion: number
    comentarios: string
    eventoId: number
    fechaCalificacion: Date | string
  }

  export type CalificacionUpdateInput = {
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    evento?: EventoUpdateOneRequiredWithoutCalificacionNestedInput
  }

  export type CalificacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    eventoId?: IntFieldUpdateOperationsInput | number
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionCreateManyInput = {
    id?: number
    puntuacion: number
    comentarios: string
    eventoId: number
    fechaCalificacion: Date | string
  }

  export type CalificacionUpdateManyMutationInput = {
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    eventoId?: IntFieldUpdateOperationsInput | number
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionProveedorCreateInput = {
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
    proveedor: ProveedorCreateNestedOneWithoutCalificacionesInput
  }

  export type CalificacionProveedorUncheckedCreateInput = {
    id?: number
    puntuacion: number
    comentarios: string
    proveedorId: number
    fechaCalificacion: Date | string
  }

  export type CalificacionProveedorUpdateInput = {
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: ProveedorUpdateOneRequiredWithoutCalificacionesNestedInput
  }

  export type CalificacionProveedorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    proveedorId?: IntFieldUpdateOperationsInput | number
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionProveedorCreateManyInput = {
    id?: number
    puntuacion: number
    comentarios: string
    proveedorId: number
    fechaCalificacion: Date | string
  }

  export type CalificacionProveedorUpdateManyMutationInput = {
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionProveedorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    proveedorId?: IntFieldUpdateOperationsInput | number
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TipoEventoRelationFilter = {
    is?: TipoEventoWhereInput
    isNot?: TipoEventoWhereInput
  }

  export type PersonaRelationFilter = {
    is?: PersonaWhereInput
    isNot?: PersonaWhereInput
  }

  export type PagoListRelationFilter = {
    every?: PagoWhereInput
    some?: PagoWhereInput
    none?: PagoWhereInput
  }

  export type ReservaListRelationFilter = {
    every?: ReservaWhereInput
    some?: ReservaWhereInput
    none?: ReservaWhereInput
  }

  export type CalificacionListRelationFilter = {
    every?: CalificacionWhereInput
    some?: CalificacionWhereInput
    none?: CalificacionWhereInput
  }

  export type PagoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalificacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    lugar?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
  }

  export type EventoAvgOrderByAggregateInput = {
    id?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
  }

  export type EventoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    lugar?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
  }

  export type EventoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    lugar?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
  }

  export type EventoSumOrderByAggregateInput = {
    id?: SortOrder
    tipoEventoId?: SortOrder
    responsableId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ClienteNullableRelationFilter = {
    is?: ClienteWhereInput | null
    isNot?: ClienteWhereInput | null
  }

  export type MetodoPagoNullableRelationFilter = {
    is?: MetodoPagoWhereInput | null
    isNot?: MetodoPagoWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AsistenteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    clienteId?: SortOrder
    metodoPagoId?: SortOrder
  }

  export type AsistenteAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    metodoPagoId?: SortOrder
  }

  export type AsistenteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    clienteId?: SortOrder
    metodoPagoId?: SortOrder
  }

  export type AsistenteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    clienteId?: SortOrder
    metodoPagoId?: SortOrder
  }

  export type AsistenteSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    metodoPagoId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MetodoPagoRelationFilter = {
    is?: MetodoPagoWhereInput
    isNot?: MetodoPagoWhereInput
  }

  export type EventoRelationFilter = {
    is?: EventoWhereInput
    isNot?: EventoWhereInput
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type PagoCountOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    fechaPago?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
  }

  export type PagoAvgOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
  }

  export type PagoMaxOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    fechaPago?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
  }

  export type PagoMinOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    fechaPago?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
  }

  export type PagoSumOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    metodoPagoId?: SortOrder
    eventoId?: SortOrder
    clienteId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ReservaRelationFilter = {
    is?: ReservaWhereInput
    isNot?: ReservaWhereInput
  }

  export type TipoServicioRelationFilter = {
    is?: TipoServicioWhereInput
    isNot?: TipoServicioWhereInput
  }

  export type ContratoListRelationFilter = {
    every?: ContratoWhereInput
    some?: ContratoWhereInput
    none?: ContratoWhereInput
  }

  export type ContratoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
  }

  export type ServicioAvgOrderByAggregateInput = {
    id?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
  }

  export type ServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
  }

  export type ServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
  }

  export type ServicioSumOrderByAggregateInput = {
    id?: SortOrder
    costo?: SortOrder
    reservaId?: SortOrder
    tipoServicioId?: SortOrder
  }

  export type ContratoNullableRelationFilter = {
    is?: ContratoWhereInput | null
    isNot?: ContratoWhereInput | null
  }

  export type CalificacionProveedorListRelationFilter = {
    every?: CalificacionProveedorWhereInput
    some?: CalificacionProveedorWhereInput
    none?: CalificacionProveedorWhereInput
  }

  export type CalificacionProveedorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProveedorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    contacto?: SortOrder
    telefono?: SortOrder
    contratoId?: SortOrder
    clienteId?: SortOrder
  }

  export type ProveedorAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    clienteId?: SortOrder
  }

  export type ProveedorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    contacto?: SortOrder
    telefono?: SortOrder
    contratoId?: SortOrder
    clienteId?: SortOrder
  }

  export type ProveedorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    contacto?: SortOrder
    telefono?: SortOrder
    contratoId?: SortOrder
    clienteId?: SortOrder
  }

  export type ProveedorSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    clienteId?: SortOrder
  }

  export type EventoListRelationFilter = {
    every?: EventoWhereInput
    some?: EventoWhereInput
    none?: EventoWhereInput
  }

  export type EventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TipoEventoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
  }

  export type TipoEventoAvgOrderByAggregateInput = {
    id?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
  }

  export type TipoEventoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
  }

  export type TipoEventoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
  }

  export type TipoEventoSumOrderByAggregateInput = {
    id?: SortOrder
    precioBase?: SortOrder
    aforoMaximo?: SortOrder
    duracion?: SortOrder
  }

  export type PersonaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
  }

  export type PersonaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
  }

  export type PersonaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
  }

  export type PersonaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AsistenteListRelationFilter = {
    every?: AsistenteWhereInput
    some?: AsistenteWhereInput
    none?: AsistenteWhereInput
  }

  export type AsistenteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetodoPagoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type MetodoPagoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MetodoPagoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type MetodoPagoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type MetodoPagoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProveedorListRelationFilter = {
    every?: ProveedorWhereInput
    some?: ProveedorWhereInput
    none?: ProveedorWhereInput
  }

  export type ProveedorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServicioListRelationFilter = {
    every?: ServicioWhereInput
    some?: ServicioWhereInput
    none?: ServicioWhereInput
  }

  export type ServicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservaCountOrderByAggregateInput = {
    id?: SortOrder
    fechaReserva?: SortOrder
    horaReserva?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
  }

  export type ReservaAvgOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
  }

  export type ReservaMaxOrderByAggregateInput = {
    id?: SortOrder
    fechaReserva?: SortOrder
    horaReserva?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
  }

  export type ReservaMinOrderByAggregateInput = {
    id?: SortOrder
    fechaReserva?: SortOrder
    horaReserva?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
  }

  export type ReservaSumOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
    duracionReserva?: SortOrder
  }

  export type TipoServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type TipoServicioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type TipoServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type TipoServicioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServicioRelationFilter = {
    is?: ServicioWhereInput
    isNot?: ServicioWhereInput
  }

  export type ContratoCountOrderByAggregateInput = {
    id?: SortOrder
    fechaInicio?: SortOrder
    fechaFinalizacion?: SortOrder
    servicioId?: SortOrder
    tipoContrato?: SortOrder
    costoTotal?: SortOrder
  }

  export type ContratoAvgOrderByAggregateInput = {
    id?: SortOrder
    servicioId?: SortOrder
    costoTotal?: SortOrder
  }

  export type ContratoMaxOrderByAggregateInput = {
    id?: SortOrder
    fechaInicio?: SortOrder
    fechaFinalizacion?: SortOrder
    servicioId?: SortOrder
    tipoContrato?: SortOrder
    costoTotal?: SortOrder
  }

  export type ContratoMinOrderByAggregateInput = {
    id?: SortOrder
    fechaInicio?: SortOrder
    fechaFinalizacion?: SortOrder
    servicioId?: SortOrder
    tipoContrato?: SortOrder
    costoTotal?: SortOrder
  }

  export type ContratoSumOrderByAggregateInput = {
    id?: SortOrder
    servicioId?: SortOrder
    costoTotal?: SortOrder
  }

  export type CalificacionCountOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    eventoId?: SortOrder
    fechaCalificacion?: SortOrder
  }

  export type CalificacionAvgOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    eventoId?: SortOrder
  }

  export type CalificacionMaxOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    eventoId?: SortOrder
    fechaCalificacion?: SortOrder
  }

  export type CalificacionMinOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    eventoId?: SortOrder
    fechaCalificacion?: SortOrder
  }

  export type CalificacionSumOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    eventoId?: SortOrder
  }

  export type ProveedorRelationFilter = {
    is?: ProveedorWhereInput
    isNot?: ProveedorWhereInput
  }

  export type CalificacionProveedorCountOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    proveedorId?: SortOrder
    fechaCalificacion?: SortOrder
  }

  export type CalificacionProveedorAvgOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    proveedorId?: SortOrder
  }

  export type CalificacionProveedorMaxOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    proveedorId?: SortOrder
    fechaCalificacion?: SortOrder
  }

  export type CalificacionProveedorMinOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    comentarios?: SortOrder
    proveedorId?: SortOrder
    fechaCalificacion?: SortOrder
  }

  export type CalificacionProveedorSumOrderByAggregateInput = {
    id?: SortOrder
    puntuacion?: SortOrder
    proveedorId?: SortOrder
  }

  export type TipoEventoCreateNestedOneWithoutEventosInput = {
    create?: XOR<TipoEventoCreateWithoutEventosInput, TipoEventoUncheckedCreateWithoutEventosInput>
    connectOrCreate?: TipoEventoCreateOrConnectWithoutEventosInput
    connect?: TipoEventoWhereUniqueInput
  }

  export type PersonaCreateNestedOneWithoutEventosInput = {
    create?: XOR<PersonaCreateWithoutEventosInput, PersonaUncheckedCreateWithoutEventosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutEventosInput
    connect?: PersonaWhereUniqueInput
  }

  export type PagoCreateNestedManyWithoutEventoInput = {
    create?: XOR<PagoCreateWithoutEventoInput, PagoUncheckedCreateWithoutEventoInput> | PagoCreateWithoutEventoInput[] | PagoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutEventoInput | PagoCreateOrConnectWithoutEventoInput[]
    createMany?: PagoCreateManyEventoInputEnvelope
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
  }

  export type ReservaCreateNestedManyWithoutEventoInput = {
    create?: XOR<ReservaCreateWithoutEventoInput, ReservaUncheckedCreateWithoutEventoInput> | ReservaCreateWithoutEventoInput[] | ReservaUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutEventoInput | ReservaCreateOrConnectWithoutEventoInput[]
    createMany?: ReservaCreateManyEventoInputEnvelope
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
  }

  export type CalificacionCreateNestedManyWithoutEventoInput = {
    create?: XOR<CalificacionCreateWithoutEventoInput, CalificacionUncheckedCreateWithoutEventoInput> | CalificacionCreateWithoutEventoInput[] | CalificacionUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: CalificacionCreateOrConnectWithoutEventoInput | CalificacionCreateOrConnectWithoutEventoInput[]
    createMany?: CalificacionCreateManyEventoInputEnvelope
    connect?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
  }

  export type PagoUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<PagoCreateWithoutEventoInput, PagoUncheckedCreateWithoutEventoInput> | PagoCreateWithoutEventoInput[] | PagoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutEventoInput | PagoCreateOrConnectWithoutEventoInput[]
    createMany?: PagoCreateManyEventoInputEnvelope
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
  }

  export type ReservaUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<ReservaCreateWithoutEventoInput, ReservaUncheckedCreateWithoutEventoInput> | ReservaCreateWithoutEventoInput[] | ReservaUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutEventoInput | ReservaCreateOrConnectWithoutEventoInput[]
    createMany?: ReservaCreateManyEventoInputEnvelope
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
  }

  export type CalificacionUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<CalificacionCreateWithoutEventoInput, CalificacionUncheckedCreateWithoutEventoInput> | CalificacionCreateWithoutEventoInput[] | CalificacionUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: CalificacionCreateOrConnectWithoutEventoInput | CalificacionCreateOrConnectWithoutEventoInput[]
    createMany?: CalificacionCreateManyEventoInputEnvelope
    connect?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TipoEventoUpdateOneRequiredWithoutEventosNestedInput = {
    create?: XOR<TipoEventoCreateWithoutEventosInput, TipoEventoUncheckedCreateWithoutEventosInput>
    connectOrCreate?: TipoEventoCreateOrConnectWithoutEventosInput
    upsert?: TipoEventoUpsertWithoutEventosInput
    connect?: TipoEventoWhereUniqueInput
    update?: XOR<XOR<TipoEventoUpdateToOneWithWhereWithoutEventosInput, TipoEventoUpdateWithoutEventosInput>, TipoEventoUncheckedUpdateWithoutEventosInput>
  }

  export type PersonaUpdateOneRequiredWithoutEventosNestedInput = {
    create?: XOR<PersonaCreateWithoutEventosInput, PersonaUncheckedCreateWithoutEventosInput>
    connectOrCreate?: PersonaCreateOrConnectWithoutEventosInput
    upsert?: PersonaUpsertWithoutEventosInput
    connect?: PersonaWhereUniqueInput
    update?: XOR<XOR<PersonaUpdateToOneWithWhereWithoutEventosInput, PersonaUpdateWithoutEventosInput>, PersonaUncheckedUpdateWithoutEventosInput>
  }

  export type PagoUpdateManyWithoutEventoNestedInput = {
    create?: XOR<PagoCreateWithoutEventoInput, PagoUncheckedCreateWithoutEventoInput> | PagoCreateWithoutEventoInput[] | PagoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutEventoInput | PagoCreateOrConnectWithoutEventoInput[]
    upsert?: PagoUpsertWithWhereUniqueWithoutEventoInput | PagoUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: PagoCreateManyEventoInputEnvelope
    set?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    disconnect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    delete?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    update?: PagoUpdateWithWhereUniqueWithoutEventoInput | PagoUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: PagoUpdateManyWithWhereWithoutEventoInput | PagoUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: PagoScalarWhereInput | PagoScalarWhereInput[]
  }

  export type ReservaUpdateManyWithoutEventoNestedInput = {
    create?: XOR<ReservaCreateWithoutEventoInput, ReservaUncheckedCreateWithoutEventoInput> | ReservaCreateWithoutEventoInput[] | ReservaUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutEventoInput | ReservaCreateOrConnectWithoutEventoInput[]
    upsert?: ReservaUpsertWithWhereUniqueWithoutEventoInput | ReservaUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: ReservaCreateManyEventoInputEnvelope
    set?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    disconnect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    delete?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    update?: ReservaUpdateWithWhereUniqueWithoutEventoInput | ReservaUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: ReservaUpdateManyWithWhereWithoutEventoInput | ReservaUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
  }

  export type CalificacionUpdateManyWithoutEventoNestedInput = {
    create?: XOR<CalificacionCreateWithoutEventoInput, CalificacionUncheckedCreateWithoutEventoInput> | CalificacionCreateWithoutEventoInput[] | CalificacionUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: CalificacionCreateOrConnectWithoutEventoInput | CalificacionCreateOrConnectWithoutEventoInput[]
    upsert?: CalificacionUpsertWithWhereUniqueWithoutEventoInput | CalificacionUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: CalificacionCreateManyEventoInputEnvelope
    set?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    disconnect?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    delete?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    connect?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    update?: CalificacionUpdateWithWhereUniqueWithoutEventoInput | CalificacionUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: CalificacionUpdateManyWithWhereWithoutEventoInput | CalificacionUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: CalificacionScalarWhereInput | CalificacionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PagoUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<PagoCreateWithoutEventoInput, PagoUncheckedCreateWithoutEventoInput> | PagoCreateWithoutEventoInput[] | PagoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutEventoInput | PagoCreateOrConnectWithoutEventoInput[]
    upsert?: PagoUpsertWithWhereUniqueWithoutEventoInput | PagoUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: PagoCreateManyEventoInputEnvelope
    set?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    disconnect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    delete?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    update?: PagoUpdateWithWhereUniqueWithoutEventoInput | PagoUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: PagoUpdateManyWithWhereWithoutEventoInput | PagoUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: PagoScalarWhereInput | PagoScalarWhereInput[]
  }

  export type ReservaUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<ReservaCreateWithoutEventoInput, ReservaUncheckedCreateWithoutEventoInput> | ReservaCreateWithoutEventoInput[] | ReservaUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutEventoInput | ReservaCreateOrConnectWithoutEventoInput[]
    upsert?: ReservaUpsertWithWhereUniqueWithoutEventoInput | ReservaUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: ReservaCreateManyEventoInputEnvelope
    set?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    disconnect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    delete?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    update?: ReservaUpdateWithWhereUniqueWithoutEventoInput | ReservaUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: ReservaUpdateManyWithWhereWithoutEventoInput | ReservaUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
  }

  export type CalificacionUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<CalificacionCreateWithoutEventoInput, CalificacionUncheckedCreateWithoutEventoInput> | CalificacionCreateWithoutEventoInput[] | CalificacionUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: CalificacionCreateOrConnectWithoutEventoInput | CalificacionCreateOrConnectWithoutEventoInput[]
    upsert?: CalificacionUpsertWithWhereUniqueWithoutEventoInput | CalificacionUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: CalificacionCreateManyEventoInputEnvelope
    set?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    disconnect?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    delete?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    connect?: CalificacionWhereUniqueInput | CalificacionWhereUniqueInput[]
    update?: CalificacionUpdateWithWhereUniqueWithoutEventoInput | CalificacionUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: CalificacionUpdateManyWithWhereWithoutEventoInput | CalificacionUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: CalificacionScalarWhereInput | CalificacionScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutAsistentesInput = {
    create?: XOR<ClienteCreateWithoutAsistentesInput, ClienteUncheckedCreateWithoutAsistentesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutAsistentesInput
    connect?: ClienteWhereUniqueInput
  }

  export type MetodoPagoCreateNestedOneWithoutAsistentesInput = {
    create?: XOR<MetodoPagoCreateWithoutAsistentesInput, MetodoPagoUncheckedCreateWithoutAsistentesInput>
    connectOrCreate?: MetodoPagoCreateOrConnectWithoutAsistentesInput
    connect?: MetodoPagoWhereUniqueInput
  }

  export type ClienteUpdateOneWithoutAsistentesNestedInput = {
    create?: XOR<ClienteCreateWithoutAsistentesInput, ClienteUncheckedCreateWithoutAsistentesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutAsistentesInput
    upsert?: ClienteUpsertWithoutAsistentesInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutAsistentesInput, ClienteUpdateWithoutAsistentesInput>, ClienteUncheckedUpdateWithoutAsistentesInput>
  }

  export type MetodoPagoUpdateOneWithoutAsistentesNestedInput = {
    create?: XOR<MetodoPagoCreateWithoutAsistentesInput, MetodoPagoUncheckedCreateWithoutAsistentesInput>
    connectOrCreate?: MetodoPagoCreateOrConnectWithoutAsistentesInput
    upsert?: MetodoPagoUpsertWithoutAsistentesInput
    disconnect?: MetodoPagoWhereInput | boolean
    delete?: MetodoPagoWhereInput | boolean
    connect?: MetodoPagoWhereUniqueInput
    update?: XOR<XOR<MetodoPagoUpdateToOneWithWhereWithoutAsistentesInput, MetodoPagoUpdateWithoutAsistentesInput>, MetodoPagoUncheckedUpdateWithoutAsistentesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MetodoPagoCreateNestedOneWithoutPagosInput = {
    create?: XOR<MetodoPagoCreateWithoutPagosInput, MetodoPagoUncheckedCreateWithoutPagosInput>
    connectOrCreate?: MetodoPagoCreateOrConnectWithoutPagosInput
    connect?: MetodoPagoWhereUniqueInput
  }

  export type EventoCreateNestedOneWithoutPagosInput = {
    create?: XOR<EventoCreateWithoutPagosInput, EventoUncheckedCreateWithoutPagosInput>
    connectOrCreate?: EventoCreateOrConnectWithoutPagosInput
    connect?: EventoWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutPagosInput = {
    create?: XOR<ClienteCreateWithoutPagosInput, ClienteUncheckedCreateWithoutPagosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutPagosInput
    connect?: ClienteWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MetodoPagoUpdateOneRequiredWithoutPagosNestedInput = {
    create?: XOR<MetodoPagoCreateWithoutPagosInput, MetodoPagoUncheckedCreateWithoutPagosInput>
    connectOrCreate?: MetodoPagoCreateOrConnectWithoutPagosInput
    upsert?: MetodoPagoUpsertWithoutPagosInput
    connect?: MetodoPagoWhereUniqueInput
    update?: XOR<XOR<MetodoPagoUpdateToOneWithWhereWithoutPagosInput, MetodoPagoUpdateWithoutPagosInput>, MetodoPagoUncheckedUpdateWithoutPagosInput>
  }

  export type EventoUpdateOneRequiredWithoutPagosNestedInput = {
    create?: XOR<EventoCreateWithoutPagosInput, EventoUncheckedCreateWithoutPagosInput>
    connectOrCreate?: EventoCreateOrConnectWithoutPagosInput
    upsert?: EventoUpsertWithoutPagosInput
    connect?: EventoWhereUniqueInput
    update?: XOR<XOR<EventoUpdateToOneWithWhereWithoutPagosInput, EventoUpdateWithoutPagosInput>, EventoUncheckedUpdateWithoutPagosInput>
  }

  export type ClienteUpdateOneRequiredWithoutPagosNestedInput = {
    create?: XOR<ClienteCreateWithoutPagosInput, ClienteUncheckedCreateWithoutPagosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutPagosInput
    upsert?: ClienteUpsertWithoutPagosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutPagosInput, ClienteUpdateWithoutPagosInput>, ClienteUncheckedUpdateWithoutPagosInput>
  }

  export type ReservaCreateNestedOneWithoutServiciosInput = {
    create?: XOR<ReservaCreateWithoutServiciosInput, ReservaUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: ReservaCreateOrConnectWithoutServiciosInput
    connect?: ReservaWhereUniqueInput
  }

  export type TipoServicioCreateNestedOneWithoutServiciosInput = {
    create?: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: TipoServicioCreateOrConnectWithoutServiciosInput
    connect?: TipoServicioWhereUniqueInput
  }

  export type ContratoCreateNestedManyWithoutServicioInput = {
    create?: XOR<ContratoCreateWithoutServicioInput, ContratoUncheckedCreateWithoutServicioInput> | ContratoCreateWithoutServicioInput[] | ContratoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ContratoCreateOrConnectWithoutServicioInput | ContratoCreateOrConnectWithoutServicioInput[]
    createMany?: ContratoCreateManyServicioInputEnvelope
    connect?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
  }

  export type ContratoUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<ContratoCreateWithoutServicioInput, ContratoUncheckedCreateWithoutServicioInput> | ContratoCreateWithoutServicioInput[] | ContratoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ContratoCreateOrConnectWithoutServicioInput | ContratoCreateOrConnectWithoutServicioInput[]
    createMany?: ContratoCreateManyServicioInputEnvelope
    connect?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
  }

  export type ReservaUpdateOneRequiredWithoutServiciosNestedInput = {
    create?: XOR<ReservaCreateWithoutServiciosInput, ReservaUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: ReservaCreateOrConnectWithoutServiciosInput
    upsert?: ReservaUpsertWithoutServiciosInput
    connect?: ReservaWhereUniqueInput
    update?: XOR<XOR<ReservaUpdateToOneWithWhereWithoutServiciosInput, ReservaUpdateWithoutServiciosInput>, ReservaUncheckedUpdateWithoutServiciosInput>
  }

  export type TipoServicioUpdateOneRequiredWithoutServiciosNestedInput = {
    create?: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: TipoServicioCreateOrConnectWithoutServiciosInput
    upsert?: TipoServicioUpsertWithoutServiciosInput
    connect?: TipoServicioWhereUniqueInput
    update?: XOR<XOR<TipoServicioUpdateToOneWithWhereWithoutServiciosInput, TipoServicioUpdateWithoutServiciosInput>, TipoServicioUncheckedUpdateWithoutServiciosInput>
  }

  export type ContratoUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ContratoCreateWithoutServicioInput, ContratoUncheckedCreateWithoutServicioInput> | ContratoCreateWithoutServicioInput[] | ContratoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ContratoCreateOrConnectWithoutServicioInput | ContratoCreateOrConnectWithoutServicioInput[]
    upsert?: ContratoUpsertWithWhereUniqueWithoutServicioInput | ContratoUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ContratoCreateManyServicioInputEnvelope
    set?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    disconnect?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    delete?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    connect?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    update?: ContratoUpdateWithWhereUniqueWithoutServicioInput | ContratoUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ContratoUpdateManyWithWhereWithoutServicioInput | ContratoUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ContratoScalarWhereInput | ContratoScalarWhereInput[]
  }

  export type ContratoUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ContratoCreateWithoutServicioInput, ContratoUncheckedCreateWithoutServicioInput> | ContratoCreateWithoutServicioInput[] | ContratoUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ContratoCreateOrConnectWithoutServicioInput | ContratoCreateOrConnectWithoutServicioInput[]
    upsert?: ContratoUpsertWithWhereUniqueWithoutServicioInput | ContratoUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ContratoCreateManyServicioInputEnvelope
    set?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    disconnect?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    delete?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    connect?: ContratoWhereUniqueInput | ContratoWhereUniqueInput[]
    update?: ContratoUpdateWithWhereUniqueWithoutServicioInput | ContratoUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ContratoUpdateManyWithWhereWithoutServicioInput | ContratoUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ContratoScalarWhereInput | ContratoScalarWhereInput[]
  }

  export type ContratoCreateNestedOneWithoutProveedorInput = {
    create?: XOR<ContratoCreateWithoutProveedorInput, ContratoUncheckedCreateWithoutProveedorInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutProveedorInput
    connect?: ContratoWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutProveedoresInput = {
    create?: XOR<ClienteCreateWithoutProveedoresInput, ClienteUncheckedCreateWithoutProveedoresInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutProveedoresInput
    connect?: ClienteWhereUniqueInput
  }

  export type CalificacionProveedorCreateNestedManyWithoutProveedorInput = {
    create?: XOR<CalificacionProveedorCreateWithoutProveedorInput, CalificacionProveedorUncheckedCreateWithoutProveedorInput> | CalificacionProveedorCreateWithoutProveedorInput[] | CalificacionProveedorUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: CalificacionProveedorCreateOrConnectWithoutProveedorInput | CalificacionProveedorCreateOrConnectWithoutProveedorInput[]
    createMany?: CalificacionProveedorCreateManyProveedorInputEnvelope
    connect?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
  }

  export type CalificacionProveedorUncheckedCreateNestedManyWithoutProveedorInput = {
    create?: XOR<CalificacionProveedorCreateWithoutProveedorInput, CalificacionProveedorUncheckedCreateWithoutProveedorInput> | CalificacionProveedorCreateWithoutProveedorInput[] | CalificacionProveedorUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: CalificacionProveedorCreateOrConnectWithoutProveedorInput | CalificacionProveedorCreateOrConnectWithoutProveedorInput[]
    createMany?: CalificacionProveedorCreateManyProveedorInputEnvelope
    connect?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
  }

  export type ContratoUpdateOneWithoutProveedorNestedInput = {
    create?: XOR<ContratoCreateWithoutProveedorInput, ContratoUncheckedCreateWithoutProveedorInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutProveedorInput
    upsert?: ContratoUpsertWithoutProveedorInput
    disconnect?: ContratoWhereInput | boolean
    delete?: ContratoWhereInput | boolean
    connect?: ContratoWhereUniqueInput
    update?: XOR<XOR<ContratoUpdateToOneWithWhereWithoutProveedorInput, ContratoUpdateWithoutProveedorInput>, ContratoUncheckedUpdateWithoutProveedorInput>
  }

  export type ClienteUpdateOneWithoutProveedoresNestedInput = {
    create?: XOR<ClienteCreateWithoutProveedoresInput, ClienteUncheckedCreateWithoutProveedoresInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutProveedoresInput
    upsert?: ClienteUpsertWithoutProveedoresInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutProveedoresInput, ClienteUpdateWithoutProveedoresInput>, ClienteUncheckedUpdateWithoutProveedoresInput>
  }

  export type CalificacionProveedorUpdateManyWithoutProveedorNestedInput = {
    create?: XOR<CalificacionProveedorCreateWithoutProveedorInput, CalificacionProveedorUncheckedCreateWithoutProveedorInput> | CalificacionProveedorCreateWithoutProveedorInput[] | CalificacionProveedorUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: CalificacionProveedorCreateOrConnectWithoutProveedorInput | CalificacionProveedorCreateOrConnectWithoutProveedorInput[]
    upsert?: CalificacionProveedorUpsertWithWhereUniqueWithoutProveedorInput | CalificacionProveedorUpsertWithWhereUniqueWithoutProveedorInput[]
    createMany?: CalificacionProveedorCreateManyProveedorInputEnvelope
    set?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    disconnect?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    delete?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    connect?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    update?: CalificacionProveedorUpdateWithWhereUniqueWithoutProveedorInput | CalificacionProveedorUpdateWithWhereUniqueWithoutProveedorInput[]
    updateMany?: CalificacionProveedorUpdateManyWithWhereWithoutProveedorInput | CalificacionProveedorUpdateManyWithWhereWithoutProveedorInput[]
    deleteMany?: CalificacionProveedorScalarWhereInput | CalificacionProveedorScalarWhereInput[]
  }

  export type CalificacionProveedorUncheckedUpdateManyWithoutProveedorNestedInput = {
    create?: XOR<CalificacionProveedorCreateWithoutProveedorInput, CalificacionProveedorUncheckedCreateWithoutProveedorInput> | CalificacionProveedorCreateWithoutProveedorInput[] | CalificacionProveedorUncheckedCreateWithoutProveedorInput[]
    connectOrCreate?: CalificacionProveedorCreateOrConnectWithoutProveedorInput | CalificacionProveedorCreateOrConnectWithoutProveedorInput[]
    upsert?: CalificacionProveedorUpsertWithWhereUniqueWithoutProveedorInput | CalificacionProveedorUpsertWithWhereUniqueWithoutProveedorInput[]
    createMany?: CalificacionProveedorCreateManyProveedorInputEnvelope
    set?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    disconnect?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    delete?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    connect?: CalificacionProveedorWhereUniqueInput | CalificacionProveedorWhereUniqueInput[]
    update?: CalificacionProveedorUpdateWithWhereUniqueWithoutProveedorInput | CalificacionProveedorUpdateWithWhereUniqueWithoutProveedorInput[]
    updateMany?: CalificacionProveedorUpdateManyWithWhereWithoutProveedorInput | CalificacionProveedorUpdateManyWithWhereWithoutProveedorInput[]
    deleteMany?: CalificacionProveedorScalarWhereInput | CalificacionProveedorScalarWhereInput[]
  }

  export type EventoCreateNestedManyWithoutTipoEventoInput = {
    create?: XOR<EventoCreateWithoutTipoEventoInput, EventoUncheckedCreateWithoutTipoEventoInput> | EventoCreateWithoutTipoEventoInput[] | EventoUncheckedCreateWithoutTipoEventoInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutTipoEventoInput | EventoCreateOrConnectWithoutTipoEventoInput[]
    createMany?: EventoCreateManyTipoEventoInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type EventoUncheckedCreateNestedManyWithoutTipoEventoInput = {
    create?: XOR<EventoCreateWithoutTipoEventoInput, EventoUncheckedCreateWithoutTipoEventoInput> | EventoCreateWithoutTipoEventoInput[] | EventoUncheckedCreateWithoutTipoEventoInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutTipoEventoInput | EventoCreateOrConnectWithoutTipoEventoInput[]
    createMany?: EventoCreateManyTipoEventoInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type EventoUpdateManyWithoutTipoEventoNestedInput = {
    create?: XOR<EventoCreateWithoutTipoEventoInput, EventoUncheckedCreateWithoutTipoEventoInput> | EventoCreateWithoutTipoEventoInput[] | EventoUncheckedCreateWithoutTipoEventoInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutTipoEventoInput | EventoCreateOrConnectWithoutTipoEventoInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutTipoEventoInput | EventoUpsertWithWhereUniqueWithoutTipoEventoInput[]
    createMany?: EventoCreateManyTipoEventoInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutTipoEventoInput | EventoUpdateWithWhereUniqueWithoutTipoEventoInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutTipoEventoInput | EventoUpdateManyWithWhereWithoutTipoEventoInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type EventoUncheckedUpdateManyWithoutTipoEventoNestedInput = {
    create?: XOR<EventoCreateWithoutTipoEventoInput, EventoUncheckedCreateWithoutTipoEventoInput> | EventoCreateWithoutTipoEventoInput[] | EventoUncheckedCreateWithoutTipoEventoInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutTipoEventoInput | EventoCreateOrConnectWithoutTipoEventoInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutTipoEventoInput | EventoUpsertWithWhereUniqueWithoutTipoEventoInput[]
    createMany?: EventoCreateManyTipoEventoInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutTipoEventoInput | EventoUpdateWithWhereUniqueWithoutTipoEventoInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutTipoEventoInput | EventoUpdateManyWithWhereWithoutTipoEventoInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type EventoCreateNestedManyWithoutResponsableInput = {
    create?: XOR<EventoCreateWithoutResponsableInput, EventoUncheckedCreateWithoutResponsableInput> | EventoCreateWithoutResponsableInput[] | EventoUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutResponsableInput | EventoCreateOrConnectWithoutResponsableInput[]
    createMany?: EventoCreateManyResponsableInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type EventoUncheckedCreateNestedManyWithoutResponsableInput = {
    create?: XOR<EventoCreateWithoutResponsableInput, EventoUncheckedCreateWithoutResponsableInput> | EventoCreateWithoutResponsableInput[] | EventoUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutResponsableInput | EventoCreateOrConnectWithoutResponsableInput[]
    createMany?: EventoCreateManyResponsableInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type EventoUpdateManyWithoutResponsableNestedInput = {
    create?: XOR<EventoCreateWithoutResponsableInput, EventoUncheckedCreateWithoutResponsableInput> | EventoCreateWithoutResponsableInput[] | EventoUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutResponsableInput | EventoCreateOrConnectWithoutResponsableInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutResponsableInput | EventoUpsertWithWhereUniqueWithoutResponsableInput[]
    createMany?: EventoCreateManyResponsableInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutResponsableInput | EventoUpdateWithWhereUniqueWithoutResponsableInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutResponsableInput | EventoUpdateManyWithWhereWithoutResponsableInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type EventoUncheckedUpdateManyWithoutResponsableNestedInput = {
    create?: XOR<EventoCreateWithoutResponsableInput, EventoUncheckedCreateWithoutResponsableInput> | EventoCreateWithoutResponsableInput[] | EventoUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutResponsableInput | EventoCreateOrConnectWithoutResponsableInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutResponsableInput | EventoUpsertWithWhereUniqueWithoutResponsableInput[]
    createMany?: EventoCreateManyResponsableInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutResponsableInput | EventoUpdateWithWhereUniqueWithoutResponsableInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutResponsableInput | EventoUpdateManyWithWhereWithoutResponsableInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type PagoCreateNestedManyWithoutMetodoPagoInput = {
    create?: XOR<PagoCreateWithoutMetodoPagoInput, PagoUncheckedCreateWithoutMetodoPagoInput> | PagoCreateWithoutMetodoPagoInput[] | PagoUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutMetodoPagoInput | PagoCreateOrConnectWithoutMetodoPagoInput[]
    createMany?: PagoCreateManyMetodoPagoInputEnvelope
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
  }

  export type AsistenteCreateNestedManyWithoutMetodoPagoInput = {
    create?: XOR<AsistenteCreateWithoutMetodoPagoInput, AsistenteUncheckedCreateWithoutMetodoPagoInput> | AsistenteCreateWithoutMetodoPagoInput[] | AsistenteUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutMetodoPagoInput | AsistenteCreateOrConnectWithoutMetodoPagoInput[]
    createMany?: AsistenteCreateManyMetodoPagoInputEnvelope
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
  }

  export type PagoUncheckedCreateNestedManyWithoutMetodoPagoInput = {
    create?: XOR<PagoCreateWithoutMetodoPagoInput, PagoUncheckedCreateWithoutMetodoPagoInput> | PagoCreateWithoutMetodoPagoInput[] | PagoUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutMetodoPagoInput | PagoCreateOrConnectWithoutMetodoPagoInput[]
    createMany?: PagoCreateManyMetodoPagoInputEnvelope
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
  }

  export type AsistenteUncheckedCreateNestedManyWithoutMetodoPagoInput = {
    create?: XOR<AsistenteCreateWithoutMetodoPagoInput, AsistenteUncheckedCreateWithoutMetodoPagoInput> | AsistenteCreateWithoutMetodoPagoInput[] | AsistenteUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutMetodoPagoInput | AsistenteCreateOrConnectWithoutMetodoPagoInput[]
    createMany?: AsistenteCreateManyMetodoPagoInputEnvelope
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
  }

  export type PagoUpdateManyWithoutMetodoPagoNestedInput = {
    create?: XOR<PagoCreateWithoutMetodoPagoInput, PagoUncheckedCreateWithoutMetodoPagoInput> | PagoCreateWithoutMetodoPagoInput[] | PagoUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutMetodoPagoInput | PagoCreateOrConnectWithoutMetodoPagoInput[]
    upsert?: PagoUpsertWithWhereUniqueWithoutMetodoPagoInput | PagoUpsertWithWhereUniqueWithoutMetodoPagoInput[]
    createMany?: PagoCreateManyMetodoPagoInputEnvelope
    set?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    disconnect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    delete?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    update?: PagoUpdateWithWhereUniqueWithoutMetodoPagoInput | PagoUpdateWithWhereUniqueWithoutMetodoPagoInput[]
    updateMany?: PagoUpdateManyWithWhereWithoutMetodoPagoInput | PagoUpdateManyWithWhereWithoutMetodoPagoInput[]
    deleteMany?: PagoScalarWhereInput | PagoScalarWhereInput[]
  }

  export type AsistenteUpdateManyWithoutMetodoPagoNestedInput = {
    create?: XOR<AsistenteCreateWithoutMetodoPagoInput, AsistenteUncheckedCreateWithoutMetodoPagoInput> | AsistenteCreateWithoutMetodoPagoInput[] | AsistenteUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutMetodoPagoInput | AsistenteCreateOrConnectWithoutMetodoPagoInput[]
    upsert?: AsistenteUpsertWithWhereUniqueWithoutMetodoPagoInput | AsistenteUpsertWithWhereUniqueWithoutMetodoPagoInput[]
    createMany?: AsistenteCreateManyMetodoPagoInputEnvelope
    set?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    disconnect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    delete?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    update?: AsistenteUpdateWithWhereUniqueWithoutMetodoPagoInput | AsistenteUpdateWithWhereUniqueWithoutMetodoPagoInput[]
    updateMany?: AsistenteUpdateManyWithWhereWithoutMetodoPagoInput | AsistenteUpdateManyWithWhereWithoutMetodoPagoInput[]
    deleteMany?: AsistenteScalarWhereInput | AsistenteScalarWhereInput[]
  }

  export type PagoUncheckedUpdateManyWithoutMetodoPagoNestedInput = {
    create?: XOR<PagoCreateWithoutMetodoPagoInput, PagoUncheckedCreateWithoutMetodoPagoInput> | PagoCreateWithoutMetodoPagoInput[] | PagoUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutMetodoPagoInput | PagoCreateOrConnectWithoutMetodoPagoInput[]
    upsert?: PagoUpsertWithWhereUniqueWithoutMetodoPagoInput | PagoUpsertWithWhereUniqueWithoutMetodoPagoInput[]
    createMany?: PagoCreateManyMetodoPagoInputEnvelope
    set?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    disconnect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    delete?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    update?: PagoUpdateWithWhereUniqueWithoutMetodoPagoInput | PagoUpdateWithWhereUniqueWithoutMetodoPagoInput[]
    updateMany?: PagoUpdateManyWithWhereWithoutMetodoPagoInput | PagoUpdateManyWithWhereWithoutMetodoPagoInput[]
    deleteMany?: PagoScalarWhereInput | PagoScalarWhereInput[]
  }

  export type AsistenteUncheckedUpdateManyWithoutMetodoPagoNestedInput = {
    create?: XOR<AsistenteCreateWithoutMetodoPagoInput, AsistenteUncheckedCreateWithoutMetodoPagoInput> | AsistenteCreateWithoutMetodoPagoInput[] | AsistenteUncheckedCreateWithoutMetodoPagoInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutMetodoPagoInput | AsistenteCreateOrConnectWithoutMetodoPagoInput[]
    upsert?: AsistenteUpsertWithWhereUniqueWithoutMetodoPagoInput | AsistenteUpsertWithWhereUniqueWithoutMetodoPagoInput[]
    createMany?: AsistenteCreateManyMetodoPagoInputEnvelope
    set?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    disconnect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    delete?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    update?: AsistenteUpdateWithWhereUniqueWithoutMetodoPagoInput | AsistenteUpdateWithWhereUniqueWithoutMetodoPagoInput[]
    updateMany?: AsistenteUpdateManyWithWhereWithoutMetodoPagoInput | AsistenteUpdateManyWithWhereWithoutMetodoPagoInput[]
    deleteMany?: AsistenteScalarWhereInput | AsistenteScalarWhereInput[]
  }

  export type AsistenteCreateNestedManyWithoutClienteInput = {
    create?: XOR<AsistenteCreateWithoutClienteInput, AsistenteUncheckedCreateWithoutClienteInput> | AsistenteCreateWithoutClienteInput[] | AsistenteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutClienteInput | AsistenteCreateOrConnectWithoutClienteInput[]
    createMany?: AsistenteCreateManyClienteInputEnvelope
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
  }

  export type PagoCreateNestedManyWithoutClienteInput = {
    create?: XOR<PagoCreateWithoutClienteInput, PagoUncheckedCreateWithoutClienteInput> | PagoCreateWithoutClienteInput[] | PagoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutClienteInput | PagoCreateOrConnectWithoutClienteInput[]
    createMany?: PagoCreateManyClienteInputEnvelope
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
  }

  export type ProveedorCreateNestedManyWithoutClienteInput = {
    create?: XOR<ProveedorCreateWithoutClienteInput, ProveedorUncheckedCreateWithoutClienteInput> | ProveedorCreateWithoutClienteInput[] | ProveedorUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutClienteInput | ProveedorCreateOrConnectWithoutClienteInput[]
    createMany?: ProveedorCreateManyClienteInputEnvelope
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
  }

  export type AsistenteUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<AsistenteCreateWithoutClienteInput, AsistenteUncheckedCreateWithoutClienteInput> | AsistenteCreateWithoutClienteInput[] | AsistenteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutClienteInput | AsistenteCreateOrConnectWithoutClienteInput[]
    createMany?: AsistenteCreateManyClienteInputEnvelope
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
  }

  export type PagoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<PagoCreateWithoutClienteInput, PagoUncheckedCreateWithoutClienteInput> | PagoCreateWithoutClienteInput[] | PagoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutClienteInput | PagoCreateOrConnectWithoutClienteInput[]
    createMany?: PagoCreateManyClienteInputEnvelope
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
  }

  export type ProveedorUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<ProveedorCreateWithoutClienteInput, ProveedorUncheckedCreateWithoutClienteInput> | ProveedorCreateWithoutClienteInput[] | ProveedorUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutClienteInput | ProveedorCreateOrConnectWithoutClienteInput[]
    createMany?: ProveedorCreateManyClienteInputEnvelope
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
  }

  export type AsistenteUpdateManyWithoutClienteNestedInput = {
    create?: XOR<AsistenteCreateWithoutClienteInput, AsistenteUncheckedCreateWithoutClienteInput> | AsistenteCreateWithoutClienteInput[] | AsistenteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutClienteInput | AsistenteCreateOrConnectWithoutClienteInput[]
    upsert?: AsistenteUpsertWithWhereUniqueWithoutClienteInput | AsistenteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: AsistenteCreateManyClienteInputEnvelope
    set?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    disconnect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    delete?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    update?: AsistenteUpdateWithWhereUniqueWithoutClienteInput | AsistenteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: AsistenteUpdateManyWithWhereWithoutClienteInput | AsistenteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: AsistenteScalarWhereInput | AsistenteScalarWhereInput[]
  }

  export type PagoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PagoCreateWithoutClienteInput, PagoUncheckedCreateWithoutClienteInput> | PagoCreateWithoutClienteInput[] | PagoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutClienteInput | PagoCreateOrConnectWithoutClienteInput[]
    upsert?: PagoUpsertWithWhereUniqueWithoutClienteInput | PagoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PagoCreateManyClienteInputEnvelope
    set?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    disconnect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    delete?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    update?: PagoUpdateWithWhereUniqueWithoutClienteInput | PagoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PagoUpdateManyWithWhereWithoutClienteInput | PagoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PagoScalarWhereInput | PagoScalarWhereInput[]
  }

  export type ProveedorUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ProveedorCreateWithoutClienteInput, ProveedorUncheckedCreateWithoutClienteInput> | ProveedorCreateWithoutClienteInput[] | ProveedorUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutClienteInput | ProveedorCreateOrConnectWithoutClienteInput[]
    upsert?: ProveedorUpsertWithWhereUniqueWithoutClienteInput | ProveedorUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ProveedorCreateManyClienteInputEnvelope
    set?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    disconnect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    delete?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    update?: ProveedorUpdateWithWhereUniqueWithoutClienteInput | ProveedorUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ProveedorUpdateManyWithWhereWithoutClienteInput | ProveedorUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
  }

  export type AsistenteUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<AsistenteCreateWithoutClienteInput, AsistenteUncheckedCreateWithoutClienteInput> | AsistenteCreateWithoutClienteInput[] | AsistenteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AsistenteCreateOrConnectWithoutClienteInput | AsistenteCreateOrConnectWithoutClienteInput[]
    upsert?: AsistenteUpsertWithWhereUniqueWithoutClienteInput | AsistenteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: AsistenteCreateManyClienteInputEnvelope
    set?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    disconnect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    delete?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    connect?: AsistenteWhereUniqueInput | AsistenteWhereUniqueInput[]
    update?: AsistenteUpdateWithWhereUniqueWithoutClienteInput | AsistenteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: AsistenteUpdateManyWithWhereWithoutClienteInput | AsistenteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: AsistenteScalarWhereInput | AsistenteScalarWhereInput[]
  }

  export type PagoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PagoCreateWithoutClienteInput, PagoUncheckedCreateWithoutClienteInput> | PagoCreateWithoutClienteInput[] | PagoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoCreateOrConnectWithoutClienteInput | PagoCreateOrConnectWithoutClienteInput[]
    upsert?: PagoUpsertWithWhereUniqueWithoutClienteInput | PagoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PagoCreateManyClienteInputEnvelope
    set?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    disconnect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    delete?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    connect?: PagoWhereUniqueInput | PagoWhereUniqueInput[]
    update?: PagoUpdateWithWhereUniqueWithoutClienteInput | PagoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PagoUpdateManyWithWhereWithoutClienteInput | PagoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PagoScalarWhereInput | PagoScalarWhereInput[]
  }

  export type ProveedorUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ProveedorCreateWithoutClienteInput, ProveedorUncheckedCreateWithoutClienteInput> | ProveedorCreateWithoutClienteInput[] | ProveedorUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutClienteInput | ProveedorCreateOrConnectWithoutClienteInput[]
    upsert?: ProveedorUpsertWithWhereUniqueWithoutClienteInput | ProveedorUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ProveedorCreateManyClienteInputEnvelope
    set?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    disconnect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    delete?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    update?: ProveedorUpdateWithWhereUniqueWithoutClienteInput | ProveedorUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ProveedorUpdateManyWithWhereWithoutClienteInput | ProveedorUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
  }

  export type EventoCreateNestedOneWithoutReservaInput = {
    create?: XOR<EventoCreateWithoutReservaInput, EventoUncheckedCreateWithoutReservaInput>
    connectOrCreate?: EventoCreateOrConnectWithoutReservaInput
    connect?: EventoWhereUniqueInput
  }

  export type ServicioCreateNestedManyWithoutReservaInput = {
    create?: XOR<ServicioCreateWithoutReservaInput, ServicioUncheckedCreateWithoutReservaInput> | ServicioCreateWithoutReservaInput[] | ServicioUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutReservaInput | ServicioCreateOrConnectWithoutReservaInput[]
    createMany?: ServicioCreateManyReservaInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type ServicioUncheckedCreateNestedManyWithoutReservaInput = {
    create?: XOR<ServicioCreateWithoutReservaInput, ServicioUncheckedCreateWithoutReservaInput> | ServicioCreateWithoutReservaInput[] | ServicioUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutReservaInput | ServicioCreateOrConnectWithoutReservaInput[]
    createMany?: ServicioCreateManyReservaInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type EventoUpdateOneRequiredWithoutReservaNestedInput = {
    create?: XOR<EventoCreateWithoutReservaInput, EventoUncheckedCreateWithoutReservaInput>
    connectOrCreate?: EventoCreateOrConnectWithoutReservaInput
    upsert?: EventoUpsertWithoutReservaInput
    connect?: EventoWhereUniqueInput
    update?: XOR<XOR<EventoUpdateToOneWithWhereWithoutReservaInput, EventoUpdateWithoutReservaInput>, EventoUncheckedUpdateWithoutReservaInput>
  }

  export type ServicioUpdateManyWithoutReservaNestedInput = {
    create?: XOR<ServicioCreateWithoutReservaInput, ServicioUncheckedCreateWithoutReservaInput> | ServicioCreateWithoutReservaInput[] | ServicioUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutReservaInput | ServicioCreateOrConnectWithoutReservaInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutReservaInput | ServicioUpsertWithWhereUniqueWithoutReservaInput[]
    createMany?: ServicioCreateManyReservaInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutReservaInput | ServicioUpdateWithWhereUniqueWithoutReservaInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutReservaInput | ServicioUpdateManyWithWhereWithoutReservaInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type ServicioUncheckedUpdateManyWithoutReservaNestedInput = {
    create?: XOR<ServicioCreateWithoutReservaInput, ServicioUncheckedCreateWithoutReservaInput> | ServicioCreateWithoutReservaInput[] | ServicioUncheckedCreateWithoutReservaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutReservaInput | ServicioCreateOrConnectWithoutReservaInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutReservaInput | ServicioUpsertWithWhereUniqueWithoutReservaInput[]
    createMany?: ServicioCreateManyReservaInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutReservaInput | ServicioUpdateWithWhereUniqueWithoutReservaInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutReservaInput | ServicioUpdateManyWithWhereWithoutReservaInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type ServicioCreateNestedManyWithoutTipoServicioInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type ServicioUncheckedCreateNestedManyWithoutTipoServicioInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type ServicioUpdateManyWithoutTipoServicioNestedInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutTipoServicioInput | ServicioUpsertWithWhereUniqueWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutTipoServicioInput | ServicioUpdateWithWhereUniqueWithoutTipoServicioInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutTipoServicioInput | ServicioUpdateManyWithWhereWithoutTipoServicioInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type ServicioUncheckedUpdateManyWithoutTipoServicioNestedInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutTipoServicioInput | ServicioUpsertWithWhereUniqueWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutTipoServicioInput | ServicioUpdateWithWhereUniqueWithoutTipoServicioInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutTipoServicioInput | ServicioUpdateManyWithWhereWithoutTipoServicioInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type ServicioCreateNestedOneWithoutContratosInput = {
    create?: XOR<ServicioCreateWithoutContratosInput, ServicioUncheckedCreateWithoutContratosInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutContratosInput
    connect?: ServicioWhereUniqueInput
  }

  export type ProveedorCreateNestedManyWithoutContratoInput = {
    create?: XOR<ProveedorCreateWithoutContratoInput, ProveedorUncheckedCreateWithoutContratoInput> | ProveedorCreateWithoutContratoInput[] | ProveedorUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutContratoInput | ProveedorCreateOrConnectWithoutContratoInput[]
    createMany?: ProveedorCreateManyContratoInputEnvelope
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
  }

  export type ProveedorUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<ProveedorCreateWithoutContratoInput, ProveedorUncheckedCreateWithoutContratoInput> | ProveedorCreateWithoutContratoInput[] | ProveedorUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutContratoInput | ProveedorCreateOrConnectWithoutContratoInput[]
    createMany?: ProveedorCreateManyContratoInputEnvelope
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
  }

  export type ServicioUpdateOneRequiredWithoutContratosNestedInput = {
    create?: XOR<ServicioCreateWithoutContratosInput, ServicioUncheckedCreateWithoutContratosInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutContratosInput
    upsert?: ServicioUpsertWithoutContratosInput
    connect?: ServicioWhereUniqueInput
    update?: XOR<XOR<ServicioUpdateToOneWithWhereWithoutContratosInput, ServicioUpdateWithoutContratosInput>, ServicioUncheckedUpdateWithoutContratosInput>
  }

  export type ProveedorUpdateManyWithoutContratoNestedInput = {
    create?: XOR<ProveedorCreateWithoutContratoInput, ProveedorUncheckedCreateWithoutContratoInput> | ProveedorCreateWithoutContratoInput[] | ProveedorUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutContratoInput | ProveedorCreateOrConnectWithoutContratoInput[]
    upsert?: ProveedorUpsertWithWhereUniqueWithoutContratoInput | ProveedorUpsertWithWhereUniqueWithoutContratoInput[]
    createMany?: ProveedorCreateManyContratoInputEnvelope
    set?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    disconnect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    delete?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    update?: ProveedorUpdateWithWhereUniqueWithoutContratoInput | ProveedorUpdateWithWhereUniqueWithoutContratoInput[]
    updateMany?: ProveedorUpdateManyWithWhereWithoutContratoInput | ProveedorUpdateManyWithWhereWithoutContratoInput[]
    deleteMany?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
  }

  export type ProveedorUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<ProveedorCreateWithoutContratoInput, ProveedorUncheckedCreateWithoutContratoInput> | ProveedorCreateWithoutContratoInput[] | ProveedorUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutContratoInput | ProveedorCreateOrConnectWithoutContratoInput[]
    upsert?: ProveedorUpsertWithWhereUniqueWithoutContratoInput | ProveedorUpsertWithWhereUniqueWithoutContratoInput[]
    createMany?: ProveedorCreateManyContratoInputEnvelope
    set?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    disconnect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    delete?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    update?: ProveedorUpdateWithWhereUniqueWithoutContratoInput | ProveedorUpdateWithWhereUniqueWithoutContratoInput[]
    updateMany?: ProveedorUpdateManyWithWhereWithoutContratoInput | ProveedorUpdateManyWithWhereWithoutContratoInput[]
    deleteMany?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
  }

  export type EventoCreateNestedOneWithoutCalificacionInput = {
    create?: XOR<EventoCreateWithoutCalificacionInput, EventoUncheckedCreateWithoutCalificacionInput>
    connectOrCreate?: EventoCreateOrConnectWithoutCalificacionInput
    connect?: EventoWhereUniqueInput
  }

  export type EventoUpdateOneRequiredWithoutCalificacionNestedInput = {
    create?: XOR<EventoCreateWithoutCalificacionInput, EventoUncheckedCreateWithoutCalificacionInput>
    connectOrCreate?: EventoCreateOrConnectWithoutCalificacionInput
    upsert?: EventoUpsertWithoutCalificacionInput
    connect?: EventoWhereUniqueInput
    update?: XOR<XOR<EventoUpdateToOneWithWhereWithoutCalificacionInput, EventoUpdateWithoutCalificacionInput>, EventoUncheckedUpdateWithoutCalificacionInput>
  }

  export type ProveedorCreateNestedOneWithoutCalificacionesInput = {
    create?: XOR<ProveedorCreateWithoutCalificacionesInput, ProveedorUncheckedCreateWithoutCalificacionesInput>
    connectOrCreate?: ProveedorCreateOrConnectWithoutCalificacionesInput
    connect?: ProveedorWhereUniqueInput
  }

  export type ProveedorUpdateOneRequiredWithoutCalificacionesNestedInput = {
    create?: XOR<ProveedorCreateWithoutCalificacionesInput, ProveedorUncheckedCreateWithoutCalificacionesInput>
    connectOrCreate?: ProveedorCreateOrConnectWithoutCalificacionesInput
    upsert?: ProveedorUpsertWithoutCalificacionesInput
    connect?: ProveedorWhereUniqueInput
    update?: XOR<XOR<ProveedorUpdateToOneWithWhereWithoutCalificacionesInput, ProveedorUpdateWithoutCalificacionesInput>, ProveedorUncheckedUpdateWithoutCalificacionesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TipoEventoCreateWithoutEventosInput = {
    nombre: string
    descripcion: string
    precioBase: number
    aforoMaximo: number
    duracion: number
  }

  export type TipoEventoUncheckedCreateWithoutEventosInput = {
    id?: number
    nombre: string
    descripcion: string
    precioBase: number
    aforoMaximo: number
    duracion: number
  }

  export type TipoEventoCreateOrConnectWithoutEventosInput = {
    where: TipoEventoWhereUniqueInput
    create: XOR<TipoEventoCreateWithoutEventosInput, TipoEventoUncheckedCreateWithoutEventosInput>
  }

  export type PersonaCreateWithoutEventosInput = {
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
  }

  export type PersonaUncheckedCreateWithoutEventosInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
  }

  export type PersonaCreateOrConnectWithoutEventosInput = {
    where: PersonaWhereUniqueInput
    create: XOR<PersonaCreateWithoutEventosInput, PersonaUncheckedCreateWithoutEventosInput>
  }

  export type PagoCreateWithoutEventoInput = {
    monto: number
    fechaPago: Date | string
    metodoPago: MetodoPagoCreateNestedOneWithoutPagosInput
    cliente: ClienteCreateNestedOneWithoutPagosInput
  }

  export type PagoUncheckedCreateWithoutEventoInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    metodoPagoId: number
    clienteId: number
  }

  export type PagoCreateOrConnectWithoutEventoInput = {
    where: PagoWhereUniqueInput
    create: XOR<PagoCreateWithoutEventoInput, PagoUncheckedCreateWithoutEventoInput>
  }

  export type PagoCreateManyEventoInputEnvelope = {
    data: PagoCreateManyEventoInput | PagoCreateManyEventoInput[]
    skipDuplicates?: boolean
  }

  export type ReservaCreateWithoutEventoInput = {
    fechaReserva: Date | string
    horaReserva: string
    duracionReserva: number
    servicios?: ServicioCreateNestedManyWithoutReservaInput
  }

  export type ReservaUncheckedCreateWithoutEventoInput = {
    id?: number
    fechaReserva: Date | string
    horaReserva: string
    duracionReserva: number
    servicios?: ServicioUncheckedCreateNestedManyWithoutReservaInput
  }

  export type ReservaCreateOrConnectWithoutEventoInput = {
    where: ReservaWhereUniqueInput
    create: XOR<ReservaCreateWithoutEventoInput, ReservaUncheckedCreateWithoutEventoInput>
  }

  export type ReservaCreateManyEventoInputEnvelope = {
    data: ReservaCreateManyEventoInput | ReservaCreateManyEventoInput[]
    skipDuplicates?: boolean
  }

  export type CalificacionCreateWithoutEventoInput = {
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
  }

  export type CalificacionUncheckedCreateWithoutEventoInput = {
    id?: number
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
  }

  export type CalificacionCreateOrConnectWithoutEventoInput = {
    where: CalificacionWhereUniqueInput
    create: XOR<CalificacionCreateWithoutEventoInput, CalificacionUncheckedCreateWithoutEventoInput>
  }

  export type CalificacionCreateManyEventoInputEnvelope = {
    data: CalificacionCreateManyEventoInput | CalificacionCreateManyEventoInput[]
    skipDuplicates?: boolean
  }

  export type TipoEventoUpsertWithoutEventosInput = {
    update: XOR<TipoEventoUpdateWithoutEventosInput, TipoEventoUncheckedUpdateWithoutEventosInput>
    create: XOR<TipoEventoCreateWithoutEventosInput, TipoEventoUncheckedCreateWithoutEventosInput>
    where?: TipoEventoWhereInput
  }

  export type TipoEventoUpdateToOneWithWhereWithoutEventosInput = {
    where?: TipoEventoWhereInput
    data: XOR<TipoEventoUpdateWithoutEventosInput, TipoEventoUncheckedUpdateWithoutEventosInput>
  }

  export type TipoEventoUpdateWithoutEventosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precioBase?: FloatFieldUpdateOperationsInput | number
    aforoMaximo?: IntFieldUpdateOperationsInput | number
    duracion?: IntFieldUpdateOperationsInput | number
  }

  export type TipoEventoUncheckedUpdateWithoutEventosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precioBase?: FloatFieldUpdateOperationsInput | number
    aforoMaximo?: IntFieldUpdateOperationsInput | number
    duracion?: IntFieldUpdateOperationsInput | number
  }

  export type PersonaUpsertWithoutEventosInput = {
    update: XOR<PersonaUpdateWithoutEventosInput, PersonaUncheckedUpdateWithoutEventosInput>
    create: XOR<PersonaCreateWithoutEventosInput, PersonaUncheckedCreateWithoutEventosInput>
    where?: PersonaWhereInput
  }

  export type PersonaUpdateToOneWithWhereWithoutEventosInput = {
    where?: PersonaWhereInput
    data: XOR<PersonaUpdateWithoutEventosInput, PersonaUncheckedUpdateWithoutEventosInput>
  }

  export type PersonaUpdateWithoutEventosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
  }

  export type PersonaUncheckedUpdateWithoutEventosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
  }

  export type PagoUpsertWithWhereUniqueWithoutEventoInput = {
    where: PagoWhereUniqueInput
    update: XOR<PagoUpdateWithoutEventoInput, PagoUncheckedUpdateWithoutEventoInput>
    create: XOR<PagoCreateWithoutEventoInput, PagoUncheckedCreateWithoutEventoInput>
  }

  export type PagoUpdateWithWhereUniqueWithoutEventoInput = {
    where: PagoWhereUniqueInput
    data: XOR<PagoUpdateWithoutEventoInput, PagoUncheckedUpdateWithoutEventoInput>
  }

  export type PagoUpdateManyWithWhereWithoutEventoInput = {
    where: PagoScalarWhereInput
    data: XOR<PagoUpdateManyMutationInput, PagoUncheckedUpdateManyWithoutEventoInput>
  }

  export type PagoScalarWhereInput = {
    AND?: PagoScalarWhereInput | PagoScalarWhereInput[]
    OR?: PagoScalarWhereInput[]
    NOT?: PagoScalarWhereInput | PagoScalarWhereInput[]
    id?: IntFilter<"Pago"> | number
    monto?: FloatFilter<"Pago"> | number
    fechaPago?: DateTimeFilter<"Pago"> | Date | string
    metodoPagoId?: IntFilter<"Pago"> | number
    eventoId?: IntFilter<"Pago"> | number
    clienteId?: IntFilter<"Pago"> | number
  }

  export type ReservaUpsertWithWhereUniqueWithoutEventoInput = {
    where: ReservaWhereUniqueInput
    update: XOR<ReservaUpdateWithoutEventoInput, ReservaUncheckedUpdateWithoutEventoInput>
    create: XOR<ReservaCreateWithoutEventoInput, ReservaUncheckedCreateWithoutEventoInput>
  }

  export type ReservaUpdateWithWhereUniqueWithoutEventoInput = {
    where: ReservaWhereUniqueInput
    data: XOR<ReservaUpdateWithoutEventoInput, ReservaUncheckedUpdateWithoutEventoInput>
  }

  export type ReservaUpdateManyWithWhereWithoutEventoInput = {
    where: ReservaScalarWhereInput
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyWithoutEventoInput>
  }

  export type ReservaScalarWhereInput = {
    AND?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
    OR?: ReservaScalarWhereInput[]
    NOT?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
    id?: IntFilter<"Reserva"> | number
    fechaReserva?: DateTimeFilter<"Reserva"> | Date | string
    horaReserva?: StringFilter<"Reserva"> | string
    eventoId?: IntFilter<"Reserva"> | number
    duracionReserva?: IntFilter<"Reserva"> | number
  }

  export type CalificacionUpsertWithWhereUniqueWithoutEventoInput = {
    where: CalificacionWhereUniqueInput
    update: XOR<CalificacionUpdateWithoutEventoInput, CalificacionUncheckedUpdateWithoutEventoInput>
    create: XOR<CalificacionCreateWithoutEventoInput, CalificacionUncheckedCreateWithoutEventoInput>
  }

  export type CalificacionUpdateWithWhereUniqueWithoutEventoInput = {
    where: CalificacionWhereUniqueInput
    data: XOR<CalificacionUpdateWithoutEventoInput, CalificacionUncheckedUpdateWithoutEventoInput>
  }

  export type CalificacionUpdateManyWithWhereWithoutEventoInput = {
    where: CalificacionScalarWhereInput
    data: XOR<CalificacionUpdateManyMutationInput, CalificacionUncheckedUpdateManyWithoutEventoInput>
  }

  export type CalificacionScalarWhereInput = {
    AND?: CalificacionScalarWhereInput | CalificacionScalarWhereInput[]
    OR?: CalificacionScalarWhereInput[]
    NOT?: CalificacionScalarWhereInput | CalificacionScalarWhereInput[]
    id?: IntFilter<"Calificacion"> | number
    puntuacion?: IntFilter<"Calificacion"> | number
    comentarios?: StringFilter<"Calificacion"> | string
    eventoId?: IntFilter<"Calificacion"> | number
    fechaCalificacion?: DateTimeFilter<"Calificacion"> | Date | string
  }

  export type ClienteCreateWithoutAsistentesInput = {
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    pagos?: PagoCreateNestedManyWithoutClienteInput
    proveedores?: ProveedorCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutAsistentesInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    pagos?: PagoUncheckedCreateNestedManyWithoutClienteInput
    proveedores?: ProveedorUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutAsistentesInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutAsistentesInput, ClienteUncheckedCreateWithoutAsistentesInput>
  }

  export type MetodoPagoCreateWithoutAsistentesInput = {
    nombre: string
    pagos?: PagoCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateWithoutAsistentesInput = {
    id?: number
    nombre: string
    pagos?: PagoUncheckedCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoCreateOrConnectWithoutAsistentesInput = {
    where: MetodoPagoWhereUniqueInput
    create: XOR<MetodoPagoCreateWithoutAsistentesInput, MetodoPagoUncheckedCreateWithoutAsistentesInput>
  }

  export type ClienteUpsertWithoutAsistentesInput = {
    update: XOR<ClienteUpdateWithoutAsistentesInput, ClienteUncheckedUpdateWithoutAsistentesInput>
    create: XOR<ClienteCreateWithoutAsistentesInput, ClienteUncheckedCreateWithoutAsistentesInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutAsistentesInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutAsistentesInput, ClienteUncheckedUpdateWithoutAsistentesInput>
  }

  export type ClienteUpdateWithoutAsistentesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    pagos?: PagoUpdateManyWithoutClienteNestedInput
    proveedores?: ProveedorUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutAsistentesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    pagos?: PagoUncheckedUpdateManyWithoutClienteNestedInput
    proveedores?: ProveedorUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type MetodoPagoUpsertWithoutAsistentesInput = {
    update: XOR<MetodoPagoUpdateWithoutAsistentesInput, MetodoPagoUncheckedUpdateWithoutAsistentesInput>
    create: XOR<MetodoPagoCreateWithoutAsistentesInput, MetodoPagoUncheckedCreateWithoutAsistentesInput>
    where?: MetodoPagoWhereInput
  }

  export type MetodoPagoUpdateToOneWithWhereWithoutAsistentesInput = {
    where?: MetodoPagoWhereInput
    data: XOR<MetodoPagoUpdateWithoutAsistentesInput, MetodoPagoUncheckedUpdateWithoutAsistentesInput>
  }

  export type MetodoPagoUpdateWithoutAsistentesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    pagos?: PagoUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateWithoutAsistentesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    pagos?: PagoUncheckedUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoCreateWithoutPagosInput = {
    nombre: string
    asistentes?: AsistenteCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateWithoutPagosInput = {
    id?: number
    nombre: string
    asistentes?: AsistenteUncheckedCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoCreateOrConnectWithoutPagosInput = {
    where: MetodoPagoWhereUniqueInput
    create: XOR<MetodoPagoCreateWithoutPagosInput, MetodoPagoUncheckedCreateWithoutPagosInput>
  }

  export type EventoCreateWithoutPagosInput = {
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEvento: TipoEventoCreateNestedOneWithoutEventosInput
    responsable: PersonaCreateNestedOneWithoutEventosInput
    reserva?: ReservaCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutPagosInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
    responsableId: number
    reserva?: ReservaUncheckedCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutPagosInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutPagosInput, EventoUncheckedCreateWithoutPagosInput>
  }

  export type ClienteCreateWithoutPagosInput = {
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    asistentes?: AsistenteCreateNestedManyWithoutClienteInput
    proveedores?: ProveedorCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutPagosInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    asistentes?: AsistenteUncheckedCreateNestedManyWithoutClienteInput
    proveedores?: ProveedorUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutPagosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutPagosInput, ClienteUncheckedCreateWithoutPagosInput>
  }

  export type MetodoPagoUpsertWithoutPagosInput = {
    update: XOR<MetodoPagoUpdateWithoutPagosInput, MetodoPagoUncheckedUpdateWithoutPagosInput>
    create: XOR<MetodoPagoCreateWithoutPagosInput, MetodoPagoUncheckedCreateWithoutPagosInput>
    where?: MetodoPagoWhereInput
  }

  export type MetodoPagoUpdateToOneWithWhereWithoutPagosInput = {
    where?: MetodoPagoWhereInput
    data: XOR<MetodoPagoUpdateWithoutPagosInput, MetodoPagoUncheckedUpdateWithoutPagosInput>
  }

  export type MetodoPagoUpdateWithoutPagosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateWithoutPagosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUncheckedUpdateManyWithoutMetodoPagoNestedInput
  }

  export type EventoUpsertWithoutPagosInput = {
    update: XOR<EventoUpdateWithoutPagosInput, EventoUncheckedUpdateWithoutPagosInput>
    create: XOR<EventoCreateWithoutPagosInput, EventoUncheckedCreateWithoutPagosInput>
    where?: EventoWhereInput
  }

  export type EventoUpdateToOneWithWhereWithoutPagosInput = {
    where?: EventoWhereInput
    data: XOR<EventoUpdateWithoutPagosInput, EventoUncheckedUpdateWithoutPagosInput>
  }

  export type EventoUpdateWithoutPagosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEvento?: TipoEventoUpdateOneRequiredWithoutEventosNestedInput
    responsable?: PersonaUpdateOneRequiredWithoutEventosNestedInput
    reserva?: ReservaUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutPagosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    reserva?: ReservaUncheckedUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type ClienteUpsertWithoutPagosInput = {
    update: XOR<ClienteUpdateWithoutPagosInput, ClienteUncheckedUpdateWithoutPagosInput>
    create: XOR<ClienteCreateWithoutPagosInput, ClienteUncheckedCreateWithoutPagosInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutPagosInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutPagosInput, ClienteUncheckedUpdateWithoutPagosInput>
  }

  export type ClienteUpdateWithoutPagosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUpdateManyWithoutClienteNestedInput
    proveedores?: ProveedorUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutPagosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUncheckedUpdateManyWithoutClienteNestedInput
    proveedores?: ProveedorUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ReservaCreateWithoutServiciosInput = {
    fechaReserva: Date | string
    horaReserva: string
    duracionReserva: number
    evento: EventoCreateNestedOneWithoutReservaInput
  }

  export type ReservaUncheckedCreateWithoutServiciosInput = {
    id?: number
    fechaReserva: Date | string
    horaReserva: string
    eventoId: number
    duracionReserva: number
  }

  export type ReservaCreateOrConnectWithoutServiciosInput = {
    where: ReservaWhereUniqueInput
    create: XOR<ReservaCreateWithoutServiciosInput, ReservaUncheckedCreateWithoutServiciosInput>
  }

  export type TipoServicioCreateWithoutServiciosInput = {
    nombre: string
    descripcion: string
  }

  export type TipoServicioUncheckedCreateWithoutServiciosInput = {
    id?: number
    nombre: string
    descripcion: string
  }

  export type TipoServicioCreateOrConnectWithoutServiciosInput = {
    where: TipoServicioWhereUniqueInput
    create: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
  }

  export type ContratoCreateWithoutServicioInput = {
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    tipoContrato: string
    costoTotal: number
    proveedor?: ProveedorCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutServicioInput = {
    id?: number
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    tipoContrato: string
    costoTotal: number
    proveedor?: ProveedorUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutServicioInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutServicioInput, ContratoUncheckedCreateWithoutServicioInput>
  }

  export type ContratoCreateManyServicioInputEnvelope = {
    data: ContratoCreateManyServicioInput | ContratoCreateManyServicioInput[]
    skipDuplicates?: boolean
  }

  export type ReservaUpsertWithoutServiciosInput = {
    update: XOR<ReservaUpdateWithoutServiciosInput, ReservaUncheckedUpdateWithoutServiciosInput>
    create: XOR<ReservaCreateWithoutServiciosInput, ReservaUncheckedCreateWithoutServiciosInput>
    where?: ReservaWhereInput
  }

  export type ReservaUpdateToOneWithWhereWithoutServiciosInput = {
    where?: ReservaWhereInput
    data: XOR<ReservaUpdateWithoutServiciosInput, ReservaUncheckedUpdateWithoutServiciosInput>
  }

  export type ReservaUpdateWithoutServiciosInput = {
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    duracionReserva?: IntFieldUpdateOperationsInput | number
    evento?: EventoUpdateOneRequiredWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateWithoutServiciosInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    eventoId?: IntFieldUpdateOperationsInput | number
    duracionReserva?: IntFieldUpdateOperationsInput | number
  }

  export type TipoServicioUpsertWithoutServiciosInput = {
    update: XOR<TipoServicioUpdateWithoutServiciosInput, TipoServicioUncheckedUpdateWithoutServiciosInput>
    create: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
    where?: TipoServicioWhereInput
  }

  export type TipoServicioUpdateToOneWithWhereWithoutServiciosInput = {
    where?: TipoServicioWhereInput
    data: XOR<TipoServicioUpdateWithoutServiciosInput, TipoServicioUncheckedUpdateWithoutServiciosInput>
  }

  export type TipoServicioUpdateWithoutServiciosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type TipoServicioUncheckedUpdateWithoutServiciosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ContratoUpsertWithWhereUniqueWithoutServicioInput = {
    where: ContratoWhereUniqueInput
    update: XOR<ContratoUpdateWithoutServicioInput, ContratoUncheckedUpdateWithoutServicioInput>
    create: XOR<ContratoCreateWithoutServicioInput, ContratoUncheckedCreateWithoutServicioInput>
  }

  export type ContratoUpdateWithWhereUniqueWithoutServicioInput = {
    where: ContratoWhereUniqueInput
    data: XOR<ContratoUpdateWithoutServicioInput, ContratoUncheckedUpdateWithoutServicioInput>
  }

  export type ContratoUpdateManyWithWhereWithoutServicioInput = {
    where: ContratoScalarWhereInput
    data: XOR<ContratoUpdateManyMutationInput, ContratoUncheckedUpdateManyWithoutServicioInput>
  }

  export type ContratoScalarWhereInput = {
    AND?: ContratoScalarWhereInput | ContratoScalarWhereInput[]
    OR?: ContratoScalarWhereInput[]
    NOT?: ContratoScalarWhereInput | ContratoScalarWhereInput[]
    id?: IntFilter<"Contrato"> | number
    fechaInicio?: DateTimeFilter<"Contrato"> | Date | string
    fechaFinalizacion?: DateTimeFilter<"Contrato"> | Date | string
    servicioId?: IntFilter<"Contrato"> | number
    tipoContrato?: StringFilter<"Contrato"> | string
    costoTotal?: FloatFilter<"Contrato"> | number
  }

  export type ContratoCreateWithoutProveedorInput = {
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    tipoContrato: string
    costoTotal: number
    servicio: ServicioCreateNestedOneWithoutContratosInput
  }

  export type ContratoUncheckedCreateWithoutProveedorInput = {
    id?: number
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    servicioId: number
    tipoContrato: string
    costoTotal: number
  }

  export type ContratoCreateOrConnectWithoutProveedorInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutProveedorInput, ContratoUncheckedCreateWithoutProveedorInput>
  }

  export type ClienteCreateWithoutProveedoresInput = {
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    asistentes?: AsistenteCreateNestedManyWithoutClienteInput
    pagos?: PagoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutProveedoresInput = {
    id?: number
    nombre: string
    apellido: string
    correo: string
    telefono: string
    direccion: string
    ciudad: string
    codigoPostal: string
    pais: string
    asistentes?: AsistenteUncheckedCreateNestedManyWithoutClienteInput
    pagos?: PagoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutProveedoresInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutProveedoresInput, ClienteUncheckedCreateWithoutProveedoresInput>
  }

  export type CalificacionProveedorCreateWithoutProveedorInput = {
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
  }

  export type CalificacionProveedorUncheckedCreateWithoutProveedorInput = {
    id?: number
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
  }

  export type CalificacionProveedorCreateOrConnectWithoutProveedorInput = {
    where: CalificacionProveedorWhereUniqueInput
    create: XOR<CalificacionProveedorCreateWithoutProveedorInput, CalificacionProveedorUncheckedCreateWithoutProveedorInput>
  }

  export type CalificacionProveedorCreateManyProveedorInputEnvelope = {
    data: CalificacionProveedorCreateManyProveedorInput | CalificacionProveedorCreateManyProveedorInput[]
    skipDuplicates?: boolean
  }

  export type ContratoUpsertWithoutProveedorInput = {
    update: XOR<ContratoUpdateWithoutProveedorInput, ContratoUncheckedUpdateWithoutProveedorInput>
    create: XOR<ContratoCreateWithoutProveedorInput, ContratoUncheckedCreateWithoutProveedorInput>
    where?: ContratoWhereInput
  }

  export type ContratoUpdateToOneWithWhereWithoutProveedorInput = {
    where?: ContratoWhereInput
    data: XOR<ContratoUpdateWithoutProveedorInput, ContratoUncheckedUpdateWithoutProveedorInput>
  }

  export type ContratoUpdateWithoutProveedorInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
    servicio?: ServicioUpdateOneRequiredWithoutContratosNestedInput
  }

  export type ContratoUncheckedUpdateWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    servicioId?: IntFieldUpdateOperationsInput | number
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteUpsertWithoutProveedoresInput = {
    update: XOR<ClienteUpdateWithoutProveedoresInput, ClienteUncheckedUpdateWithoutProveedoresInput>
    create: XOR<ClienteCreateWithoutProveedoresInput, ClienteUncheckedCreateWithoutProveedoresInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutProveedoresInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutProveedoresInput, ClienteUncheckedUpdateWithoutProveedoresInput>
  }

  export type ClienteUpdateWithoutProveedoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUpdateManyWithoutClienteNestedInput
    pagos?: PagoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutProveedoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: StringFieldUpdateOperationsInput | string
    pais?: StringFieldUpdateOperationsInput | string
    asistentes?: AsistenteUncheckedUpdateManyWithoutClienteNestedInput
    pagos?: PagoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type CalificacionProveedorUpsertWithWhereUniqueWithoutProveedorInput = {
    where: CalificacionProveedorWhereUniqueInput
    update: XOR<CalificacionProveedorUpdateWithoutProveedorInput, CalificacionProveedorUncheckedUpdateWithoutProveedorInput>
    create: XOR<CalificacionProveedorCreateWithoutProveedorInput, CalificacionProveedorUncheckedCreateWithoutProveedorInput>
  }

  export type CalificacionProveedorUpdateWithWhereUniqueWithoutProveedorInput = {
    where: CalificacionProveedorWhereUniqueInput
    data: XOR<CalificacionProveedorUpdateWithoutProveedorInput, CalificacionProveedorUncheckedUpdateWithoutProveedorInput>
  }

  export type CalificacionProveedorUpdateManyWithWhereWithoutProveedorInput = {
    where: CalificacionProveedorScalarWhereInput
    data: XOR<CalificacionProveedorUpdateManyMutationInput, CalificacionProveedorUncheckedUpdateManyWithoutProveedorInput>
  }

  export type CalificacionProveedorScalarWhereInput = {
    AND?: CalificacionProveedorScalarWhereInput | CalificacionProveedorScalarWhereInput[]
    OR?: CalificacionProveedorScalarWhereInput[]
    NOT?: CalificacionProveedorScalarWhereInput | CalificacionProveedorScalarWhereInput[]
    id?: IntFilter<"CalificacionProveedor"> | number
    puntuacion?: IntFilter<"CalificacionProveedor"> | number
    comentarios?: StringFilter<"CalificacionProveedor"> | string
    proveedorId?: IntFilter<"CalificacionProveedor"> | number
    fechaCalificacion?: DateTimeFilter<"CalificacionProveedor"> | Date | string
  }

  export type EventoCreateWithoutTipoEventoInput = {
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    responsable: PersonaCreateNestedOneWithoutEventosInput
    pagos?: PagoCreateNestedManyWithoutEventoInput
    reserva?: ReservaCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutTipoEventoInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    responsableId: number
    pagos?: PagoUncheckedCreateNestedManyWithoutEventoInput
    reserva?: ReservaUncheckedCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutTipoEventoInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutTipoEventoInput, EventoUncheckedCreateWithoutTipoEventoInput>
  }

  export type EventoCreateManyTipoEventoInputEnvelope = {
    data: EventoCreateManyTipoEventoInput | EventoCreateManyTipoEventoInput[]
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithWhereUniqueWithoutTipoEventoInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutTipoEventoInput, EventoUncheckedUpdateWithoutTipoEventoInput>
    create: XOR<EventoCreateWithoutTipoEventoInput, EventoUncheckedCreateWithoutTipoEventoInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutTipoEventoInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutTipoEventoInput, EventoUncheckedUpdateWithoutTipoEventoInput>
  }

  export type EventoUpdateManyWithWhereWithoutTipoEventoInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutTipoEventoInput>
  }

  export type EventoScalarWhereInput = {
    AND?: EventoScalarWhereInput | EventoScalarWhereInput[]
    OR?: EventoScalarWhereInput[]
    NOT?: EventoScalarWhereInput | EventoScalarWhereInput[]
    id?: IntFilter<"Evento"> | number
    nombre?: StringFilter<"Evento"> | string
    fecha?: DateTimeFilter<"Evento"> | Date | string
    hora?: StringFilter<"Evento"> | string
    lugar?: StringFilter<"Evento"> | string
    tipoEventoId?: IntFilter<"Evento"> | number
    responsableId?: IntFilter<"Evento"> | number
  }

  export type EventoCreateWithoutResponsableInput = {
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEvento: TipoEventoCreateNestedOneWithoutEventosInput
    pagos?: PagoCreateNestedManyWithoutEventoInput
    reserva?: ReservaCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutResponsableInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
    pagos?: PagoUncheckedCreateNestedManyWithoutEventoInput
    reserva?: ReservaUncheckedCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutResponsableInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutResponsableInput, EventoUncheckedCreateWithoutResponsableInput>
  }

  export type EventoCreateManyResponsableInputEnvelope = {
    data: EventoCreateManyResponsableInput | EventoCreateManyResponsableInput[]
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithWhereUniqueWithoutResponsableInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutResponsableInput, EventoUncheckedUpdateWithoutResponsableInput>
    create: XOR<EventoCreateWithoutResponsableInput, EventoUncheckedCreateWithoutResponsableInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutResponsableInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutResponsableInput, EventoUncheckedUpdateWithoutResponsableInput>
  }

  export type EventoUpdateManyWithWhereWithoutResponsableInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutResponsableInput>
  }

  export type PagoCreateWithoutMetodoPagoInput = {
    monto: number
    fechaPago: Date | string
    evento: EventoCreateNestedOneWithoutPagosInput
    cliente: ClienteCreateNestedOneWithoutPagosInput
  }

  export type PagoUncheckedCreateWithoutMetodoPagoInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    eventoId: number
    clienteId: number
  }

  export type PagoCreateOrConnectWithoutMetodoPagoInput = {
    where: PagoWhereUniqueInput
    create: XOR<PagoCreateWithoutMetodoPagoInput, PagoUncheckedCreateWithoutMetodoPagoInput>
  }

  export type PagoCreateManyMetodoPagoInputEnvelope = {
    data: PagoCreateManyMetodoPagoInput | PagoCreateManyMetodoPagoInput[]
    skipDuplicates?: boolean
  }

  export type AsistenteCreateWithoutMetodoPagoInput = {
    nombre: string
    correo: string
    telefono: string
    cliente?: ClienteCreateNestedOneWithoutAsistentesInput
  }

  export type AsistenteUncheckedCreateWithoutMetodoPagoInput = {
    id?: number
    nombre: string
    correo: string
    telefono: string
    clienteId?: number | null
  }

  export type AsistenteCreateOrConnectWithoutMetodoPagoInput = {
    where: AsistenteWhereUniqueInput
    create: XOR<AsistenteCreateWithoutMetodoPagoInput, AsistenteUncheckedCreateWithoutMetodoPagoInput>
  }

  export type AsistenteCreateManyMetodoPagoInputEnvelope = {
    data: AsistenteCreateManyMetodoPagoInput | AsistenteCreateManyMetodoPagoInput[]
    skipDuplicates?: boolean
  }

  export type PagoUpsertWithWhereUniqueWithoutMetodoPagoInput = {
    where: PagoWhereUniqueInput
    update: XOR<PagoUpdateWithoutMetodoPagoInput, PagoUncheckedUpdateWithoutMetodoPagoInput>
    create: XOR<PagoCreateWithoutMetodoPagoInput, PagoUncheckedCreateWithoutMetodoPagoInput>
  }

  export type PagoUpdateWithWhereUniqueWithoutMetodoPagoInput = {
    where: PagoWhereUniqueInput
    data: XOR<PagoUpdateWithoutMetodoPagoInput, PagoUncheckedUpdateWithoutMetodoPagoInput>
  }

  export type PagoUpdateManyWithWhereWithoutMetodoPagoInput = {
    where: PagoScalarWhereInput
    data: XOR<PagoUpdateManyMutationInput, PagoUncheckedUpdateManyWithoutMetodoPagoInput>
  }

  export type AsistenteUpsertWithWhereUniqueWithoutMetodoPagoInput = {
    where: AsistenteWhereUniqueInput
    update: XOR<AsistenteUpdateWithoutMetodoPagoInput, AsistenteUncheckedUpdateWithoutMetodoPagoInput>
    create: XOR<AsistenteCreateWithoutMetodoPagoInput, AsistenteUncheckedCreateWithoutMetodoPagoInput>
  }

  export type AsistenteUpdateWithWhereUniqueWithoutMetodoPagoInput = {
    where: AsistenteWhereUniqueInput
    data: XOR<AsistenteUpdateWithoutMetodoPagoInput, AsistenteUncheckedUpdateWithoutMetodoPagoInput>
  }

  export type AsistenteUpdateManyWithWhereWithoutMetodoPagoInput = {
    where: AsistenteScalarWhereInput
    data: XOR<AsistenteUpdateManyMutationInput, AsistenteUncheckedUpdateManyWithoutMetodoPagoInput>
  }

  export type AsistenteScalarWhereInput = {
    AND?: AsistenteScalarWhereInput | AsistenteScalarWhereInput[]
    OR?: AsistenteScalarWhereInput[]
    NOT?: AsistenteScalarWhereInput | AsistenteScalarWhereInput[]
    id?: IntFilter<"Asistente"> | number
    nombre?: StringFilter<"Asistente"> | string
    correo?: StringFilter<"Asistente"> | string
    telefono?: StringFilter<"Asistente"> | string
    clienteId?: IntNullableFilter<"Asistente"> | number | null
    metodoPagoId?: IntNullableFilter<"Asistente"> | number | null
  }

  export type AsistenteCreateWithoutClienteInput = {
    nombre: string
    correo: string
    telefono: string
    metodoPago?: MetodoPagoCreateNestedOneWithoutAsistentesInput
  }

  export type AsistenteUncheckedCreateWithoutClienteInput = {
    id?: number
    nombre: string
    correo: string
    telefono: string
    metodoPagoId?: number | null
  }

  export type AsistenteCreateOrConnectWithoutClienteInput = {
    where: AsistenteWhereUniqueInput
    create: XOR<AsistenteCreateWithoutClienteInput, AsistenteUncheckedCreateWithoutClienteInput>
  }

  export type AsistenteCreateManyClienteInputEnvelope = {
    data: AsistenteCreateManyClienteInput | AsistenteCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type PagoCreateWithoutClienteInput = {
    monto: number
    fechaPago: Date | string
    metodoPago: MetodoPagoCreateNestedOneWithoutPagosInput
    evento: EventoCreateNestedOneWithoutPagosInput
  }

  export type PagoUncheckedCreateWithoutClienteInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    metodoPagoId: number
    eventoId: number
  }

  export type PagoCreateOrConnectWithoutClienteInput = {
    where: PagoWhereUniqueInput
    create: XOR<PagoCreateWithoutClienteInput, PagoUncheckedCreateWithoutClienteInput>
  }

  export type PagoCreateManyClienteInputEnvelope = {
    data: PagoCreateManyClienteInput | PagoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type ProveedorCreateWithoutClienteInput = {
    nombre: string
    contacto: string
    telefono: string
    contrato?: ContratoCreateNestedOneWithoutProveedorInput
    calificaciones?: CalificacionProveedorCreateNestedManyWithoutProveedorInput
  }

  export type ProveedorUncheckedCreateWithoutClienteInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    contratoId?: number | null
    calificaciones?: CalificacionProveedorUncheckedCreateNestedManyWithoutProveedorInput
  }

  export type ProveedorCreateOrConnectWithoutClienteInput = {
    where: ProveedorWhereUniqueInput
    create: XOR<ProveedorCreateWithoutClienteInput, ProveedorUncheckedCreateWithoutClienteInput>
  }

  export type ProveedorCreateManyClienteInputEnvelope = {
    data: ProveedorCreateManyClienteInput | ProveedorCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type AsistenteUpsertWithWhereUniqueWithoutClienteInput = {
    where: AsistenteWhereUniqueInput
    update: XOR<AsistenteUpdateWithoutClienteInput, AsistenteUncheckedUpdateWithoutClienteInput>
    create: XOR<AsistenteCreateWithoutClienteInput, AsistenteUncheckedCreateWithoutClienteInput>
  }

  export type AsistenteUpdateWithWhereUniqueWithoutClienteInput = {
    where: AsistenteWhereUniqueInput
    data: XOR<AsistenteUpdateWithoutClienteInput, AsistenteUncheckedUpdateWithoutClienteInput>
  }

  export type AsistenteUpdateManyWithWhereWithoutClienteInput = {
    where: AsistenteScalarWhereInput
    data: XOR<AsistenteUpdateManyMutationInput, AsistenteUncheckedUpdateManyWithoutClienteInput>
  }

  export type PagoUpsertWithWhereUniqueWithoutClienteInput = {
    where: PagoWhereUniqueInput
    update: XOR<PagoUpdateWithoutClienteInput, PagoUncheckedUpdateWithoutClienteInput>
    create: XOR<PagoCreateWithoutClienteInput, PagoUncheckedCreateWithoutClienteInput>
  }

  export type PagoUpdateWithWhereUniqueWithoutClienteInput = {
    where: PagoWhereUniqueInput
    data: XOR<PagoUpdateWithoutClienteInput, PagoUncheckedUpdateWithoutClienteInput>
  }

  export type PagoUpdateManyWithWhereWithoutClienteInput = {
    where: PagoScalarWhereInput
    data: XOR<PagoUpdateManyMutationInput, PagoUncheckedUpdateManyWithoutClienteInput>
  }

  export type ProveedorUpsertWithWhereUniqueWithoutClienteInput = {
    where: ProveedorWhereUniqueInput
    update: XOR<ProveedorUpdateWithoutClienteInput, ProveedorUncheckedUpdateWithoutClienteInput>
    create: XOR<ProveedorCreateWithoutClienteInput, ProveedorUncheckedCreateWithoutClienteInput>
  }

  export type ProveedorUpdateWithWhereUniqueWithoutClienteInput = {
    where: ProveedorWhereUniqueInput
    data: XOR<ProveedorUpdateWithoutClienteInput, ProveedorUncheckedUpdateWithoutClienteInput>
  }

  export type ProveedorUpdateManyWithWhereWithoutClienteInput = {
    where: ProveedorScalarWhereInput
    data: XOR<ProveedorUpdateManyMutationInput, ProveedorUncheckedUpdateManyWithoutClienteInput>
  }

  export type ProveedorScalarWhereInput = {
    AND?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
    OR?: ProveedorScalarWhereInput[]
    NOT?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
    id?: IntFilter<"Proveedor"> | number
    nombre?: StringFilter<"Proveedor"> | string
    contacto?: StringFilter<"Proveedor"> | string
    telefono?: StringFilter<"Proveedor"> | string
    contratoId?: IntNullableFilter<"Proveedor"> | number | null
    clienteId?: IntNullableFilter<"Proveedor"> | number | null
  }

  export type EventoCreateWithoutReservaInput = {
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEvento: TipoEventoCreateNestedOneWithoutEventosInput
    responsable: PersonaCreateNestedOneWithoutEventosInput
    pagos?: PagoCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutReservaInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
    responsableId: number
    pagos?: PagoUncheckedCreateNestedManyWithoutEventoInput
    calificacion?: CalificacionUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutReservaInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutReservaInput, EventoUncheckedCreateWithoutReservaInput>
  }

  export type ServicioCreateWithoutReservaInput = {
    nombre: string
    costo: number
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
    Contratos?: ContratoCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutReservaInput = {
    id?: number
    nombre: string
    costo: number
    tipoServicioId: number
    Contratos?: ContratoUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutReservaInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutReservaInput, ServicioUncheckedCreateWithoutReservaInput>
  }

  export type ServicioCreateManyReservaInputEnvelope = {
    data: ServicioCreateManyReservaInput | ServicioCreateManyReservaInput[]
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithoutReservaInput = {
    update: XOR<EventoUpdateWithoutReservaInput, EventoUncheckedUpdateWithoutReservaInput>
    create: XOR<EventoCreateWithoutReservaInput, EventoUncheckedCreateWithoutReservaInput>
    where?: EventoWhereInput
  }

  export type EventoUpdateToOneWithWhereWithoutReservaInput = {
    where?: EventoWhereInput
    data: XOR<EventoUpdateWithoutReservaInput, EventoUncheckedUpdateWithoutReservaInput>
  }

  export type EventoUpdateWithoutReservaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEvento?: TipoEventoUpdateOneRequiredWithoutEventosNestedInput
    responsable?: PersonaUpdateOneRequiredWithoutEventosNestedInput
    pagos?: PagoUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    pagos?: PagoUncheckedUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type ServicioUpsertWithWhereUniqueWithoutReservaInput = {
    where: ServicioWhereUniqueInput
    update: XOR<ServicioUpdateWithoutReservaInput, ServicioUncheckedUpdateWithoutReservaInput>
    create: XOR<ServicioCreateWithoutReservaInput, ServicioUncheckedCreateWithoutReservaInput>
  }

  export type ServicioUpdateWithWhereUniqueWithoutReservaInput = {
    where: ServicioWhereUniqueInput
    data: XOR<ServicioUpdateWithoutReservaInput, ServicioUncheckedUpdateWithoutReservaInput>
  }

  export type ServicioUpdateManyWithWhereWithoutReservaInput = {
    where: ServicioScalarWhereInput
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyWithoutReservaInput>
  }

  export type ServicioScalarWhereInput = {
    AND?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
    OR?: ServicioScalarWhereInput[]
    NOT?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
    id?: IntFilter<"Servicio"> | number
    nombre?: StringFilter<"Servicio"> | string
    costo?: FloatFilter<"Servicio"> | number
    reservaId?: IntFilter<"Servicio"> | number
    tipoServicioId?: IntFilter<"Servicio"> | number
  }

  export type ServicioCreateWithoutTipoServicioInput = {
    nombre: string
    costo: number
    reserva: ReservaCreateNestedOneWithoutServiciosInput
    Contratos?: ContratoCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutTipoServicioInput = {
    id?: number
    nombre: string
    costo: number
    reservaId: number
    Contratos?: ContratoUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutTipoServicioInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput>
  }

  export type ServicioCreateManyTipoServicioInputEnvelope = {
    data: ServicioCreateManyTipoServicioInput | ServicioCreateManyTipoServicioInput[]
    skipDuplicates?: boolean
  }

  export type ServicioUpsertWithWhereUniqueWithoutTipoServicioInput = {
    where: ServicioWhereUniqueInput
    update: XOR<ServicioUpdateWithoutTipoServicioInput, ServicioUncheckedUpdateWithoutTipoServicioInput>
    create: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput>
  }

  export type ServicioUpdateWithWhereUniqueWithoutTipoServicioInput = {
    where: ServicioWhereUniqueInput
    data: XOR<ServicioUpdateWithoutTipoServicioInput, ServicioUncheckedUpdateWithoutTipoServicioInput>
  }

  export type ServicioUpdateManyWithWhereWithoutTipoServicioInput = {
    where: ServicioScalarWhereInput
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyWithoutTipoServicioInput>
  }

  export type ServicioCreateWithoutContratosInput = {
    nombre: string
    costo: number
    reserva: ReservaCreateNestedOneWithoutServiciosInput
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
  }

  export type ServicioUncheckedCreateWithoutContratosInput = {
    id?: number
    nombre: string
    costo: number
    reservaId: number
    tipoServicioId: number
  }

  export type ServicioCreateOrConnectWithoutContratosInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutContratosInput, ServicioUncheckedCreateWithoutContratosInput>
  }

  export type ProveedorCreateWithoutContratoInput = {
    nombre: string
    contacto: string
    telefono: string
    cliente?: ClienteCreateNestedOneWithoutProveedoresInput
    calificaciones?: CalificacionProveedorCreateNestedManyWithoutProveedorInput
  }

  export type ProveedorUncheckedCreateWithoutContratoInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    clienteId?: number | null
    calificaciones?: CalificacionProveedorUncheckedCreateNestedManyWithoutProveedorInput
  }

  export type ProveedorCreateOrConnectWithoutContratoInput = {
    where: ProveedorWhereUniqueInput
    create: XOR<ProveedorCreateWithoutContratoInput, ProveedorUncheckedCreateWithoutContratoInput>
  }

  export type ProveedorCreateManyContratoInputEnvelope = {
    data: ProveedorCreateManyContratoInput | ProveedorCreateManyContratoInput[]
    skipDuplicates?: boolean
  }

  export type ServicioUpsertWithoutContratosInput = {
    update: XOR<ServicioUpdateWithoutContratosInput, ServicioUncheckedUpdateWithoutContratosInput>
    create: XOR<ServicioCreateWithoutContratosInput, ServicioUncheckedCreateWithoutContratosInput>
    where?: ServicioWhereInput
  }

  export type ServicioUpdateToOneWithWhereWithoutContratosInput = {
    where?: ServicioWhereInput
    data: XOR<ServicioUpdateWithoutContratosInput, ServicioUncheckedUpdateWithoutContratosInput>
  }

  export type ServicioUpdateWithoutContratosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reserva?: ReservaUpdateOneRequiredWithoutServiciosNestedInput
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
  }

  export type ServicioUncheckedUpdateWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    tipoServicioId?: IntFieldUpdateOperationsInput | number
  }

  export type ProveedorUpsertWithWhereUniqueWithoutContratoInput = {
    where: ProveedorWhereUniqueInput
    update: XOR<ProveedorUpdateWithoutContratoInput, ProveedorUncheckedUpdateWithoutContratoInput>
    create: XOR<ProveedorCreateWithoutContratoInput, ProveedorUncheckedCreateWithoutContratoInput>
  }

  export type ProveedorUpdateWithWhereUniqueWithoutContratoInput = {
    where: ProveedorWhereUniqueInput
    data: XOR<ProveedorUpdateWithoutContratoInput, ProveedorUncheckedUpdateWithoutContratoInput>
  }

  export type ProveedorUpdateManyWithWhereWithoutContratoInput = {
    where: ProveedorScalarWhereInput
    data: XOR<ProveedorUpdateManyMutationInput, ProveedorUncheckedUpdateManyWithoutContratoInput>
  }

  export type EventoCreateWithoutCalificacionInput = {
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEvento: TipoEventoCreateNestedOneWithoutEventosInput
    responsable: PersonaCreateNestedOneWithoutEventosInput
    pagos?: PagoCreateNestedManyWithoutEventoInput
    reserva?: ReservaCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutCalificacionInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
    responsableId: number
    pagos?: PagoUncheckedCreateNestedManyWithoutEventoInput
    reserva?: ReservaUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutCalificacionInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutCalificacionInput, EventoUncheckedCreateWithoutCalificacionInput>
  }

  export type EventoUpsertWithoutCalificacionInput = {
    update: XOR<EventoUpdateWithoutCalificacionInput, EventoUncheckedUpdateWithoutCalificacionInput>
    create: XOR<EventoCreateWithoutCalificacionInput, EventoUncheckedCreateWithoutCalificacionInput>
    where?: EventoWhereInput
  }

  export type EventoUpdateToOneWithWhereWithoutCalificacionInput = {
    where?: EventoWhereInput
    data: XOR<EventoUpdateWithoutCalificacionInput, EventoUncheckedUpdateWithoutCalificacionInput>
  }

  export type EventoUpdateWithoutCalificacionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEvento?: TipoEventoUpdateOneRequiredWithoutEventosNestedInput
    responsable?: PersonaUpdateOneRequiredWithoutEventosNestedInput
    pagos?: PagoUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutCalificacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    pagos?: PagoUncheckedUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type ProveedorCreateWithoutCalificacionesInput = {
    nombre: string
    contacto: string
    telefono: string
    contrato?: ContratoCreateNestedOneWithoutProveedorInput
    cliente?: ClienteCreateNestedOneWithoutProveedoresInput
  }

  export type ProveedorUncheckedCreateWithoutCalificacionesInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    contratoId?: number | null
    clienteId?: number | null
  }

  export type ProveedorCreateOrConnectWithoutCalificacionesInput = {
    where: ProveedorWhereUniqueInput
    create: XOR<ProveedorCreateWithoutCalificacionesInput, ProveedorUncheckedCreateWithoutCalificacionesInput>
  }

  export type ProveedorUpsertWithoutCalificacionesInput = {
    update: XOR<ProveedorUpdateWithoutCalificacionesInput, ProveedorUncheckedUpdateWithoutCalificacionesInput>
    create: XOR<ProveedorCreateWithoutCalificacionesInput, ProveedorUncheckedCreateWithoutCalificacionesInput>
    where?: ProveedorWhereInput
  }

  export type ProveedorUpdateToOneWithWhereWithoutCalificacionesInput = {
    where?: ProveedorWhereInput
    data: XOR<ProveedorUpdateWithoutCalificacionesInput, ProveedorUncheckedUpdateWithoutCalificacionesInput>
  }

  export type ProveedorUpdateWithoutCalificacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contrato?: ContratoUpdateOneWithoutProveedorNestedInput
    cliente?: ClienteUpdateOneWithoutProveedoresNestedInput
  }

  export type ProveedorUncheckedUpdateWithoutCalificacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PagoCreateManyEventoInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    metodoPagoId: number
    clienteId: number
  }

  export type ReservaCreateManyEventoInput = {
    id?: number
    fechaReserva: Date | string
    horaReserva: string
    duracionReserva: number
  }

  export type CalificacionCreateManyEventoInput = {
    id?: number
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
  }

  export type PagoUpdateWithoutEventoInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutPagosNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutPagosNestedInput
  }

  export type PagoUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPagoId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type PagoUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPagoId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type ReservaUpdateWithoutEventoInput = {
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    duracionReserva?: IntFieldUpdateOperationsInput | number
    servicios?: ServicioUpdateManyWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    duracionReserva?: IntFieldUpdateOperationsInput | number
    servicios?: ServicioUncheckedUpdateManyWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaReserva?: DateTimeFieldUpdateOperationsInput | Date | string
    horaReserva?: StringFieldUpdateOperationsInput | string
    duracionReserva?: IntFieldUpdateOperationsInput | number
  }

  export type CalificacionUpdateWithoutEventoInput = {
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContratoCreateManyServicioInput = {
    id?: number
    fechaInicio: Date | string
    fechaFinalizacion: Date | string
    tipoContrato: string
    costoTotal: number
  }

  export type ContratoUpdateWithoutServicioInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
    proveedor?: ProveedorUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
    proveedor?: ProveedorUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateManyWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoContrato?: StringFieldUpdateOperationsInput | string
    costoTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CalificacionProveedorCreateManyProveedorInput = {
    id?: number
    puntuacion: number
    comentarios: string
    fechaCalificacion: Date | string
  }

  export type CalificacionProveedorUpdateWithoutProveedorInput = {
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionProveedorUncheckedUpdateWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalificacionProveedorUncheckedUpdateManyWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntuacion?: IntFieldUpdateOperationsInput | number
    comentarios?: StringFieldUpdateOperationsInput | string
    fechaCalificacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventoCreateManyTipoEventoInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    responsableId: number
  }

  export type EventoUpdateWithoutTipoEventoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    responsable?: PersonaUpdateOneRequiredWithoutEventosNestedInput
    pagos?: PagoUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutTipoEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    responsableId?: IntFieldUpdateOperationsInput | number
    pagos?: PagoUncheckedUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUncheckedUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateManyWithoutTipoEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    responsableId?: IntFieldUpdateOperationsInput | number
  }

  export type EventoCreateManyResponsableInput = {
    id?: number
    nombre: string
    fecha: Date | string
    hora: string
    lugar: string
    tipoEventoId: number
  }

  export type EventoUpdateWithoutResponsableInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEvento?: TipoEventoUpdateOneRequiredWithoutEventosNestedInput
    pagos?: PagoUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutResponsableInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
    pagos?: PagoUncheckedUpdateManyWithoutEventoNestedInput
    reserva?: ReservaUncheckedUpdateManyWithoutEventoNestedInput
    calificacion?: CalificacionUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateManyWithoutResponsableInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    tipoEventoId?: IntFieldUpdateOperationsInput | number
  }

  export type PagoCreateManyMetodoPagoInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    eventoId: number
    clienteId: number
  }

  export type AsistenteCreateManyMetodoPagoInput = {
    id?: number
    nombre: string
    correo: string
    telefono: string
    clienteId?: number | null
  }

  export type PagoUpdateWithoutMetodoPagoInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    evento?: EventoUpdateOneRequiredWithoutPagosNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutPagosNestedInput
  }

  export type PagoUncheckedUpdateWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    eventoId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type PagoUncheckedUpdateManyWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    eventoId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type AsistenteUpdateWithoutMetodoPagoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneWithoutAsistentesNestedInput
  }

  export type AsistenteUncheckedUpdateWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsistenteUncheckedUpdateManyWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsistenteCreateManyClienteInput = {
    id?: number
    nombre: string
    correo: string
    telefono: string
    metodoPagoId?: number | null
  }

  export type PagoCreateManyClienteInput = {
    id?: number
    monto: number
    fechaPago: Date | string
    metodoPagoId: number
    eventoId: number
  }

  export type ProveedorCreateManyClienteInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    contratoId?: number | null
  }

  export type AsistenteUpdateWithoutClienteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    metodoPago?: MetodoPagoUpdateOneWithoutAsistentesNestedInput
  }

  export type AsistenteUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    metodoPagoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AsistenteUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    metodoPagoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PagoUpdateWithoutClienteInput = {
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutPagosNestedInput
    evento?: EventoUpdateOneRequiredWithoutPagosNestedInput
  }

  export type PagoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPagoId?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
  }

  export type PagoUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    monto?: FloatFieldUpdateOperationsInput | number
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    metodoPagoId?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
  }

  export type ProveedorUpdateWithoutClienteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contrato?: ContratoUpdateOneWithoutProveedorNestedInput
    calificaciones?: CalificacionProveedorUpdateManyWithoutProveedorNestedInput
  }

  export type ProveedorUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
    calificaciones?: CalificacionProveedorUncheckedUpdateManyWithoutProveedorNestedInput
  }

  export type ProveedorUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ServicioCreateManyReservaInput = {
    id?: number
    nombre: string
    costo: number
    tipoServicioId: number
  }

  export type ServicioUpdateWithoutReservaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
    Contratos?: ContratoUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    Contratos?: ContratoUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateManyWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    tipoServicioId?: IntFieldUpdateOperationsInput | number
  }

  export type ServicioCreateManyTipoServicioInput = {
    id?: number
    nombre: string
    costo: number
    reservaId: number
  }

  export type ServicioUpdateWithoutTipoServicioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reserva?: ReservaUpdateOneRequiredWithoutServiciosNestedInput
    Contratos?: ContratoUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutTipoServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    Contratos?: ContratoUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateManyWithoutTipoServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    costo?: FloatFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
  }

  export type ProveedorCreateManyContratoInput = {
    id?: number
    nombre: string
    contacto: string
    telefono: string
    clienteId?: number | null
  }

  export type ProveedorUpdateWithoutContratoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneWithoutProveedoresNestedInput
    calificaciones?: CalificacionProveedorUpdateManyWithoutProveedorNestedInput
  }

  export type ProveedorUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
    calificaciones?: CalificacionProveedorUncheckedUpdateManyWithoutProveedorNestedInput
  }

  export type ProveedorUncheckedUpdateManyWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EventoCountOutputTypeDefaultArgs instead
     */
    export type EventoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicioCountOutputTypeDefaultArgs instead
     */
    export type ServicioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProveedorCountOutputTypeDefaultArgs instead
     */
    export type ProveedorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProveedorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoEventoCountOutputTypeDefaultArgs instead
     */
    export type TipoEventoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoEventoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonaCountOutputTypeDefaultArgs instead
     */
    export type PersonaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MetodoPagoCountOutputTypeDefaultArgs instead
     */
    export type MetodoPagoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetodoPagoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteCountOutputTypeDefaultArgs instead
     */
    export type ClienteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservaCountOutputTypeDefaultArgs instead
     */
    export type ReservaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoServicioCountOutputTypeDefaultArgs instead
     */
    export type TipoServicioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoServicioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContratoCountOutputTypeDefaultArgs instead
     */
    export type ContratoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContratoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventoDefaultArgs instead
     */
    export type EventoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AsistenteDefaultArgs instead
     */
    export type AsistenteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AsistenteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PagoDefaultArgs instead
     */
    export type PagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PagoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicioDefaultArgs instead
     */
    export type ServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProveedorDefaultArgs instead
     */
    export type ProveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProveedorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoEventoDefaultArgs instead
     */
    export type TipoEventoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoEventoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonaDefaultArgs instead
     */
    export type PersonaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MetodoPagoDefaultArgs instead
     */
    export type MetodoPagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetodoPagoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservaDefaultArgs instead
     */
    export type ReservaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoServicioDefaultArgs instead
     */
    export type TipoServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoServicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContratoDefaultArgs instead
     */
    export type ContratoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContratoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CalificacionDefaultArgs instead
     */
    export type CalificacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CalificacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CalificacionProveedorDefaultArgs instead
     */
    export type CalificacionProveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CalificacionProveedorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}